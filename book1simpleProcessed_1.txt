computer graphics c version donald hearn  m pauline baker contents   preface xvii a survey of computer graphics computer aided design presentation graphics in computer art entertainment education and training visualization image processing graphical user interfaces  overview of graphics systems video display devices refresh cathode ray tubes raster scan displays random scan displays color crt monitors direct view storage tubes flat panel displays three dimensional viewing devices stereoscopic and virtual reality systems raster scan systems video controller raster scan display processor random scan systems graphics monitors and workstations input devices keyboards mouse trackball and spaceball joysticks data glove digitizers image scanners touch panels light pens voice systems hard copy devices graphics software coordinate representations graphics functions software standards phigs workstations summary references exercises contents  output primitives points and lines line drawing algorithms 8b dda algorithm bresenham s line algorithm parallel line algorithms loading the frame buffer line function circle generating algorithms properties of circles midpoint circle algorithm  ellipse generating algorithms properties of ellipses midpoint ellipse algorithm other curves conic sections polynomials and spline curves parallel curve algorithms curve functions pixel addressing and object geometry screen grid coordinates maintaining geometric properties of displayed objects filled area primitives scan line polygon fill algorithm inside outside tests scan line fill of curved boundary areas boundary fill algorithm flood fill algorithm fill area functions cell array character generation summary applications references exercises attributes of output primitives line attributes line type line width pen and brush options line color curve attributes color and grayscale levels color tables grayscale area fill attributes fill styles pattern fill soft fill character attributes text attributes marker attributes bundled attributes bundled line attributes bundled area fill attributes bundled text attributes bundled marker attributes inquiry functions antialiasing supersampling straight line segments pixel weighting masks area sampling straight line segments filtering techniques pixel phasing compensating for line intensity differences antialiasing area boundaries summary references exercises two dimensional geometric  transformations basic transformations translation rotation scaling matrix representations and homogeneous coordinates composite transformations translations rotations scalings general pivot point rotation general fixed point scaling general scaling directions concatenation properties general composite transformations and computational efficiency other transformations reflection shear transformations between coordinate systems contents affine transformations transformation functions raster methods for transformations summary references exercises two dimensional viewing the viewing pipeline viewing coordinate reference frame window to viewport coordinate transformation two dimensional viewing functions clipping operations point clipping line clipping cohen sutherland line clipping liang barsky line clipping nicholl lee nicholl line clipping line clipping using nonrectangular clip windows splitting concave polygons polygon clipping sutherland hodgeman polygon clipping weiler atherton polygon clipping other polygon clipping algorithms curve clipping text clipping exterior clipping summary references exercises contents structures and hierarchical  modeling structure concepts basic structure functions setting structure attributes editing structures structure lists and the element pointer setting the edit mode inserting structure elements replacing structure elements deleting structure elements labeling structure elements copying elements from one structure to another basic modeling concepts model representations symbol hierarchies modeling packages hierarchical modeling with structures local coordinates and modeling transformations modeling transformations structure hierarchies summary references exercises graphical user interfaces and interactive input methods the user dialogue windows and icons  accommodating multiple skill levels consistency minimizing memorization backup and error handling feedback input of graphical data logical classification of input devices locator devices stroke devices string devices valuator devices choice devices pick devices input functions input modes request mode locator and stroke input in request mode string input in request mode valuator input in request mode choice input in request mode pick input in request mode sample mode event mode concurrent use of input modes initial values for input device parameters interactive picture construction techniques basic positioning methods constraints grids gravity field rubber band methods dragging painting and drawing virtual reality environments summary references exercises three dimensional concepts three dimensional display methods parallel projection perspective projection depth cueing visible line and surface identification surface rendering exploded and cutaway views three dimensional and stereoscopic views  three dimensional graphics packages three dimensional object representations 10 polygon surfaces polygon tables plane equations polygon meshes 10 curved lines and surfaces 10 quadric surfaces sphere s11 ellipsoid 3u torus contents superquadrics superellipse superellipsoid blobby objects spline representations interpolation and approximation splines parametric continuity conditions geometric continuity conditions spline specifications cubic spline interpolation methods natural cubic splines hermite interpolation cardinal splines kochanek bartels splines b zier curves and surfaces b zier curves properties of b zier curves design techniques using b zier curves cubic b zier curves b zier surfaces b spline curves and surfaces b spline curves uniform periodic b splines cubic periodic b splines open uniform b splines nonuniform b splines b spline surfaces 10 beta splines beta spline continuity conditions cubic periodic beta spline matrix representation 11 rational splines contents conversion between spline representations displaying spline curves and surfaces horner s rule forward difference calculations subdivision methods sweep representations constructive solid geometry methods octrees bsp trees fractal geometry methods fractal generation procedures classification of fractals fractal dimension geometric construction of deterministic self similar fractals geometric construction of statistically self similar fractals affine fractal construction methods random midpoint displacement methods controlling terrain topography self squaring fractals self inverse fractals shape grammars and other procedural methods particle systems physically based modeling visualization of data sets visual representations for scalar fields visual representations for vector fields visual representations for tensor fields visual representations for multivariate data fields summary references exercises three dimensional geometric and modeling transformations w1 translation 11 rotation coordinate axes rotations general three dimensional rotations rotations with quaternions 11 scaling 11 other transformations reflections shears 11 composite transformations 11 three dimensional transformation functions w1e7 modeling and cocrdinate transformations summary references exercises 12 three dimensional viewing viewing pipeline 12 viewing coordinates specifying the view plane transformation from world to viewing coordinates projections parallel projections perspective projections view volumes and general projection transformations general parallel projection transformations general perspective projection transformations clipping normalized view volumes viewport clipping clipping in homogeneous coordinates hardware implementations three dimensional viewing functions summary references exercises visible surface detection methods 13 classification of visible surface detection algorithms 13 back face detection 13 depth buffer method 13 a buffer methad 13 scan line method 13 depth sorting method 13 bsp tree method 13 area subdivision method 13 octree methods 13 ray casting method 13 curved surfaces curved surface representations surface contour plots contents wireframe methods visibitity detection functions summary references exercises methods 14 light sources 14 basic illumination models ambient light diffuse reflection specular reflection and the phong model combined diffuse and specular reflections with multiple light sources warn model intensity attenuation color considerations transparency shadows 14 displaying light intensities assigning intensity levels gamma correction and video lookup tables displaying continuous tone images 14 halftone patterns and dithering techniques halftone approximations dithering techniques 14 polygon rendering methods constant intensity shading gouraud shading phong shading contents fast phong shading ray tracing methods basic ray tracing algorithm ray surface intersection calculations reducing object intersection calculations space subdivision methods antialiased ray tracing distributed ray tracing radiosity lighting model basic radiosity model progressive refinement radiosity method environment mapping adding surface detail modeling surface detail with polygons texture mapping procedural texturing methods bump mapping frame mapping summary references exercises color models and color applications 15 properties of light 15 standard primaries and the chromaticity diagram xyz color model cif chromaticity diagram 15 intuitive color concepts 15 rgb color model 15 yiq color model 15 cmy color model 15 hsv color model 15 conversion between hsv and rgb models 15 hls color model 15 color selection and applications summary references exercises computer  animation 16 design of animation sequences 16 general computer animation functions 16 raster animations 16 computer animation languages 16 key frame systems morphing simulating accelerations 16 motion specifications direct motion specification goal directed systems kinematics and dynamics summary references exercises mathematics for computer graphics a coordinate reference frames two dimensional cartesian reference frames polar coordinates in the xy plane three dimensional cartesian reference frames three dimensional curvilinear coordinate systems solid angle points and vectors vector addition and scalar multiplication scalar product of two vectors vector product of two vectors basis vectors and the metric tensor orthonormal basis metric tensor matrices scalar multiplication and matrix addition matrix multiplication contents matrix transpose determinant of a matrix matrix inverse a complex numbers a quaternions a nonparametric representations a parametric representations a numerical methods solving sets of linear equations finding roots of nonlinear equations evaluating integrals fitting curves to data sets computer graphics c version chapter  a survey of computer graphics      omputers have become a powerful tool for the rapid and economical pro  duction of pictures there is virtually no area in which graphical displays cannot be used to some advantage and so it is not surprising to find the use of computer graphics so widespread although early applications in engineering and science had to rely on expensive and cumbersome equipment advances in computer technology have made interactive computer graphics a practical tool today we find computer graphics used routinely in such diverse areas as science engineering medicine business industry government art entertainment ad vertising education and training  summarizes the many applications of graphics in simulations education and graph presentations before we get into the details of how to do computer graphics we first take a short tour through a gallery of graphics applications    i  frgtere t examples of computer graphics applications  courtesy of dicomed corporation   a major use of computer graphics is in design processes particularly for engi neering and architectural systems but almost all products are now computer de signed generally referred to as cad computer aided design methods are now routinely used in the design of buildings automobiles aircraft watercraft space craft computers textiles and many many other products  for some design applications objects are first displayed in a wireframe out line form that shows the overall shape and internal features of objects wireframe displays also allow designers to quickly see the effects of interactive adjustments to design shapes figures and give examples of wireframe displays in de sign applications  software packages for cad applications typically provide the designer with a multi window environment as in figs and the various displayed windows can show enlarged sections or different views of objects  circuits such as the one shown in  and networks for communica tions water supply or other utilities are constructed with repeated placement of a few graphical shapes the shapes used in a design represent the different net work or circuit components standard shapes for electrical electronic and logic circuits are often supplied by the design package for other applications a de signer can create personalized symbols that are to be used to construct the net work or circuit the system is then designed by successively placing components into the layout with the graphics package automatically providing the connec tions between components this allows the designer to quickly try out alternate circuit schematics for minimizing the number of components or the space re quired for the system   color coded wireframe display for an automobile wheel assembly  courtesy of eoans  sutherland   color coded wireframe displays of body designs for an aircraft and an automobile  courtesy of a evans  sutherland and b megatek corporation  animations are often used in cad applications real time animations using wireframe displays on a video monitor are useful for testing performance of a ve hicle or system as demonstrated in  when we do not display objects with rendered surfaces the calculations for each segment of the animation can be per formed quickly to produce a smooth real time motion on the screen also wire frame displays allow the designer to see into the interior of the vehicle and to watch the behavior of inner components during motion animations in virtual reality environments are used to determine how vehicle operators are affected by  multiple window color coded cad workstation displays  courtesy of intergraph corporation   a circuit design application using multiple windows and color coded logic components displayed on a sun workstation with attached speaker and microphone  courtesy of sun microsystems    simulation of vehicle performance during lane changes  courtesy of evans  sutherland and mechanical dynamics inc  certain motions as the tractor operator in  manipulates the controls the headset presents a stereoscopic view   of the front loader bucket or the backhoe just as if the operator were in the tractor seat this allows the designer to explore various positions of the bucket or backhoe that might obstruct the op erator s view which can then be taken into account in the overall tractor design shows a composite wide angle view from the tractor seat displayed on a standard video monitor instead of in a virtual three dimensional scene and  shows a view of the tractor that can be displayed in a separate window or on another monitor    operating a tractor in a virtual reality environment as the controls are moved the operator views the front loader backhoe and surroundings through the headset  courtesy of the national center for supercomputing applications university of illinois at urbana champaign and caterpillar  ine     a headset view of the backhoe presented to the tractor operator  courtesy of the national center for supercomputing applications university of illinois at urbana champaign and caterpillar inc   operator s view of the tractor bucket composited in several sections to form a wide angle view on a standard monitor  courtesy of the national center for supercomputing applications university of mlinois at urbana champaign and caterpillar inc  chapter a survey of computer graphics  view of the tractor displayed on a standard monitor  courtesy of the national center for supercomputing applications university of illinois at urbana champaign and caterpillar inc  when object designs are complete or nearly complete realistic lighting models and surface rendering are applied to produce displays that will show the appearance of the final product examples of this are given in  realistic displays are also generated for advertising of automobiles and other vehicles using special lighting effects and background scenes    the manufacturing process is also tied in to the computer description of de signed objects to automate the construction of the product a circuit board lay out for example can be transformed into a description of the individual processes needed to construct the layout some mechanical parts are manufac tured by describing how the surfaces are to be formed with machine tools figure 13 shows the path to be taken by machine tools over the surfaces of an object during its construction numerically controlled machine tools are then set up to manufacture the part according to these construction layouts   realistic renderings of design products  courtesy of a intergraph corporation and b evans  sutherland   studio lighting effects and realistic acad layout for describing the surface rendering techniques are numerically controlled machining applied to produce advertising of a part the part surface is pieces for finished products the displayed in one color and the tool data for this rendering of a chrysler path in another color  courtesy of laser was supplied by chrysler los alamos national laboratory  corporation  courtesy of eric haines 3d eye inc    a         i michen e   ime tt ee re rr  rid i a fl ig li fl uz eof r ep ig faby adio ii ltd  i renee att s t  ht   architectural cad layout for a building design  courtesy of precision visuals inc  boulder colorado   architects use interactive graphics methods to lay out floor plans such as  that show the positioning of rooms doors windows stairs shelves counters and other building features working from the display of a building layout on a video monitor an electrical designer can try out arrangements for wiring electrical outlets and fire warning systems also facility layout packages can be applied to the layout to determine space utilization in an office or on a manufacturing floor  realistic displays of architectural designs as in  permit both archi tects and their clients to study the appearance of a single building or a group of buildings such as a campus or industrial complex with virtual reality systems designers can even go for a simulated walk through the rooms or around the outsides of buildings to better appreciate the overall effect of a particular design in addition to realistic exterior building displays architectural cad packages also provide facilities for experimenting with three dimensional interior layouts and lighting    many other kinds of systems and products are designed using either gen eral cad packages or specially developed cad software  for exam ple shows a rug pattern designed with a cad system  eageguater   realistic three dimensional renderings of building designs  a a street level perspective for the world trade center project  courtesy of skidmore owings  merrill   b architectural visualization of an atrium created for a comptter animation by marialine prieur lyon france  courtesy of thomson digital image inc   a hotel corridor providing a sense fixtures along an undulating path and creating a sense of entry by using light towers at each hotel room  courtesy of skidmore owings  merrill   another major application area is presentation graphics used to produce illus trations for reports or to generate mm slides or transparencies for use with projectors presentation graphics is commonly used to summarize financial sta tistical mathematical scientific and economic data for research reports manage rial reports consumer information bulletins and other types of reports worksta tion devices and service bureaus exist for converting screen displays into mm slides or overhead transparencies for use in presentations typical examples of presentation graphics are bar charts line graphs surface graphs pie charts and other displays showing relationships between multiple parameters  gives examples of two dimensional graphics combined with ge ographical information this illustration shows three color coded bar charts com bined onto one graph and a pie chart with three sections similar graphs and charts can be displayed in three dimensions to provide additional information three dimensional graphs are sometimes used simply for effect they can provide a more dramatic or more attractive presentation of data relationships the charts in  include a three dimensional bar graph and an exploded pie chart  additional examples of three dimensional graphs are shown in figs 20 and 21 shows one kind of surface plot and  shows a two dimensional contour plot with a height surface  oriental rug pattern created with of movement by placing light computer graphics design methods  courtesy of lexidata corporation  w chapter a survey of computer graphics  two dimensional bar chart and pie chart linked to a geographical chart  courtesy of computer associates copyright  all rights reserved   showing relationships with a surface chart  courtesy of computer associates copyright  all rights reserved   three dimensional bar chart exploded pie chart and line graph  courtesy of computer associates copyright  all rights reserved   plotting two dimensional contours in the ground plane with a height field plotted as a surface above the ground plane  courtesy of computer associates copyright  all rights reserved     time chart displaying relevant information about project tasks  courtesy of computer associates copyright  all rights reserved  illustrates a time chart used in task planning time charts and task network layouts are used in project management to schedule and monitor the progress of projects  computer graphics methods are widely used in both fine art and commercial art applications artists use a variety of computer methods including special pur pose hardware artist s paintbrush programs such as lumena  other paint pack ages such as pixelpaint and superpaint  specially developed software symbolic mathematics packages such as mathematica  cad packages desktop publish ing software and animation packages that provide facilities for designing object shapes and specifiying object motions  illustrates the basic idea behind a paintbrush program that al lows artists to paint pictures on the screen of a video monitor actually the pic ture is usually painted electronically on a graphics tablet digitizer using a sty lus which can simulate different brush strokes brush widths and colors a paintbrush program was used to create the characters in  who seem to be busy on a creation of their own   a paintbrush system with a wacom cordless pressure sensitive stylus was used to produce the electronic painting in  that simulates the brush strokes of van gogh the stylus translates changing hand pressure into variable line widths brush sizes and color gradations shows a watercolor painting produced with this stylus and with software that allows the artist to cre ate watercolor pastel or oil brush effects that simulate different drying out times wetness and footprint gives an example of paintbrush methods combined with scanned images  fine artists use a variety of other computer technologies to produce images to create pictures such as the one shown in  the artist uses a combina tion of three dimensional modeling packages texture mapping drawing pro grams and cad software in  we have a painting produced on a pen section computer art   p  cartoon drawing produced with a paintbrush program symbolically illustrating an artist at work on a video monitor  courtesy of gould inc  imaging  graphics division and aurora imaging  plotter with specially designed software that can create automatic art without intervention from the artist  shows an example of mathematical art this artist uses a com bination of mathematical functions fractal procedures mathematica software ink jet printers and other systems to create a variety of three dimensional and two dimensional shapes and stereoscopic image pairs another example of elec   cartoon demonstrations of an artist creating a picture with a paintbrush system the picture drawn ona graphics tablet is displayed on the video monitor as the elves look on in b  the cartoon is superimposed on the famous thomas nast drawing of saint nicholas which was input to the system with a video camera then scaled and positioned  courtesy gould inc  imaging  graphics division and aurora imaging  igh  a van gogh look alike created by graphics artist elizabeth o rourke with a cordless pressure sensitive stylus  courtesy of wacorn technology corporation   an electronic watercolor painted by john derry of time arts inc using a cordless pressure sensitive stylus and lumena gouache brush software  courtesy of wacom technology corporation   the artist of this picture called electronic avalanche makes a statement about our entanglement with technology using a personal computer with a graphics tablet and lumena software to combine renderings of leaves flower petals and electronics components with scanned images  courtesy of the williams gallery copyright  by joan truckenbrod the school of the art institute of chicago    from a series called spheres of influence this electronic painting entitled whigmalaree was created with a combination of methods using a graphics tablet three dimensional modeling texture mapping and a series of transformations  courtesy of the williams gallery copyright  by wynne ragland  r   electronic art output to a pen plotter from software specially designed by the artist to emulate his style the pen plotter includes multiple pens and painting instruments including chinese brushes  courtesy of the williams gallery copyright  by roman verostko minneapolis college of art  design   this creation is based on a visualization of fermat s last theorem x  y   with n  by andrew hanson department of computer science indiana university the image was rendered using mathematica and wavefront software  courtesy of the williams gallery copyright  by stewart dickson   using mathematical functions fractal procedures and supercomputers this artist composer experiments with various designs to synthesize form and color with musical composition  courtesy of brian evans vanderbilt university  tronic art created with the aid of mathematical relationships is shown in  section the artwork of this composer is often designed in relation to frequency varia computer an tions and other parameters in a musical composition to produce a video that inte grates visual and aural patterns  although we have spent some time discussing current techniques for gen erating electronic images in the fine arts these methods are also applied in com mercial art for logos and other designs page layouts combining text and graph ics tv advertising spots and other areas a workstation for producing page layouts that combine text and graphics is illustrated in   for many applications of commercial art and in motion pictures and other applications  photorealistic techniques are used to render images of a product shows an example of logo design and  gives three computer graphics images for product advertising animations are also used frequently in advertising and television commercials are produced frame by frame where  page layout workstation  courtesy three dimensional rendering for a of visual technology  logo  courtesy of vertigo technology inc   aj b   product advertising  courtesy of a audrey fleisher and b and c softimage inc  v7 each frame of the motion is rendered and saved as an image file in each succes sive frame the motion is simulated by moving object positions slightly from their positions in the previous frame when all frames in the animation sequence have been rendered the frames are transferred to film or stored in a video buffer for playback film animations require frames for each second in the animation se quence if the animation is to be played back on a video monitor frames per second are required  a common graphics method employed in many commercials is morphing where one object is transformed metamorphosed into another this method has been used in tv commercials to turn an oil can into an automobile engine an au tomobile into a tiger a puddle of water into a tire and one person s face into an other face an example of morphing is given in    computer graphics methods are now commonly used in making motion pic tures music videos and television shows sometimes the graphics scenes are dis played by themselves and sometimes graphics objects are combined with the ac tors and live scenes  a graphics scene generated for the movie siar trek the wrath of khan is shown in  the planet and spaceship are drawn in wireframe form and will be shaded with rendering methods to produce solid surfaces shows scenes generated with advanced modeling and surface rendering meth ods for two award winning short films  many tv series regularly employ computer graphics methods shows a scene produced for the series deep space nine and  shows a wireframe person combined with actors in a live scene for the series stay tuned   graphics developed for the paramount pictures movie star trek the wrath of khan  courtesy of evans  sutherland  in  we have a highly realistic image taken from a reconstruction of thir section teenth century dadu now beijing for a japanese broadcast entertainment music videos use graphics in several ways graphics objects can be com  bined with the live action as in fig 38 or graphics and image processing tech  niques can be used to produce a transformation of one person or object into an  other morphing  an example of morphing is shown in the sequence of scenes in   produced for the david byrne video she s mad  a  b   a a computer generated scene from the film red s dream copyright  pixar  b a computer generated scene from the film knickknack copyright  pixar  courtesy of pixar    a graphics scene in the tv series deep space nine  courtesy of rhythm  hues studios  chapter a survey of computer graphics   graphics combined with a live scene in the tv series stay tuned  courtesy of rhythm  hues studios    an image from a reconstruction of thirteenth century dadu beijing today  created by taisei corporation tokyo and rendered with tdi software  courtesy of thompson digital image inc  section education and training   examples of morphing from the david byrne video she s mad  courtesy of david byrne index video and pacific data images   computer generated models of physical financial and economic systems are often used as educational aids models of physical systems physiological sys tems population trends or equipment such as the color coded diagram in fig  can help trainees to understand the operation of the system  for some training applications special systems are designed examples of such specialized systems are the simulators for practice sessions or training of ship captains aircraft pilots heavy equipment operators and air traffic control personnel some simulators have no video screens for example a flight simula tor with only a control panel for instrument flying but most simulators provide graphics screens for visual operation two examples of large simulators with in ternal viewing systems are shown in figs 42 and 43 another type of viewing system is shown in  here a viewing screen with multiple panels is mounted in front of the simulator and color projectors display the flight scene on the screen panels similar viewing systems are used in simulators for training air craft control tower personnel gives an example of the instructor s area in a flight simulator the keyboard is used to input parameters affecting the airplane performance or the environment and the pen plotter is used to chart the path of the aircraft during a training session  scenes generated for various simulators are shown in figs 46 through  an output from an automobile driving simulator is given in  this simulator is used to investigate the behavior of drivers in critical situations the drivers reactions are then used as a basis for optimizing vehicle design to maxi mize traffic safety rae te  color coded diagram used ta a large enclosed flight simulator explain the operation of a nuclear with a full color visual system and reactor  courtesy of los alamos six degrees of freedom in its national laboratory  motion  courtesy of frasca international   a military tank simulator with a visual imagery system  courtesy of mediatech and ge aerospace   section education and training  a flight simulator with an external full color viewing system  courtesy of frasca international    an instructor s area in a flight simulator the equipment allows the instructor to monitor flight conditions and to set airplane and environment parameters  courtesy of frasca international    flight simulator imagery  courtesy of evans  sutherland   imagery generated for a naval simulator  courtesy of eoans  sutherland   space shuttle imagery  courtesy of mediatech and ge aerospace   imagery from an automobile simulator used to test driver reaction  courtesy of evans  sutherland   scientists engineers medical personnel business analysts and others often need to analyze large amounts of information or to study the behavior of certain processes numerical simulations carried out on supercomputers frequently pro duce data files containing thousands and even millions of data values similarly satellite cameras and other sources are amassing large data files faster than they can be interpreted scanning these large sets of numbers tu determine trends and relationships is a tedious and ineffective process but if the data are converted to a visual form the trends and patterns are often immediately apparent figure shows an example of a large data set that has been converted to a color coded display of relative heights above a ground plane once we have plotted the den sity values in this way we can see easily the overall pattern of the data produc ing graphical representations for scientific engineering and medical data sets and processes is generally referred to as scientific visualization and the term busi ness visualization is used in connection with data sets related to commerce indus try and other nonscientific areas  there are many different kinds of data sets and effective visualization schemes depend on the characteristics of the data a collection of data can con tain scalar values vectors higher order tensors or any combination of these data types and data sets can be two dimensional or three dimensional color coding is just one way to visualize a data set additional techniques include contour plots graphs and charts surface renderings and visualizations of volume interi ors in addition image processing techniques are combined with computer graphics to produce many of the data visualizations  mathematicians physical scientists and others use visual techniques to an alyze mathematical functions and processes or simply to produce interesting graphical representations a color plot of mathematical curve functions is shown in  and a surface plot of a function is shown in  fractal proce  section visualization chapter a survey of computer graphics   a color coded plot with million density points of relative brightness observed for the whirlpool nebula reveals two distinct galaxies  courtesy of los alamos national laboratory  tw  mathematical curve functions plotted in various color combinations  courtesy of melvin l prueitt los alamos national laboratory   lighting effects and surface rendering techniques were applied to produce this surface tepresentation for a three dimensional function  courtesy of wolfram research inc the maker of mathematica  dures using quaternions generated the object shown in  and a topologi section cal structure is displayed in  scientists are also developing methods for _ visualization visualizing general classes of data shows a general technique for graphing and modeling data distributed over a spherical surface  a few of the many other visualization applications are shown in figs 56 through 69 these figures show airflow over the surface of a space shuttle nu merical modeling of thunderstorms study of crack propagation in metals a color coded plot of fluid density over an airfoil a cross sectional slicer for data sets protein modeling stereoscopic viewing of molecular structure a model of the ocean floor a kuwaiti oil fire simulation an air pollution study a corn grow ing study reconstruction of arizona s chaco canyon ruins and a graph of auto mobile accident statistics   a four dimensional object projected into three dimensional space then projected to a video monitor and color coded the object was generated using quaternions and fractal squaring procedures with an octant subtracted to show the complex julia set  courtesy of john c hart school of electrical engineering and computer science washington state university   four views from a real time interactive computer animation study of minimal surfaces  snails  in the sphere projected to three dimensional euclidean space  courtesy of george francis department of mathematics and the national center for supercomputing applications university of minois at urbana champaign copyright    a method for graphing and modeling data distributed over a spherical surface  courtesy of greg nielson computer sctence department arizona state university    a visualization of stream surfaces flowing past a space shuttle by jeff hultquist and eric raible nasa ames  courtesy of sam uselton nasa ames research center   numerical model of the surface of a thunderstorm  courtesy of bob wilkelmson department of atmospheric sciences and the national center for supercomputing applications university of mlinois at urbana champaign    numerical model of airflow inside a thunderstorm  courtesy of bob wilhelmson department of atmospheric sciences and the national center for supercomputing applications university of minois at urbana champaign   color coded visualization of stress energy density in a crack propagation study for metal plates modeled by bob haber  courtesy of the national center for supercomputing applications university of ilinois at urbana champaign   commercial slicer dicer software showing color coded data values over cross sectional slices of a data set  courtesy of spyglass inc  section visualization  a fluid dynamic simulation showing a color coded plot of fluid density over a span of grid planes around an aircraft wing developed by lee hian quek john eickemeyer and jeffery tan  courtesy of the information technology institute republic of singapore   visualization of a protein structure by jay siegel and kim baldridge sdsc  courtesy of stephanie sides san diego supercomputer center    stereoscopic viewing of a molecular structure using a boom device  courtesy of the national center for supercomputing applications university of illinois at urbana champaign   one image from a stereogcopic pair showing a visualization of the ocean floor obtained from satellite data by david sandwell and chris small scripps institution of ocean ography and jim mcleod sdsc  courtesy of stephanie sides san diego supercomputer center   a simulation of the effects of the kuwaiti oil fire by gary glatzmeier chuck hanson and paul hinker  courtesy of mike krogh advanced computing laboratory at los alamos national laboratory  section visualization  a visualization of pollution over the earth s surface by tom palmer cray research inc  ncsc chris landreth ncsc and dave bock ncsc pollutant so is plotted as a blue surface acid rain deposition is a color plane on the map surface and rain concentration is shown as clear cylinders  courtesy of the north carolina supercomputing center mcnc  a visualization of the reconstruction of the ruins at chaco canyon arizona  courtesy of melvin l prueitt los alamos national laboratory data supplied by stephen h lekson   one frame of an animation sequence showing the development of a corn ear  courtesy of the national center for supercomputing applications university of mlinois at urbana champaign  ls eg ont regen we can tec the pti tel pee os rere ie eae ahr analysis  a prototype technique called win viz for visualizing tabular multidimensional data is used here to correlate statistical information on pedestrians involved in automobile accidents developed by a visualization team at itt  courtesy of lee hian quek information technology institute republic of singapore    although methods used in computer graphics and image processing overlap the two areas are concerned with fundamentally different operations in computer graphics a computer is used to create a picture image processing on the other hand applies techniques to modify or interpret existing pictures such as pho tographs and tv scans  wo principal applications of image processing are  improving picture quality and  machine perception of visual information as used in robotics  to apply image processing methods we first digitize a photograph or other picture into an image file then digital methods can be applied to rearrange pic ture parts to enhance color separations or to improve the quality of shading an example of the application of image processing methods to enhance the quality of a picture is shown in  these techniques are used extensively in com mercial art applications that involve the retouching and rearranging of sections of photographs and other artwork similar methods are used to analyze satellite photos of the earth and photos of galaxies  medical applications also make extensive use of image processing tech niques for picture enhancements in tomography and in simulations of opera tions tomography is a technique of x ray photography that allows cross sec tional views of physiological systems to be displayed both computed x ray tomography ct and position emission tomography pet use projection methods to reconstruct cross sections from digital data these techniques are also used to  a blurred photograph of a license plate becomes legible after the application of image processing techniques  courtesy of los alamos national laboratory  monitor internal functions and show cross sections during surgery other med ical imaging techniques include ultrasonics and nuclear medicine scanners with ultrasonics high frequency sound waves instead of x rays are used to generate digital data nuclear medicine scanners collect digital data from radiation emit ted from ingested radionuclides and plot color coded images  image processing and computer graphics are typically combined in many applications medicine for example uses these techniques to model and study physical functions to design artificial limbs and to plan and practice surgery the last application is generally referred to as computer aided surgery two dimensional cross sections of the body are obtained using imaging tech niques then the slices are viewed and manipulated using graphics methods to simulate actual surgical procedures and to try out different surgical cuts exam ples of these medical applications are shown in figs 71 and 72   one frame from a computer animation visualizing cardiac activation levels within regions of a semitramsparent volume rendered dog heart medical data provided by william smith ed simpson and g allan johnson duke university image rendering software by tom palmer cray research inc  ncsc  courtesy of dave bock north carolina supercomputing center mcnc  one image from a stereoscopic pair showing the bones of a human hand the images were rendered by inmo yoon d e thompson and w n waggenspack jr lsu from a data set obtained with ct scans by rehabilitation research gwlnhdc these images show a possible tendon path for reconstructive surgery  courtesy of imrlab mechanical engineering louisiana state university  section image processing   chapter a survey of computer graphics   graphical user interfaces  it is common now for software packages to provide a graphical interface a major component of a graphical interface is a window manager that allows a user to display multiple window areas each window can contain a different process that can contain graphical or nongraphical displays to make a particular win dow active we simply click in that window using an interactive pointing device  interfaces also display menus and icons for fast selection of processing op tions or parameter values an icon is a graphical symbol that is designed to look like the processing option it represents the advantages of icons are that they take up less screen space than corresponding textual descriptions and they can be understood more quickly if well designed menus contain lists of textual descrip tions and icons  illustrates a typical graphical interface containing a window manager menu displays and icons in this example the menus allow selection of processing options color values and graphics parameters the icons represent options for painting drawing zooming typing text strings and other operations connected with picture construction   a graphical user interface showing multiple window areas menus and icons  courtesy of image in corporation  chapter  overview of graphics systems      d ue to the widespread recognition of the power and utility of computer graphics in virtually all fields a broad range of graphics hardware and software systems is now available graphics capabilities for both two dimen sional and three dimensional applications are now common on general purpose computers including many hand held calculators with personal computers we can use a wide variety of interactive input devices and graphics software pack ages for higher quality applications we can choose from a number of sophisti cated special purpose graphics hardware systems and technologies in this chap ter we explore the basic features of graphics hardware components and graphics software packages  typically the primary output device in a graphics system is a video monitor fig  the operation of most video monitors is based on the standard cathode ray tube crt design but several other technologies exist and solid state monitors may eventually predominate   a computer graphics workstation  courtesy of tektronix inc  refresh cathode ray tubes illustrates the basic operation of a crt a beam of electrons cathode rays  emitted by an electron gun passes through focusing and deflection systems that direct the beam toward specified positions on the phosphor coated screen the phosphor then emits a small spot of light at each position contacted by the electron beam because the light emitted by the phosphor fades very rapidly some method is needed for maintaining the screen picture one way to keep the phosphor glowing is to redraw the picture repeatedly by quickly directing the electron beam back over the same points this type of display is called a refresh crt  the primary components of an electron gun in a crt are the heated metal cathode and a control grid   heat is supplied to the cathode by directing a current through a coil of wire called the filament inside the cylindrical cathode structure this causes electrons to be boiled off the hot cathode surface in the vacuum inside the crt envelope the free negatively charged electrons are then accelerated toward the phosphor coating by a high positive voltage the acceler      magnetic deflection coils phosphor focusing coated system screen electron connector electron beam pins gun  basic design of a magnetic deflection crt     electron focusing beam cathode anode path heating filament control accelerating grid anode  operation of an electron gun with an accelerating anode  section video display devices chapter overview of graphics systems  ating voltage can be generated with a positively charged metal coating on the in side of the crt envelope near the phosphor screen or an accelerating anode can be used as in  sometimes the electron gun is built to contain the acceler ating anode and focusing system within the same unit  intensity of the electron beam is controlled by setting voltage levels on the control grid which is a metal cylinder that fits over the cathode a high negative voltage applied to the control grid will shut off the beam by repelling electrons and stopping them from passing through the small hole at the end of the control grid structure a smailer negative voltage on the control grid simply decreases the number of electrons passing through since the amount of light emitted by the phosphor coating depends on the number of electrons striking the screen we control the brightness of a display by varying the voltage on the control grid we specify the intensity level for individual screen positions with graphics software commands as discussed in chapter  the focusing system in a crt is needed to force the electron beam to con verge into a small spot as it strikes the phosphor otherwise the electrons would repel each other and the beam would spread out as it approaches the screen fo cusing is accomplished with either electric or magnetic fields electrostatic focus ing is commonly used in television and computer graphics monitors with elec trostatic focusing the electron beam passes through a positively charged metal cylinder that forms an electrostatic lens as shown in  the action of the electrostatic lens focuses the electron beam at the center of the screen in exactly the same way that an optical lens focuses a beam of light at a particular focal dis tance similar lens focusing effects can be accomplished with a magnetic field set up by a coil mounted around the outside of the crt envelope magnetic lens fo cusing produces the smallest spot size on the screen and is used in special purpose devices  additional focusing hardware is used in high precision systems to keep the beam in focus at all screen positions the distance that the electron beam must travel to different points on the screen varies because the radius of curvature for most crts is greater than the distance from the focusing system to the screen center therefore the electron beam will be focused properly only at the center of the screen as the beam moves to the outer edges of ihe screen displayed images become blurred to compensate for this the system can adjust the focusing ac cording to the screen position of the beam  as with focusing deflection of the electron beam can be controlled either with electric fields or with magnetic fields cathode ray tubes are now commenly constructed with magnetic deflection coils mounted on the outside of the crt envelope as illustrated in  two pairs of coils are used with the coils in each pair mounted on opposite sides of the neck of the crt envelope one pair is mounted on the top and bottom of the neck and the other pair is mounted on opposite sides of the neck the magnetic field produced by each pair of coils re sults in a transverse deflection force that is perpendicular both to the direction of the magnetic field and to the direction of travel of the electron beam horizontal deflection is accomplished with one pair of coils and vertical deflection by the other pair the proper deflection amounts are attained by adjusting the current through the coils when electrostatic deflection is used two pairs of parallel plates are mounted inside the crt envelope one pair of plates is mounted hori zontally to control the vertical deflection and the other pair is mounted vertically to control horizontal deflection    spots of light are produced on the screen by the transfer of the crt beam energy to the phosphor when the electrons in the beam collide with the phos      vertical phospher focusing deflection  costed system plates screen electron connector electron horizontal beam pins gun deflection plates  electrostatic deflection of the electron beam in a crt  phor coating they are stopped and their kinetic energy is absorbed by the phos phor part of the beam energy is converted by friction into heat energy and the remainder causes electrons in the phosphor atoms to move up to higher quan tum energy levels after a short time the excited phosphor electrons begin dropping back to their stable ground state giving up their extra energy as small quantums of light energy what we see on the screen is the combined effect of all the electron light emissions a glowing spot that quickly fades after all the excited phosphor electrons have returned to their ground energy level the frequency or color of the light emitted by the phosphor is proportional to the energy differ ence between the excited quantum state and the ground state  different kinds of phosphors are available for use in a crt besides color a major difference between phosphors is their persistence how long they continue to emit light that is have excited electrons returning to the ground state after the crt beam is removed persistence is defined as the time it takes the emitted light from the screen to decay to one tenth of its original intensity lower persistence phosphors require higher refresh rates to maintain a picture on the screen without flicker a phosphor with low persistence is useful for animation a high persistence phosphor is useful for displaying highly complex static pic tures although some phosphors have a persistence greater than second graph ics monitors are usually constructed with a persistence in the range from to microseconds shows the intensity distribution of a spot on the screen the in tensity is greatest at the center of the spot and decreases with a gaussian distrib ution out to the edges of the spot this distribution corresponds to the cross sectional electron density distribution of the crt beam   the maximum number of points that can be displayed without overlap on a crt is referred to as the resolution a more precise definition of resolution is the number of points per centimeter that can be plotted horizontally and vertically although it is often simply stated as the total number of points in each direction spot intensity has a gaussian distribution   so two adjacent spots will appear distinct as long as their separation is greater than the diameter at which each spot has an intensity of about percent of that at the center of the spot this overlap position is illustrated in  spot size also depends on intensity as more electrons are accelerated toward the phospher per second the crt beam diameter and the illuminated spot increase in addition the increased exci tation energy tends to spread to neighboring phosphor atoms not directly in the  intensity distribution of an illuminated phosphor spot a crt screen  on chapter overview of graphics systems  two illuminated phosphor spots are distinguishable when their separation is greater than the diameter at which a spot intensity has fallen to percent of maximum  path of the beam which further increases the spot diameter thus resolution of a crt is dependent on the type of phosphor the intensity to be displayed and the focusing and deflection systems typical resolution on high quality systems is by with higher resolutions available on many systems high resolution systems are often referred to as high definition systems the physical size of a graphics monitor is given as the length of the screen diagonal with sizes varying from about inches to inches or more a crt monitor can be at tached to a variety of computer systems so the number of screen points that can actually be plotted depends on the capabilities of the system to which it is at tached  another property of video monitors is aspect ratio this number gives the ratio of vertical points to horizontal points necessary to produce equal length lines in both directions on the screen  sometimes aspect ratio is stated in terms of the ratio of horizontal to vertical points  an aspect ratio of means that a ver tical line plotted with three points has the same length as a horizontal line plot ted with four points  raster scan displays the most common type of graphics monitor employing a crt is the raster scan display based on television technology in a raster scan system the electron beam is swept across the screen one row at a time from top to bottom as the electron beam moves across each row the beam intensity is turned on and off to create a pattern of illuminated spots picture definition is stored in a memory area called the refresh buffer or frame buffer this memory area holds the set of intensity values for all the screen points stored intensity values are then re trieved from the refresh buffer and painted on the screen one row scan line at a time   each screen point is referred to as a pixel or pel shortened forms of picture element  the capability of a raster scan system to store inten sity information for each screen point makes it well suited for the realistic displav of scenes containing subtle shading and color patterns home television sets and printers are examples of other systems using raster scan methcds  intensity range for pixel positions depends on the capability of the raster system in a simple black and white system each screen point is either on or oft so only one bit per pixel is needed to control the intensity of screen positions for a bilevel system a bit value of indicates that the electron beam is to be turned on at that position and a value of indicates that the beam intensity is to be off additional bits are needed when color and intensity variations can be displayed up to bits per pixel are included in high quality systems which can require several megabytes of storage for the frame buffer depending on the resolution of the system a system with bits per pixel and a screen resolution of bv requires megabytes of storage for the frame buffer on a black and white system with one bit per pixel the frame buffer is commonly called a bitmap for systems with multiple bits per pixel the frame buffer is often referred to as a pixmap  refreshing on raster scan displays is carried out at the rate of to frames per second although some systems are designed for higher refresh rates sometimes refresh rates are described in units of cycles per second or hertz hz  where a cycle corresponds to one frame using these units we would de scribe a refresh rate of frames per second as simply hz at the end of each scan line the electron beam returns to the left side of the screen to begin displav ing the next scan line the return to the left of the screen after refreshing each  a raster scan system displays an object as a set of discrete points across each scan line  scan line is called the horizontal retrace of the electron beam and at the end of each frame displayed in 80th to 60th of a second  the electron beam returns vertical retrace to the top left corner of the screen to begin the next frame  on some raster scan systems and in tv sets  each frame is displayed in two passes using an interlaced refresh procedure in the first pass the beam sweeps across every other scan line from top to bottom then after the vertical re trace the beam sweeps out the remaining scan lines   interlacing of the scan lines in this way allows us to see the entire screen displayed in one half the time it would have taken to sweep across all the lines at once from top to bottom interlacing is primarily used with slower refreshing rates on an older frame per second noninterlaced display for instance some flicker is noticeable but with interlacing each of the two passes can be accomplished in 60th of a sec ond which brings the refresh rate nearer to frames per second this is an effec tive technique for avoiding flicker providing that adjacent scan lines contain sim ilar display information  random scan displays when operated as a random scan display unit a crt has the electron beam di rected only to the parts of the screen where a picture is to be drawn random scan monitors draw a picture one line at a time and for this reason are also re ferred to as vector displays or stroke writing or calligraphic displays  the component lines of a picture can be drawn and refreshed by a random scan sys  chapter overview of graphics systems   interlacing scan lines on a raster scan display first all points on the even numbered solid scan lines are displayed then all points along the odd numbered dashed lines are displayed  tem in any specified order   a pen plotter operates in a similar way and is an example of a random scan hard copy device  refresh rate on a random scan system depends on the number of lines to be displayed picture definition is now stored as a set of line drawing commands in an area of memory referred to as the refresh display file sometimes the refresh display file is called the display list display program or simply the refresh buffer to display a specified picture the system cycles through the set of com mands in the display file drawing each component line in turn after all line drawing commands have been processed the system cycles back to the first line command in the list random scan displays are designed to draw all the compo nent lines of a picture to times each second high quality vector systems are capable of handling approximately 000 short lines at this refresh rate when a small set of lines is to be displayed each refresh cycle is delayed to avoid refresh rates greater than frames per second otherwise faster refreshing of the set of lines could burn out the phosphor  random scan systems are designed for line drawing applications and can not display realistic shaded scenes since picture definition is stored as a set of line drawing instructions and not as a set of intensity values for all screen points vector displays generally have higher resolution than raster systems also vector displays produce smooth line drawings because the crt beam directly follows the line path a raster system in contrast produces jagged lines that are plotted as discrete point sets  color crt monitors a crt monitor displays color pictures by using a combination of phosphors that emit different colored light by combining the emitted light from the different phosphors a range of colors can be generated the two basic techniques for pro ducing color displays with a crt are the beam penetration method and the shadow mask method  the beam penetration method for displaying color pictures has been used with random scan monitors two layers of phosphor usually red and green are   a random scan system draws the component lines of an object in any order specified  coated onto the inside of the crt screen and the displayed color depends on how far the electron beam penetrates into the phosphor layers a beam of slow electrons excites only the outer red layer a beam of very fast electrons penetrates through the red layer and excites the inner green layer at intermediate beam speeds combinations of red and green light are emitted to show two additional colors orange and yellow the speed of the electrons and hence the screen color at any point is controlled by the beam acceleration voltage beam penetration has been an inexpensive way to produce color in random scan monitors but only four colors are possible and the quality of pictures is not as good as with other methods  shadow mask methods are commonly used in raster scan systems includ ing color tv because they produce a much wider range of colors than the beam penetration method a shadow mask crt has three phosphor color dots at each pixel position one phosphor dot emits a red light another emits a green light and the third emits a blue light this type of crt has three electron guns one for each color dot and a shadow mask grid just behind the phosphor coated screen illustrates the delia delta shadow mask method commonly used in color crt systems the three electron beams are deflected and focused as a group onto the shadow mask which contains a series of holes aligned with the phosphor dot patterns when the three beams pass through a hole in the shadow mask they activate a dot triangle which appears as a small color spot on the screen the phosphor dots in the triangles are arranged so that each electron beam can activate only its corresponding color dot when it passes through the  electron guns cc o _  x selectian  g of shadow mask magnified phosphor dot blue triangle _ a  screen operation of a delta delta shadow mask crt three electron guns aligned with the triangular color dot patterns on the screen are directed to each dot triangle by a shadow mask  shadow mask another configuration for the three electron guns is an in line arrangement in which the three electron guns and the corresponding red green blue color dots on the screen are aligned along one scan line instead of in a triangular pattern this in line arrangement of electron guns is easier to keep in alignment and is commonly used in high resolution color crts  we obtain color variations in a shadow mask crt by varying the intensity levels of the three electron beams by turning off the red and green guns we get only the color coming from the blue phosphor other combinations of beam in tensities produce a small light spot for each pixel position since our eyes tend to merge the three colors into one composite the color we see depends on the amount of excitation of the red green and blue phosphors a white or gray area is the result of activating all three dots with equal intensity yellow is pro duced with the green and red dots only magenta is produced with the blue and red dots and cyan shows up when blue and green are activated equally in some low cost systems the electron beam can only be set to on or off limiting displavs to eight colors more sophisticated systems can set intermediate intensity levels for the electron beams allowing several million different colors to be generated  color graphics systems can be designed to be used with several types of crt display devices some inexpensive home computer systems and video games are designed for use with a color tv set and an rf radio frequency mod ulator the purpose of the rf m dulator is to simulate the signal from a broad cast tv station this means that the color and intensity information of the picture must be combined and superimposed on the broadcast frequency carrier signal that the tv needs to have as input then the circuitry in the tv takes this signal from the rf modulator extracts the picture information and paints it on the screen as we might expect this extra handling of the picture information by the rf modulator and tv circuitry decreases the quality of displayed images  composite monitors are adaptations of tv sets that allow bypass of the broadcast circuitry these display devices still require that the picture informa tion be combined but no carrier signal is needed picture information is com bined into a composite signal and then separated by the monitor so the resulting picture quality is still not the best attainable  color crts in graphics systems are designed as rgb monitors these mon itors use shadow mask methods and take the intensity level for each electron gun red green and blue directly from the computer system without any intermedi ate processing high quality raster graphics systems have bits per pixel in the frame buffer allowing voltage settings for each electron gun and nearly million color choices for each pixel an rgb color system with bits of storage per pixel is generally referred to as a full color system or a true color system  direct view storage tubes an alternative method for maintaining a screen image is to store the picture in formation inside the crt instead of refreshing the screen a direct view storage tube dvst stores the picture information as a charge distribution just behind the phosphor coated screen two electron guns are used in a dvst one the pri mary gun is used to store the picture pattern the second the flood gun main tains the picture display  a dvst monitor has both disadvantages and advantages compared to the refresh crt because no refreshing is needed very complex pictures can be dis played at very high resolutions without flicker disadvantages of dvst systems are that they ordinarily do not display color and that selected parts of a picture cannot be erased to eliminate a picture section the entire screen must be erased and the modified picture redrawn the erasing and redrawing process can take several seconds for a complex picture for these reasons storage displays have been largely replaced by raster systems  flat panel displays although most graphics monitors are still constructed with crts other technolo gies are emerging that may soon replace crt monitors the term flat panel dis play refers to a class of video devices that have reduced volume weight and power requirements compared to a crt a significant feature of flat panel dis plays is that they are thinner than crts and we can hang them on walls or wear them on our wrists since we can even write on some flat panel displays they will soon be available as pocket notepads current uses for flat panel displays in clude small tv monitors calculators pocket video games laptop computers armrest viewing of movies on airlines as advertisement boards in elevators and as graphics displays in applications requiring rugged portable monitors  we can separate flat panel displays into two categories emissive displays and nonemissive displays the emissive displays or emitters are devices that convert electrical energy into light plasma panels thin film electroluminescent displays and light emitting diodes are examples of emissive displays flat crts have also been devised in which electron beams are accelerated parallel to the screen then deflected to the screen but flat crts have not proved to be as successful as other emissive devices nonemmissive displays or nonemitters use optical effects to convert sunlight or light from some other source into graph ics patterns the most important example of a nonemissive flat panel display is a liquid crystal device  plasma panels also called gas discharge displays are constructed by fill ing the region between two glass plates with a mixture of gases that usually in  section video display devices  glass plate cludes neon a series of vertical conducting ribbons is placed on one glass panel and a sect of horizontal ribbons is built into the other glass panel   firing voltages applied to a pair of horizontal and vertical conductors cause the gas at the intersection of the two conductors to break down into a glowing plasma of electrons and ions picture definition is stored in a refresh buffer and the firing voltages are applied to refresh the pixel positions at the intersections of the con ductors times per second alternating current methods are used to provide faster application of the firing voltages and thus brighter displays separation between pixels is provided by the electric field of the conductors shows a high definition plasma panel one disadvantage of plasma panels has been that they were strictly monochromatic devices but systems have been de veloped that are now capable of displaying color and grayscale  thin film electroluminescent displays are similar in construction to a plasma panel the difference is that the region between the glass plates is filled with a phosphor such as zinc sulfide doped with manganese instead of a gas   when a sufficiently high voltage is applied to a pair of crossing elec trodes the phosphor becomes a conductor in the area of the intersection of the two electrodes electrical energy is then absorbed by the manganese atoms which then release the energy as a spot of light similar to the glowing plasma ef fect in a plasma panel electroluminescent displays require more power than plasma panels and good color and gray scale displays are hard to achieve  a third type of emissive device is the light emitting diode led  a matrix of diodes is arranged to form the pixel positions in the display and picture defin ition is stored in a refresh buffer as in scan line refreshing of a crt information  basic design of a plasma panel a plasma panel display with a display device resolution of by and a screen diagonal of meters  courtesy of photonics systems  conductors  glass plate glass plate phosphor  basic design of a thin film electroluminescent display device  is read from the refresh buffer and converted to voltage levels that are applied to the diodes to produce the light patterns in the display  liquid crystal displays lcds are commonly used in small systems such as calculators   and portable laptop computers   these non emissive devices produce a picture by passing polarized light from the surround ings or from an internal light source through a liquid crystal material that can be aligned to either block or transmit the light  the term liquid crystal refers to the fact that these compounds have a crys talline arrangement of molecules yet they flow like a liquid flat panel displays commonly use nematic threadlike liquid crystal compounds that tend to keep the long axes of the rod shaped molecules aligned a flat panel display can then be constructed with a nematic liquid crystal as demonstrated in  two glass plates each containing a light polarizer at right angles to the other plate sandwich the liquid crystal material rows of horizontal transparent conductors are built into one glass plate and columns of vertical conductors are put into the other plate the intersection uf two conductors defines a pixel position nor mally the molecules are aligned as shown in the on state of  polarized light passing through the material is twisted so that it will pass through the op posite polarizer the light is then reflected back to the viewer to tum off the pixel we apply a voltage to the two intersecting conductors to align the mole cules so that the light is not twisted this type of flat panel device is referred to as a passive matrix lcd picture definitions are stored in a refresh buffer and the screen is refreshed at the rate of frames per second as in the emissive devices back lighting is also commonly applied using solid state electronic devices so that the system is not completely dependent on outside light sources colors can be displayed by using different materials or dyes and by placing a triad of color pixels at each screen location another method for constructing lcds is to place a transistor at each pixel location using thin film transistor technology the tran sistors are used to control the voltage at pixel locations and to prevent charge from gradually leaking out of the liquid crystal cells these devices are called active matrix displays  section video display devices  a hand calculator with an lcd screen  courtesy of texas instruments    a backlit passive matrix liquid crystal display in a laptop computer featuring colors a screen resolution of by and a screen diagonal of inches  courtesy of apple computer inc   polarizer   off state aon the light twisting shutter effect used in the design of most liquid crystal display devices  three dimensianal viewing devices section       video display devices graphics monitors for the display of three dimensional scenes have been devised using a technique that reflects a crt image from a vibrating flexible mirror the operation of such a system is demonstrated in  as the varifocal mirror vibrates it changes focal length these vibrations are synchronized with the dis play of an object on a crt so that each point on the object is reflected from the mirror into a spatial position corresponding to the distance of that point from a specified viewing position this allows us to walk around an object or scene and view it from different sides  shows the genisco spacegraph system which uses a vibrating mirror to project three dimensional objects into a cm by cm by cm vol ume this system is also capable of displaying two dimensional cross sectional slices of objects selected at different depths such systems have been used in medical applications to analyze data from ultrasonography and cat scan de vices in geological applications to analyze topological and seismic data in de sign applications involving solid objects and in three dimensional simulations of systems such as molecules and terrain  projected e image timing and  control y     system    z  vibrating flexible mirror  f  a a  f f    f f     be viewer  peration of a three dimensional display system using a vibrating mirror that changes focal length to match the depth of points in a scene   the spacegraph interactive graphics system displays objects in three dimensions using a vibrating flexible mirror  courtesy of genisco computers corporation  chapter2 stereoscopic and virtual reality systems overvi f ics  erview of graphics systems another technique for representing three dimensional objects is displaying stereoscopic views this method does not produce true three dimensional im ages but it does provide a three dimensional effect by presenting a different view to each eye of an observer so that scenes do appear to have depth    to obtain a stereoscopic projection we first need to obtain two views of a scene generated from a viewing direction corresponding to each eye left and tight  we can constrict the two views as computer generated scenes with differ ent viewing positions or we can use a stereo camera pair to photograph some object or scene when we simultaneous look at the left view with the left eye and the right view with the right eye the two views merge into a single image and we perceive a scene with depth shows two views of a computer generated scene for stereographic projection to increase viewing comfort the areas at the left and right edges of this scene that are visible to only one eye have been eliminated  viewing a stereoscopic projection  courtesy of stereog raphics corporation  eve a co  right  a stereoscopic viewing pair  courtesy of jerry farm  one way to produce a stereoscopic effect is to display each of the two views with a raster system on alternate refresh cycles the screen is viewed through glasses with each lens designed to act as a rapidly alternating shutter that is syn chronized to block out one of the views shows a pair of stereoscopic glasses constructed with liquid crystal shutters and an infrared emitter that syn chronizes the glasses with the views on the screen  stereoscopic viewing is also a component in virtual reality systems where users can step into a scene and interact with the environment a headset   containing an optical system to generate the stereoscopic views is commonly used in conjuction with interactive input devices to locate and manip ulate objects in the scene a sensing system in the headset keeps track of the viewer s position so that the front and back of objects can be seen as the viewer  glasses for viewing a stereoscopic scene and an infrared synchronizing emitter  courtesy of stereographics corporation   a headset used in virtual reality systems  courtesy of virtual research  section video display devices    interacting with a virtual reality environment  courtesy of the national center for supercomputing applications university of mlinois at urbana champaign   walks through and interacts with the display illustrates interaction with a virtua scene using a headset and a data glove worn on the right hand section  an interactive virtual reality environment can also be viewed with stereo scopic glasses and a video monitor instead of a headset this provides a means for obtaining a lower cost virtual reality system as an example  shows an ultrasound tracking device with six degrees of freedom the tracking device is placed on top of the video display and is used to monitor head movements so that the viewing position for a scene can be changed as head position changes   an ultrasound tracking device used with stereoscopic glasses to track head position  courtesy of stereographics corporation   interactive raster graphics systems typically employ several processing units in addition to the central processing unit or cpu a special purpose processor called the video controller or display controller is used to control the operation of the display device organization of a simple raster system is shown in  here the frame buffer can be anywhere in the system memory and the video controller accesses the frame buffer to refresh the screen in addition to the video controller more sophisticated raster systems employ other processors as co processors and accelerators to implement various graphics operations  video controller shows a commonly used organization for raster systems a fixed area of the system memory is reserved for the frame buffer and the video controller is given direct access to the frame buffer memory  frame buffer locations and the corresponding screen positions are refer enced in cartesian coordinates for many graphics monitors the coordinate ori  vo devices  architecture of a simple raster graphics system   architecture of a raster system with a fixed portion of the system memory reserved for the frame buffer  section raster scan systems   the origin of the coordinate system for identifying screen positions is usually specified in the lower left corner  gin is defined at the lower left screen corner   the screen surface is then represented as the first quadrant of a two dimensional system with positive x values increasing to the right and positive y values increasing from bottom to top  on some personal computers the coordinate origin is referenced at the upper left corner of the screen so the y values are inverted  scan lines are then labeled from ym at the top of the screen to at the bottom along each scan line screen pixel positions are labeled from to x ux  in  the basic refresh operations of the video controller are dia grammed two registers are used to store the coordinates of the screen pixels ini tially the x register is set to and the y register is set to yq the value stored in the frame buffer for this pixel position is then retrieved and used to set the inten sity of the crt beam then the x register is incremented by and the process re peated for the next pixel on the top scan line this procedure is repeated for each pixel along the scan line after the last pixel on the top scam line has been processed the x register is reset to and the y register is decremented by pixels along this scan line are then processed in turn and the procedure is repeated for each successive scan line after cycling through all pixels along the bottom scan line y   the video controller resets the registers to the first pixel position on the top scan line and the refresh process starts over  since the screen must be refreshed at the rate of frames per second the simple procedure illustrated in  cannot be accommodated by typical ram chips the cycle time is too slow to speed up pixel processing video con trollers can retrieve multiple pixel values from the refresh buffer on each pass the multiple pixel intensities are then stored in a separate register and used to control the crt beam intensity for a group of adjacent pixels when that group of pixels has been processed the next block of pixel values is retrieved from the frarne buffer  a number of other operations can be performed by the video controller be sides the basic refreshing operations for various applications the video con   honzontal ana de variical deflection voltages  basic video controller refresh operations   processor memory  i system bus   devices architecture of a raster graphics system with a display processor  troller can retrieve pixel intensities from different memory areas on different re fresh cycles in high quality systems for example two frame buffers are often provided so that one buffer can be used for refreshing while the other is being filled with intensity values then the two buffers can switch roles this provides a fast mechanism for generating real time animations since different views of moving objects can be successively loaded into the refresh buffers also some transformations can be accomplished by the video controller areas of the screen can be enlarged reduced or moved from one location to another during the re fresh cycles in addition the video controller often contains a lookup table so that pixel values in the frame buffer are used to access the lookup table instead of controlling the crt beam intensity directly this provides a fast method for changing screen intensity values and we discuss lookup tables in more detail ir chapter finally some systems are designed to allow the video controller to mix the frame buffer image with an input image from a television camera or other input device  raster scan display processor shows one way to set up the organization of a raster system contain ing a separate display processor sometimes referred to as a graphics controller or a display coprocessor the purpose of the display processor is to free the cpu from the graphics chores in addition to the system memory a separate display processor memory area can also be provided  a major task of the display processor is digitizing a picture definition given in an application program into a set of pixel intensity values for storage in the frame buffer this digitization process is called scan conversion graphics com mands specifying straight lines and other geometric objects are scan converted into a set of discrete intensity points scan converting a straight line segment for example means that we have to locate the pixel positions closest to the line path and store the intensity for each position in the frame buffer similar methods are used for scan converting curved lines and polygon outlines characters can be defined with rectangular grids as in  or they can be defined with curved  a character defined as a rectangular grid of pixel positions  c  a character defined as a curve outline  outlines as in  the array size for character grids can vary from about by to by or more for higher quality displays a character grid is displayed by superimposing the rectangular grid pattern into the frame buffer at a specified coordinate position with characters that are defined as curve outlines character shapes are scan converted into the frame buffer  display processors are also designed to perform a number of additional op erations these functions include generating various line styles dashed dotted or solid  displaying color areas and performing certain transformations and ma nipulations on displayed objects also display processors are typically designed to interface with interactive input devices such as a mouse  in an effort to reduce memory requirements in raster systems methods have been devised for organizing the frame buffer as a linked list and encoding the intensity information one way to do this is to store each scan line as a set of integer pairs one number of each pair indicates an intensity value and the sec ond number specifies the number of adjacent pixels on the scan line that are to have that intensity this technique called min length encoding can result in a considerable saving in storage space if a picture is to be constructed mostly with long runs of a single color each a similar approach can be taken when pixel in tensities change linearly another approach is to encode the raster as a set of rec tangular areas cell encoding  the disadvantages of encoding runs are that in tensity changes are difficult to make and storage requirements actually increase as the length of the runs decreases in addition it is difficult for the display con troller to process the raster when many short runs are involved  the organization of a simple random scan vector systern is shown in  an application program is input and stored in the system memory along with a graphics package graphics commands in the application program are translated by the graphics package into a display file stored in the system memory this dis play file is then accessed by the display processor to refresh the screen the dis play processor cycles through each command in the display file program once during every refresh cycle sometimes the display processor in a random scan system is referred to as a display processing unit or a graphics controller  vo devices  architecture of a simple random scan system graphics patterns are drawn on a random scan system by directing the electron beam along the component lines of the picture lines are defined by the values for their coordinate endpoints and these input coordinate values are con verted to x and y deflection voltages a scene is then drawn one line at a time by positioning the beam to fill in the line between specified endpoints  most graphics monitors today operate as raster scan displays and here we sur vey a few of the many graphics hardware configurations available graphics sys tems range from small general purpose computer systems with graphics capabil ities   to sophisticated full color systems that are designed specifically for graphics applications   a typical screen resolution for personal com   a desktop general purpose computer system that can be used for graphics applications  courtesy of apple computer inc   section graphics monilors and workstations  computer graphics workstations with keyboard and mouse input devices  a the iris indigo  courtesy of siticon graphics corporation  b sparcstation  courtesy of sun microsystems   puter systems such as the apple quadra shown in  is by al though screen resolution and other system capabilities vary depending on the size and cost of the system diagonal screen dimensions for general purpose per sonal computer systems can range from to inches and allowable color se lections range from to over 000 for workstations specifically designed for graphics applications such as the systems shown in  typical screen reso lution is by with a screen diagonal of inches or more graphics workstations can be configured with from to bits per pixel full color sys tems  with higher screen resolutions faster processors and other options avail able in high end systems  shows a high definition graphics monitor used in applications such as air traffic control simulation medical imaging and cad this system has a diagonal screen size of inches resolutions ranging from by to by with refresh rates of hz or hz noninterlaced  a multiscreen system called the mediawall shown in  provides a large wall sized display area this system is designed for applications that re quire large area displays in brightly lighted environments such as at trade shows conventions retail stores museums or passenger terminals mediawall operates by splitting images into a number of sections and distributing the sec tions over an array of monitors or projectors using a graphics adapter and satel lite control units an array of up to by monitors each with a resolution of by can be used in the mediawall to provide an overall resolution of by for either static scenes or animations scenes can be displayed behind mul lions as in  or the mullions can be eliminated to display a continuous picture with no breaks between the various sections  many graphics workstations such as some of those shown in  are configured with two monitors one monitor can be used to show all features of an object or scene while the second monitor displays the detail in some part of the picture another use for dual monitor systems is to view a picture on one monitor and display graphics options menus for manipulating the picture com ponents on the other monitor   a very high resolution by color monitor  courtesy of barco chromatics    the mediawall a multiscreen display system the image displayed on this by array of monitors was created by deneba software  courtesy of rgb spectrum     single and dual monitor graphics workstations  courtesy of intergraph corporation  figures 38 and 39 illustrate examples of interactive graphics worksta tions containing multiple input and other devices a typical setup for cad appli cations is shown in  various keyboards button boxes tablets and mice are attached to the video monitors for use in the design process  shows features of some types of artist s workstations  multiple workstations for a cad group  courtesy of hewlett packard company  s  an artisl s workstation featuring a color raster monitor keyboard graphics tablet with hand cursor and a light table in addition to data storage and telecommunications devices  courtesy of dicomed corporation   various devices are available for data input on graphics workstations most sys  tems have a keyboard and one or more additional devices specially designed for interactive input these include a mouse trackball spaceball joystick digitizers dials and button boxes some other input devices usea in particular applications are data gloves touch panels image scanners and voice systems  keyboards an alphanumeric keyboard on a graphics system is used primarily as a device for entering text strings the keyboard is an efficient device for inputting such nongraphic data as picture labels associated with a graphics display keyboards can also be provided with features to facilitate entry of screen coordinates menu selections or graphics functions  cursor contro keys and function keys are common features on general purpose keyboards function keys allow users to enter frequently used opera tions in a single keystroke and cursor control keys can be used to select dis played objects or coordinate positions by positioning the screen cursor other types of cursor positioning devices such as a trackball or joystick are included on some keyboards additionally a numeric keypad is often included on the key board for fast entry of numeric data typical examples of general purpose key boards are given in figs  33 and 34  shows an ergonomic keyboard design  for specialized applications input to a graphics application may come from a set of buttons dials or switches that select data values or customized graphics operations gives an example of a button box and a set of input dials buttons and switches are often used to input predefined functions and dials are common devices for entering scalar values real numbers within some defined range are selected for input with dial rotations potentiometers are used to mea sure dial rotations which are then converted to deflection voltages for cursor movement  mouse a mouse is small hand held box used to position the screen cursor wheels or rollers on the bottom of the mouse can be used to record the amount and direc   ergonomically designed keyboard with removable palm rests the slope of each half of the keyboard can be adjusted separately  courtesy of apple computer inc  section input devices  tion of movement another method for detecting mouse motion is with an opti cal sensor for these systems the mouse is moved over a special mouse pad that has a grid of horizontal and vertical lines the optical sensor detects movement across the lines in the grid  since a mouse can be picked up and put down at another position without change in cursor movement it is used for making relative changes in the position of the screen cursor one two or three buttons are usually included on the top of the mouse for signaling the execution of some operation such as recording cur sor position or invoking a function most general purpose graphics systems now include a mouse and a keyboard as the major input devices as in figs  33 and 34  additional devices can be included in the basic mouse design to increase the number of allowable input parameters the z mouse in  includes   a button box a and a set of input dials b  courtesy of vector general    the z mouse features three buttons a mouse ball underneath a thumbwheel on the side and a trackball on top  courtesy of multipoint technology corporation  three buttons a thumbwheel on the side a trackball on the top and a standard mouse ball underneath this design provides six degrees of freedom to select spatial positions rotations and other parameters with the z mouse we can pick up an object rotate it and move it in any direction or we can navigate our view ing position and orientation through a three dimensional scene applications of the z mouse include virtual reality cad and animation  trackball and spacebail as the name implies a trackball is a ball that can be rotated with the fingers or palm of the hand as in  to produce screen cursor movement poten tiometers attached to the ball measure the amount and direction of rotation trackballs are often mounted on keyboards   or other devices such as the z mouse    while a trackball is a two dimensional positioning device a spaceball fig 45 provides six degrees of freedom unlike the trackball a spaceball does not actually move strain gauges measure the amount of pressure applied to the spaceball to provide input for spatial positioning and orientation as the ball is pushed or pulled in various directions spaceballs are used for three dimensional positioning and selection operations in virtual reality systems modeling anima tion cad and other applications  joysticks a joystick consists of a small vertical lever called the stick mounted on a base that is used to steer the screen cursor around most joysticks select screen posi tions with actual stick movement others respond to pressure on the stick figure 44 shows a movable joystick some joysticks are mounted on a keyboard oth ers function as stand alone units  the distance that the stick is moved in any direction from its center position corresponds to screen cursor movement in that direction potentiometers mounted at the base of the joystick measure the amount of movement and springs return the stick to the center position when it is released one or more buttons can be programmed to act as input switches to signal certain actions once a screen position has been selected   a three button track ball  courtesy of measurement systems inc  norwalk connecticut   section input devices chapter  overview of graphics systems  a moveable joystick  courtesy of calcomp group sanders associates inc  in another type of movable joystick the stick is used to activate switches that cause the screen cursor to move at a constant rate in the direction selected eight switches arranged in a circle are sometimes provided so that the stick can select any one of eight directions for cursor movement pressurg sensitive joy sticks also called isometric joysticks have a nonmovable stick pressure on the stick is measured with strain gauges and converted to movement of the cursor in the direction specified  data glove shows a data glove that can be used to grasp a virtual object the glove is constructed with a series of sensors that detect hand and finger motions electromagnetic coupling between transmitting antennas and receiving antennas is used to provide information about the position and orientation of the hand the transmitting and receiving antennas can each be structured as a set of three mutually perpendicular coils forming a three dimensional cartesian coordinate system input from the glove can be used to position or manipulate objects in a virtual scene a two dimensional projection of the scene can be viewed on a video monitor or a three dimensional projection can be viewed with a headset  digitizers a common device for drawing painting or interactively selecting coordinate po sitions on an object is a digitizer  these devices can be used to input coordinate values in either a two dimensional or a three dimensional space typically a dig itizer is used to scan over a drawing or object and to input a set of discrete coor dinate positions which can be joined with straight line segments to approximate the curve or surface shapes  one type of digitizer is the graphics tablet also referred to as a data tablet  which is used to input two dimensional coordinates by activating a hand cursor or stylus at selected positions on a flat surface a hand cursor contains cross hairs for sighting positions while a stylus is a pencil shaped device that is pointed at  a virtual reality scene displayed on a two dimensional video monitor with input from a data glove and a spaceball  courtesy of the computer graphics center darmstadt germany  positions on the tablet figures 46 and 47 show examples of desktop and floor model tablets using hand cursors that are available with  or buttons examples of stylus input with a tablet are shown in figs 48 and 49 the artist s digitizing system in  uses electromagnetic resonance to detect the three dimensional position of the stylus this allows an artist to produce different brush strokes with different pressures on the tablet surface tablet size varies from by inches for desktop models to by inches or larger for floor models graphics tablets provide a highly accurate method for selecting coordi nate positions with an accuracy that varies from about mm on desktop mod els to about 05 mm or less on larger models  many graphics tablets are constructed with a rectangular grid of wires em bedded in the tablet surface electromagnetic pulses are generated in sequence ae  the summasketch iii desktop tablet with a button hand cursor  courtesy of summagraphics corporation  section input devices   the notepad desktop tablet with stylus  courtesy of calcomp digitizer division  a part of calcomp inc    the microgrid if tablet with a button hand cursor designed for digitizing larger drawings  courtesy of summagraphics corporation   along the wires and an electric signal is induced in a wire coil in an activated sty lus or hand cursor to record a tablet position depending on the technology ei ther signal strength coded pulses or phase shifts can be used to determine the position on the tablet  acoustic or sonic tablets use sound waves to detect a stylus position ei ther strip microphones or point microphones can be used to detect the sound emitted by an electrical spark from a stylus tip the position of the stylus is calcu   an artist s digitizer system with a pressure sensitive cordless stylus  courtesy of wacom technology corporation  lated by timing the arrival of the generated sound at the different microphone positions an advantage of two dimensional accoustic tablets is that the micro phones can be placed on any surface to form the tablet work area this can be convenient for various applications such as digitizing drawings in a book  three dimensional digitizers use sonic or electromagnetic transmissions to record positions one electromagnetic transmission method is similar to that used in the data glove a coupling between the transmitter and receiver is used to compute the location of a stylus as it moves over the surface of an object fig ure 50 shows a three dimensional digitizer designed for apple macintosh com puters as the points are selected on a nonmetallic object a wireframe outline of the surface is displayed on the computer screen once the surface outline is con structed it can be shaded with lighting effects to produce a realistic display of the object resolution of this system is from mm to 08 mm depending on the model  image scanners drawings graphs color and black and white photos or text can be stored for computer processing with an image scanner by passing an optical scanning mechanism over the information to be stored the gradations of gray scale or color are then recorded and stored in an array once we have the internal repre sentation of a picture we can apply transformations to rotate scale or crop the picture to a particular screen area we can also apply various image processing methods to modify the array representation of the picture for scanned text input various editing operations can be performed on the stored documents some scanners are able to scan either graphical representations or text and they come in a variety of sizes and capabilities a small hand model scanner is shown in  while  and 53 show larger models   a three dimensional digitizing system for use with apple macintosh computers  courtesy of  mira imaging  section input devices   a hand held scanner that can be used to input either text or graphics images  courtesy of thunderware inc    desktop full color scanners  a flatbed scanner with a resolution of dots per inch  courtesy of sharp electronics corporation  b drum scanner with a selectable resolution from to dots per inch  courtesy of howtek inc  touch panels as the name implies touch panels allow displayed objects or screen positions to be selected with the touch of a finger a typical application of touch panels is for the selection of processing options that are represented with graphical icons some systems such as the plasma panels shown in  are designed with touch screens other systems can be adapted for touch input by fitting a transpar ent device with a touch sensing mechanism over the video monitor screen touch input can be recorded using optical electrical or acoustical methods  optical touch panels employ a line of infrared light emitting diodes leds along one vertical edge and along one horizontal edge of the frame the opposite vertical and horizontal edges contain light detectors these detectors are used to record which beams are interrupted when the panel is touched the two crossing  a large floor model scanner used to scan architectural and engineering drawings up to inches wide and feet long  courtesy of summagraphics corporation  beams that are interrupted identify the horizontal and vertical coordinates of the screen position selected positions can be selected with an accuracy of about inch with closely spaced leds it is possible to break two horizontal or two ver tical beams simultaneously in this case an average position between the two in terrupted beams is recorded the leds operate at infrared frequencies so that the light is not visible to a user illustrates the arrangement of leds in an optical touch panel that is designed to match the color and contours of the system to which it is to be fitted  an electrical touch panel is constructed with two transparent plates sepa rated by a smal distance one of the plates is coated with a conducting material and the other plate is coated with a resistive material when the outer plate is touched it is forced into contact with the inner plate this contact creates a volt age drop across the resistive plate that is converted to the coordinate values of the selected screen position  in acoustical touch panels high frequency sound waves are generated in the horizontal and vertical directions across a glass plate touching the screen causes part of each wave to be reflected from the finger to the emitters the screen position at the point of contact is calculated from a measurement of the time in terval between the transmission of each wave and its reflection to the emitter  plasma panels with touch screens  courtesy of photonics systems  section input devices chapter overview of graphics systems   an optical touch panel showing the arrangement of infrared led units and detectors around the edges of the frame  courtesy of carroll touch inc  light pens shows the design of one type of light pen such pencil shaped de vices are used to select screen positions by detecting the light coming from points on the crt screen they are sensitive to the short burst of light emitted from the phosphor coating at the instant the electron beam strikes a particular point other light sources such as the background light in the room are usually not detected by a light pen an activated light pen pointed at a spot on the screen as the elec tron beam lights up that spot generates an electrical pulse that causes the coordi nate position of the electron beam to be recorded as with cursor positioning de vices recorded light pen coordinates can be used to position an object or to select a processing option  although light pens are still with us they are not as popular as they once were since they have several disadvantages compared to other input devices that have been developed for one when a light pen is pointed at the screen part of the screen image is obscured by the hand and pen and prolonged use of the light pen can cause arm fatigue also light pens require special implementations for some applications because they cannot detect positions within black areas to be able to select positions in any screen area with a light pen we must have some nonzero intensity assigned to each screen pixel in addition light pens sometimes give false readings due to background lighting in a room  voice systems speech recognizers are used in some graphics workstations as input devices to accept voice commands the voice system input can be used to initiate graphics  a light pen activated with a button switch  courtesy of interactive computer products  operations or to enter data these systems operate by matching an input against a predefined dictionary of words and phrases  a dictionary is set up for a particular operator by having the operator speak the command words to be used into the system each word is spoken several times and the system analyzes the word and establishes a frequency pattern for that word in the dictionary along with the corresponding function to be per formed later when a voice command is given the system searches the dictio nary for a frequency pattern match voice input is typically spoken into a micro phone mounted on a headset as in  the microphone is designed to minimize input of other background sounds if a different operator is to use the system the dictionary must be reestablished with that operator s voice patterns voice systems have some advantage over other input devices since the attention of the operator does not have to be switched from one device to another to enter a command  a speech recognition system  courtesy of threshold technology inc  section input devices  chapter  overview of graphics systems hard copy devices we can obtain hard copy output for our images in several formats for presenta tions or archiving we can send image files to devices or service bureaus that will produce mm slides or overhead transparencies to put images on film we can simply photograph a scene displayed on a video monitor and we can put our pictures on paper by directing graphics output to a printer or plotter  the quality of the pictures obtained from a device depends on dot size and the number of dots per inch or lines per inch that can be displayed to produce smooth characters in printed text strings higher quality printers shift dot posi tions so that adjacent dots overlap  printers produce output by either impact or nonimpact methods impact printers press formed character faces against an inked ribbon onto the paper a line printer is an example of an impact device with the typefaces mounted on bands chains drums or wheels nonimpact printers and plotters use laser tech niques ink jet sprays xerographic processes as used in photocopying ma chines  electrostatic methods and electrothermal methods to get images onto paper  character impact printers often have a dot matrix print head containing a rectangular array of protruding wire pins with the number of pins depending on the quality of the printer individual characters or graphics patterns are obtained by retracting certain pins so that the remaining pins form the pattern to be printed shows a picture printed on a dot matrix printer  in a laser device a laser beam creates a charge distribution on a rotating drum coated with a photoelectric material such as selenium toner is applied to the drum and then transferred ta paper shows examples of desktop laser printers with a resolution of dots per inch  ink jet methods produce output by squirting ink in horizontal rows across a roll of paper wrapped on a drum the electrically charged ink stream is deflected by an electric field to produce dot matrix patterns a desktop ink jet plotter with   a picture generated on a dot matrix printer showing how the density of the dot patterns can be varied to produce light and dark areas  courtesy of apple computer inc   small footprint laser printers  courtesy of texas instruments  a resolution of dots per inch is shown in  and examples of larger high resolution ink jet printer  plotters are shown in   an electrostatic device places a negative charge on the paper one complete tow at a time along the length of the paper then the paper is exposed to a toner the toner is positively charged and so is attracted to the negatively charged areas where it adheres to produce the specified output a color electrostatic printer plotter is shown in  electrothermal methods use heat in a dot matrix print head to output patterns on heat sensitive paper  we can get limited color output on an impact printer by using different colored ribbons nonimpact devices use various techniques to combine three color pigments cyan magenta and yellow to produce a range of color patterns laser and xerographic devices deposit the three pigments on separate passes ink jet methods shoot the three colors simultaneously on a single pass along each print line on the paper   a dot per inch desktop ink jet  plotter  courtesy of summagraphics corporation  section hard copy devices  lal ib   floor model ink jet color printers that use variable dot size to achieve an equivalent resolution of to dots per inch  courtesy of iris graphics inc  bedford massachusetts    an electrostatic printer that can display dots per inch  courtesy of calcomp digitizer division a part of calcomp inc  drafting layouts and other drawings are typically generated with ink jet or pen plotters a pen plotter has one or more pens mounted on a carriage or cross bar that spans a sheet of paper pens with varying colors and widths are used to produce a variety of shadings and line styles wet ink ball point and felt tip pens are all possible choices for use with a pen plotter plotter paper can lie flat or be rolled onto a drum or belt crossbars can be either moveable or stationary while the pen moves back and forth along the bar either clamps a vacuum or an electrostatic charge hold the paper in position an example of a table top flatbed pen plotter is given in  and a larger rollfeed pen plotter is shown in    a desktop pen plotter with a resolution of 025 mum  courtesy of summagraphies corporation    a large rollfeed pen plotter with automatic multicolor  pen changer and a resolution of 0127 mm  courtesy of summagraphics corporation   there are two general classifications for graphics software general programming  packages and special purpose applications packages a general graphics pro gramming package provides an extensive set of graphics functions that can be section graphics software  used in a high level programming language such as c or fortran an exam ple of a general graphics programming package is the gl graphics library sys tem on silicon graphics equipment basic functions in a general package include those for generating picture components straight lines polygons circles and other figures  setting color and intensity values selecting views and applying transformations by contrast application graphics packages are designed for nonprogrammers that users can generate displays without worrying about how graphics operations work the interface to the graphics routines in such packages allows users to communicate with the programs in their own terms ex amples of such applications packages are the artist s painting programs and vari ous business medical and cad systems  coordinate representations with few exceptions general graphics packages are designed to be used with cartesian coordinate specifications if coordinate values for a picture are speci fied in some other reference frame spherical hyberbolic etc  they must be con verted to cartesian coordinates before they can be input to the graphics package special purpose packages may allow use of other coordinate frames that are ap propriate to the application in general several different cartesian reference frames are used to construct and display a scene we can construct the shape of individual objects such as trees or furniture in a scene within separate coordi nate reference frames called modeling coordinates or sometimes local coordi nates or master coordinates once individual object shapes have been specified we can place the objects into appropriate positions within the scene using a refer ence frame called world coordinates finally the world coordinate description of the scene is transferred to one or more output device reference frames for dis play these display coordinate systems are referred to as device coordinates or screen coordinates in the case of a video monitor modeling and world coordinate definitions allow us to set any convenient floating point or integer di mensions without being hampered by the constraints of a particular output de vice for some scenes we might want to specify object dimensions in fractions of a foot while for other applications we might want to use millimeters kilometers or light years   generally a graphics system first converts world coordinate positions to normalized device coordinates in the range from to before final conversion to specific device coordinates this makes the system independent of the various devices that might be used at a particular workstation  illustrates the sequence of coordinate transformations from modeling coordinates to device co ordinates for a two dimensional application an initial modeling coordinate po sition nc ya in this illustration is transferred to a device coordinate position xtc yac with the sequence  mer yc  laver yrs  pcr yc   aatcr ye  the modeling and world coordinate positions in this transformation can be anv floating point values normalized coordinates satisfy the inequalities  x   y   and the device coordinates x and y  are integers within the range  to xmaxr youx for a particular output device to accommodate differences in scales and aspect ratios normalized coordinates are mapped into a square area of the output device so that proper proportions are maintained graphics functions section      graphics software a general purpose graphics package provides users with a variety of functions for creating and manipulating pictures these routines can be categorized accord ing to whether they deal with output input attributes transformations viewing or general control  the basic building blocks for pictures are referred to as output primitives they include character strings and geometric entities such as points straight lines curved lines filled areas polygons circles etc  and shapes defined with arrays of color points routines for generating output primitives provide the basic tools for constructing pictures  attributes are the properties of the output primitives that is an attribute describes how a particular primitive is to be displayed they include intensity and color specifications line styles text styles and area filling patterns func tions within this category can be used to set attributes for an individual primitive class or for groups of output primitives  we can change the size position or orientation of an object within a scene using geometric transformations similar modeling transformations are used to construct a scene using object descriptions given in modeling coordinates  given the primitive and attribute definition of a picture in world coordi nates a graphics package projects a selected view of the picture on an output de vice viewing transformations are used to specify the view that is to be pre sented and the portion of the output display area that is to be used  pictures can be subdivided into component parts called structures or seg ments or objects depending on the software package in use each structure de fines one logical unit of the picture a scene with several objects could reference each individual object in a separate named structure routines for processing pose     sl video monitor sy       modeling jhe  rs ransformations  a ae ed world nort  coordinates coordinates other  output device coordinates   the transformation sequence from modeling coordinates to device coordinates for a two  dimensional scene object shapes are defined in local modeling coordipate systems then positioned within the overall world coordinate scene world coordinate specifications are then transformed into normalized coordinates at the final step individual device drivers wansier the normalized coordinate representation of the scene to the output devices for isplay chapter overview of graphics systems  structures carry out operations such as the creation modification and transfor mation of structures  interactive graphics applications use various kinds of input devices such as a mouse a tablet or a joystick input functions are used tu control and process the data flow from these interactive devices finally a graphics package contains a number of housekeeping tasks such as clearing a display screen and initializing parameters we can jump the func tions for carrving out hese chores under the heading control operations  sottware standards the primary goal of standardized graphics software is portability when pack ages are designed with tandard graphics functions software can be moved cas ily from one hardware system to another and used in different implementations and applications without standards programs designed for one hardware sys tem often cannot be transferred to another system without extensive rewnting of the programs  international and national standards planning organizations in many coun tries have cooperated in an effort to develop a generally accepted standard for computer graphics after considerable effort this work on standards led to the development of the graphical kernel system gks  this system was adupted as the first graphics software standard by the international standards organiza tion so and by various national standards organizations including the ameri can national standards institute ansi  although gks was originally designed as a two dimensional graphics package a three dimensional gks extension was subsequently developed  he second software standard to be developed and ap proved by the standards orgainzations was phigs programmer s hierarchical interactive graphics standard  which is an extension of gks increased capabil ities for object modeling color specifications surface rendering and picture ma nipulations are provided m phigs subsequently an extension of phigs called phigs  was developed to provide three dimensional surface shading capabili ties not available in phics  standard graphics tunctions are defined as a set of specifications that is in dependent of anv progr mming language a language binding is then defined for a particular high level programming language this binding gives the svntax for accessing the various standard graphics functions from this language for ex ample the general form of the phigs and gks function for specifying a se quence of n connected two dimensional straight line segments is pelylirein x y  in fortran this procec ure is implemented as a subroutine with the name gpl a graphics programmer using fortran would invoke this procedure with the subroutine call statement call gpl n x y  where  and y are one dimensional arrays of coordinate values for the line endpoints in c the proce dure would be invoked with ppclyline n pts  where pts is the list of co ordinate endpoint positicns each language binding is defined to make best use of the corresponding language capabilities and to handle various syntax issues such as data types parameter passing and errors  in the following chapters we use the standard functions defined in phigs as a framework for discussing basic graphics concepts and the design and appli cation of graphics packayes example programs are presented in pascal to illus trate the algorithms for implementation of the graphics functions and to illustrate also some applications of the functions descriptive names for functions based on the phigs definitions are used whenever a graphics function is referenced in a program  although phigs presents a specification for basic graphics functions it does not provide a standard methodology for a graphics interface to output de vices nor does it specify methods for storing and transmitting pictures separate standards have been developed for these areas standardization for device inter face methods is given in the computer graphics interface cgi system and the computer graphics metafile cgm system specifies standards for archiv ing and transporting pictures  phigs workstations generally the term workstation refers to a computer system with a combination of input and output devices that is designed for a single user in phigs and gks however the term workstation is used to identify various combinations of graphics hardware and software a phigs workstation can be a single output device a single input device a combination of input and output devices a file or even a window displayed ona video monitor  to define and use various workstations within an applications program we need to specify a workstation identifier and the workstation type the following statements give the general structure of a phigs program  openphigs errorfile memorysize  openworkstation ws connection type  create and display picture  closeworkstation ws  closepnigs where parameter errorfile is to contain any error messages that are gener ated and parameter memorysize specifies the size of an internal storage area the workstation identifier an integer is given in parameter ws and parameter connection states the access mechanism for the workstation parameter type specifies the particular category for the workstation such as an input device an output device a combination outin device or an input or output metafile  any number of workstations can be open in a particular application with input coming from the various open input devices and output directed to all the open output devices we discuss input and output methods in applications pro grams in chapter  after we have explored the basic procedures for creating and manipulating pictures  summary in this chapter we have surveyed the major hardware and software features of computer graphics systems hardware components include video monitors hard copy devices keyboards and other devices for graphics input or output graphics software includes special applications packages and general program ming packages  the predominant graphics display device is the raster refresh monitor based on television technology a raster system uses a frame buffer to store inten sity information for each screen position pixel  pictures are then painted on the summary  chapters overview of graphics systems screen by retrieving this information from the frame buffer as the electron beam in the crt sweeps across each scan line from top to bottom older vector dis plays construct pictures by drawing lines between specified line endpoints pic ture information is then stored asa set of line drawing instructions  many other video display devices are available in particular flat panel dis play technology is developing at a rapid rate and these devices may largely re place raster displays in the near future at present flat panel displays are com monly used in small systems and in special purpose systems flat panel displays include plasma panels and liquid crystal devices although vector monitors can be used to display high quality line drawings improvements in raster display technology have caused vector monitors to be largely replaced with raster sys tems  other display technologies include three dimensional and stereoscopic viewing systems virtual reality systems can include either a stereoscopic head set or a standard video monitor  for graphical input we have a range of devices to choose from keyboards button boxes and dials are used to input text data values or programming op tions the most popular pointing device is the mouse but trackballs space balls joysticks cursor control keys and thumbwheels are also used to position the screen cursor in virtual reality environments data gloves are commonly used other input devices include image scanners digitizers touch panels light pens and vaice systems  hard copy devices for graphics workstations include standard printers and plotters in addition to devices for producing slides transparencies and film out put printing methods include dot matrix laser ink jet electrostatic and elec trothermal plotter methods include pen plotting and combination printer plotter devices  graphics software can be roughly classified as applications packages or programming packages applications graphics software include cad packages drawing and painting programs graphing packages and visualization pro grams common graphics programming packages include phigs phigs  gks 3d gks and gl software standards such as phigs gks cgl and cgm are evolving and are becoming widely available on a variety of machines  normally graphics packages require coordinate specifications to be given with respect to cartesian reference frames each object for a scene can be defined in a separate modeling cartesian coordinate system which is then mapped to world coordinates to construct the scene from world coordinates objects are transferred to normalized device coordinates then to the final display device co ordinates the transformations from modeling coordinates to normalized device coordinates are independent of particular devices that might be used in an appli cation device drivers are then used to convert normalized coordinates to integer device coordinates   functions in graphics programming packages can be divided into the fol lowing categories output primitives attributes geometric and modeling trans formations viewing transformations structure operations input functions and control operations  some graphics systems such as phigs and gks use the concept of a workstation to specify devices or software that are to be used for input or out put in a particular application a workstation identifier in these systems can refer to a file a single device such as a raster monitor or a combination of devices such as a monitor keyboard and a mouse multiple workstations can be open to provide input or to receive output in a graphics application  references a general treatment of electronic displays including flat panel devices is available in sherr  flat panel devices are discussed in depp and howard  tannas  pro vides a reference for both flat panel displays and crts additional information on raster graphics architecture can be found in foley et al   three dimensional terminals are discussed in fuchs et al   johnson  and ikedo  head mounted dis plays and virtual reality environments are discussed in chung et al   for information on phigs and phigs  see hopgood and duce  howard et al  gaskins  and blake  information on the two dimensional gks stan dard and on the evolution of graphics standards is available in hopgood et al   an additional reference for gks is enderle kansy and pfaff   exercises  list the operating characteristics for the following display technologies raster refresh systems vecter refresh systems plasma panels and cds  list some applications appropriate for each of the display technologies in exercise  determine the resolution pixels per centimeter in the x and y directions for the video monitor in use on your system determine the aspect ratio and explain how relative proportions of objects can be maintained on your svsiem  consider three different raster systems with resolutrons of by by and by what size frame buffer in bytes is needed for each of these sys tems to store bits per pixel how much storage is required for each system if bits per pixel are to be stored  suppose an rgb raster system is to be designed using an inch by to inch screen with a resolution of pixels per inch in each direction if we want to store bits per pixel in the frame buffer how much storage in bytes do we need for the frame buffer  how long would it take to load a by frame buffer with bits per pixel if bits can be transferred per second how long would it take to load a bit per pixel frame buffer with a resolution of by 24 using this same transfer rate  suppose we have a computer with bits per word and a transfer rate of mip one million instructions per second  how long would t take to fill the frame buffer of a dpi dot per inch laser printer with a page size vf inches by inches  consider two raster systems with resolutions of by and by how many pixels could be accessed per second in each of these systems by a display con troller that refreshes the screen al a rate of frames per second whal is the access time per pixel in ach system  nn wo  suppose we have a video monitor with a display area that measures inches across and inches high if the resolution is by and the aspect ratio is what 1s the diameter of each screen point  10 how much lime is spent scanning across each row of pixels during screen refresh on a raster system with a resolution of by and a refresh rate of frames per second  11 consider a noninterlaced raster monitor with a resolution of a by ay m scan lines and n pixels per scan line  a refresh rate of frames per secand a horizontal retrace time of thong and a vertical retrace time of t   what is the fraction of the total refresh time per frame spent in retrace of the elect on beany  12 what is the fraction of the total refresh time per irame spent in retrace of the electron beam for a noninterlaced raster system with a cesolution of by a refresh rate of hz a horizontal retrace time of microseconds and a vertical retrace time of microseconds  exercises b2  13  16  17 18  assuming that a certain full color bit per pixel rgb raster system has a by frame buffer how many distinct color choices intensity levels would we have available how many different colors could we display at any one time   compare the advantages and disadvantages of a three dimensional monito using a varifocal mirror with stereoscopic system   list the different input and output components that are typically used with virtual  teality systems also explain how users interact with a virtual scene displayed with dif ferent output devices such as two dimensional and stereoscopic monitors  explain how virtual reality systems can be used in design applications what are some other applications for virtual reality systems  list some applications for large screen displays  explain the differences between a general graphics system designed for a programmer and one designed for a specific application such as architectural design chapter    output primitives     af  a picture can be described in several ways assuming we have a raster dis  play a picture is completely specified by the set of intensities for the pixel positions in the display at the other extreme we can describe a picture as a set of complex objects such as trees and terrain or furniture and walls positioned at specified coordinate locations within the scene shapes and colors of the objects can be described internally with pixel arrays or with sets of basic geometric struc tures such as straight line segments and polygon color areas the scene is then displayed either by loading the pixel arrays into the frame buffer or by scan con verting the basic geometric structure specifications into pixel patterns typically graphics programming packages provide functions to describe a scene in terms of these basic geometric structures referred to as output primitives and to group sets of output primitives into more complex structures each output primi tive is specified with input coordinate data and other information about the way that abject is to be displayed points and straight line segments are the simplest geometric components of pictures additional output primitives that can be used to construct a picture include circles and other conic sections quadric surfaces spline curves and surfaces polygon color areas and character strings we begin our discussion of picture generation procedures by examining device level algo rithms for displaying two dimensional output primitives with particular empha sis on scan conversion methods for raster graphics systems in this chapter we also consider how output functions can be provided in graphics packages and we take a look at the output functions available in the phigs language  point plotting is accomplished by converting a single coordinate position fur nished by an application program into appropriate operations for the output de vice in use with a crt monitor for example the electron beam is turned on to il luminate the screen phosphor at the selected location how the electron beam is positioned depends on the display technology a random scan vector system stures point plotting instructions in the display list and coordinate values in these instructions are converted to deflection voltages that position the electron beam at the screen locations to be plotted during each refresh cycle for a black and white raster system on the other hand a point is plotted by setting the bit value corresponding to a specified screen position within the frame buffer to then as the electron beam sweeps across each horizontal scan line it emits a burst of electrons plots a point whenever a value of is encountered in the frame buffer with an rgb system the frame buffer is loaded with the color codes for the intensities that are to be displayed at the screen pixel positions  line drawing is accomplished by calculating intermediate positions along the line path between two specified endpoint positions an output device is then directed to fill in these positions between the endpoints for analog devices such as a vector pen plotter or a random scan display a straight line can be drawn smoothly from one endpoint to the other linearly varying horizontal and verti cal deflection voltages are generated that are proportional to the required changes in the x and y directions to produce the smooth line  digital devices display a straight line segment by plotting discrete points between the two endpoints discrete coordinate positions along the line path are calculated from the equation of the line for a raster video display the line color intensity is then loaded into the frame buffer at the corresponding pixel coordi nates reading from the frame buffer the video controller then plots the screen pixels screen locations are referenced with integer values so plotted positions may only approximate actual line positions between two specified endpoints a computed line position of 48 51  for example would be converted to pixel position   this rounding of coordinate values to integers causes lines to be displayed with a stairstep appearance  the jaggies  as represented in fig the characteristic stairstep shape of raster lines is particularly noticeable on sys tems with low resolution and we can improve their appearance somewhat by displaying them on high resolution systems more effective techniques for smoothing raster lines are based on adjusting pixel intensities along the line paths  for the raster graphics device level algorithms discussed in this chapter ob ject positions are specified directly in integer device coordinates for the time being we will assume that pixel positions are referenced according to scan line number and column number pixel position across a scan line  this addressing scheme is illustrated in  scan lines are numbered consecutively from starting at the bottom of the screen and pixel columns are numbered from left to right across each scan line in section 10 we consider alternative pixel ad dressing schemes  to load a specified color into the frame buffer at a position corresponding to column x along scan line y we will assume we have available a low level pro cedure of the form setpixel x y   stairstep effect jaggies produced when a line is generated as a series of pixel positions  sectian points and lines x x  line path between endpoint positions x  y  and x2 y   scan  line number   pixel column pixel positions referenced by scan number line number and column number  we sometimes will also want to be able to retrieve the current frame buffer intensity setting for a specified location we accomplish this with the low level function getpixel x y  line drawing algorithms the cartesian slope intercept equation for a straight line is y m x b  with m representing the slope of the line and b as the y intercept given that the two endpoints of a line segment are specified at positions x  y  and xz   as shown in  we can determine values for the slope m and y intercept b with the following calculations  m  bo  bey m x   algorithms for displaying straight lines are based on the line equation and the calculations given in eqs and for any given x interval ax along a line we can compute the corresponding y interval ay from eq as ay max  similarly we can obtain the x interval ax corresponding to a specified ay as ar   these equations form the basis for determining deflection voltages in analog de vices for lines with slope magnitudes   dx can be set proportional to a small horizontal deflection voltage and the corresponding vertical deflection is then set proportional to ay as calculated from eq  for lines whose slopes have magnitudes m  ay can be set proportional to a small vertical deflec tion voltage with the corresponding horizontal deflection voltage set propor tional to ax calculated from eq  for lines with m  ax  ay and the hori zontal and vertical deflections voltages are equal in each case a smooth line with slope m is generated between the specified endpoints  on raster systems lines are plotted with pixels and step sizes in the hori zontal and vertical directions are constrained by pixel separations that is we must sample a line at discrete positions and determine the nearest pixel to the line at each sampled position this scan conversion process for straight lines is il lustrated in  for a near horizontal line with discrete sample positions along the x axis  dda algorithm the digital differentia analyzer dda is a scan conversion line algorithm based on calculating either sy or ax using eq or eq  we sample the line at unit in tervals in one coordinate and determine corresponding integer values nearest the line path for the other coordinate  consider first a line with positive slope as shown in  if the slope is less than or equal to we sample at unit x intervals ax  and compute each successive  value as yeo  yet mm g  subscript  takes integer values starting from for the first point and increases by until the final endpoint is reached since m can be any real number between and the calculated y values must be rounded to the nearest integer  for lines with a positive slope greater than we reverse the roles of x and y that is we sample at unit y intervals ay  and calculate each succeeding x value as nye  yt   equations and are based on the assumption that lines are to be processed from the left endpoint to the right endpoint   if this processing is reversed so that the starting endpoint is at the right then either we have ax  lland yrry  ye  mt gb or when the slope is greater than we have ay  with xpay  myo  m equations through can also be used to calculate pixel positions along a line with negative slope if the absolute value of the slope is less than and the start endpoint is at the left we set ax  and calculate y values with eq  section line drawing algorithms   straight line segment with five sampling positions along the x axis between x and x   when the start endpoint is at the right for the same slope  we set ax  and obtain y positions from eq  similarly when the absolute value of a negative slope is greater than we use ay  and eq or we use ay  and eq  this algorithm is summarized in the following procedure which accepts as input the two endpoint pixel positions horizontal and vertical differences be tween the endpoint positions are assigned to parameters dx and dy the differ ence with the greater magnitude determines the value of parameter steps start ing with pixel position x  y  we determine the offset needed at each step to generate the next pixel position along the line path we loop through this process steps times if the magnitude of dx is greater than the magnitude of dy and xa is less than xb the values of the increments in the x and y directions are and m respectively if the greater change is in the x direction but xa is greater than xb then the decrements and m are used to generate each new point on the line otherwise we use a unit increment or decrement in the y direction and an x in crement or decrement of m   include device h  define round a  int  a   int dx  xb  xa dy  yb  ya steps k float xincrement yincrement   xa y  ya if abs dxi  abs idy  steps  abs dx  else steps  abs dy  xincrement  dx  float steps  yincrement dy  float steps  void linedda int xa int ya int xb int yb  f  setpixel round x  round y  for k k steps k   x  s xincrement y  yincrement setpixel roundix  round y      the dda algorithm is a faster method for calculating pixel positions than the direct use of eq  it eliminates the multiplication in eq by making use of raster characteristics so that appropriate increments are applied in the x or y direction to step to pixel positions along the line path the accumulation of roundoff error in successive additions of the floating point increment however can cause the calculated pixel positions to drift away from the true line path for long line segments furthermore the rounding operations and floating point arithmetic in procedure inedda are still time consuming we can improve the performance of the dda algorithm by separating the increments m and m into integer and fractional parts so that all calculations are reduced to integer opera tions a method for calculating m intrements in integer steps is discussed in section 11 in the following sections we consider more general scan line proce dures that can be applied to both lines and curves  bresenham s line algorithm an accurate and efficient raster line generating algorithm developed by bresen ham scan converts lines using only incremental integer calculations that can be adapted to display circles and other curves figures and illustrate sections of a display screen where straight line segments are to be drawn the vertical axes show scan line positions and the horizontal axes identify pixel columns sampling at unit x intervals in these examples we need to decide which of two possible pixel positions is closer to the line path at each sample step starting from the left endpoint shown in  we need to determine at the next sampie position whether to plot the pixel at position  or the one at   simi larly  shows a negative slope line path starting from the left endpoint at pixel position   in this one do we select the next pixel position as  or as   these questions are answered with bresenham s line algorithm by testing the sign of an integer parameter whose value is proportional to the differ ence between the separations of the two pixel positions from the actual line path  to illustrate bresenham s approach we first consider the scan conversion process for lines with positive slope less than pixel positions along a line path are then determined by sampling at unit x intervals starting from the left end point xp yo of a given line we step to each successive column x position and plot the pixel whose scan line y value is closest to the line path  demonstrates the ith step in this process assuming we have determined that the pixel at x  y is to be displayed we next need to decide which pixel to plot in column x   our choices are the pixels at positions x  y  and x  y   at sampling position x  we label vertical pixel separations from the mathematical line path as and d    the y coordinate on the mathemati cal line at pixel column position x is calculated as y ma  b 10 then  yy ma b yy and d  ye i y ytl ma the difference between these two separations is d  dy  2m xy    2y  11 a decision parameter p for the kth step in the line algorithm can be ob tained by rearranging eq 11 so that it involves only integer calculations we ac complish this by substituting m  ay ax where ay and ax are the vertical and horizontal separations of the endpoint positions and defining  p  ax d  d   2ay x  2ax  yt 12  the sign of p is the same as the sign of d  d  since ax  for our example pa rameter c is constant and has the value 2ay  ax 2b   which is independent  t specified  line path    www 13     section of a display screen where a straight line segment 1s to be plotted starting from the pixel at column on scan line      bo    to specified  line path i 51 53  section of a display screen where a negative slope line segment is to be plotted starting from the pixel at column on scan line    yeo yeon ye mxt ve ps       eed mevr meas   section of the screen grid showing a pixel in column x on scan line y that is to be plotted along the path of a line segment with slope o m   distances between pixel positions and the line y coordinate at sampling position x   of pixel position and will be eliminated in the recursive calculations for p if the pixel at y  is closer to the line path than the pixel at y  that is d  d  then de cision parameter p is negative in that case we plot the lower pixel otherwise we plot the upper pixel  coordinate changes along the line occur in unit steps in either the x or y di rections therefore we can obtain the values of successive decision parameters using incremental integer calculations at step k  the decision parameter is evaluated from eq 12 as pooy  2ay  xa  2axs yay tc subtracting eq 12 from the preceding equation we have pest  pr  2ayoas   axl  yd but x   x   s0 that presi  py t 2ay  2zax ys1  yd 13 where the term y   y is either or depending on the sign cf parameter py this recursive calculation of decision parameters is performed at each inte ger x position starting at the left coordinate endpoint of the line the first para meter po is evaluated from eq 12 at the starting pixel position xj yo and with m evaluated as ay ax po  2ay  ax 14 we can summarize bresenham line drawing for a line with a positive slope less than in the following listed steps the constants 2ay and 2ay  24x are cal  culated once for each line to be scan canverted so the arithmetic involves only integer addition and subtraction of these two constants  bresenham s line drawing algorithm for m   input the two line endpoints and store the left endpoint in xq yo  load xo yo into the frame buffer that is plot the first point  calculate constants ax ay 24y and 2ay  2ax and obtain the start  ing value for the decision parameter as po  24y  ax  at each x along the line starting at k  perform the following test if p   the next point to plot is x   yp and pro  py  2ay otherwise the next point to plot is g  y  and prot  py  2ay  2ax  repeat step ax times    example bresenham line drawing to illustrate the algorithm we digitize the line with endpoints  and   this line has a slope of with the initial decision parameter has the value po  2ay  ax  and the increments for calculating successive decision parameters are 2ay 2ay  2axr  we plot the initial point x yo    and determine successive pixel posi tions along the line path from the decision parameter as  k px opa vers k px oga1 yea           14  14  10  10   a plot of the pixels generated along this line path is shown in   an implementation of bresenham line drawing for slopes in the range  in is given in the following procedure endpoint pixel positions for the line are passed to this procedure and pixels are plotted from the left endpoint to the right endpoint the call to set pixel loads a preset color value into the frame buffer at the specified x y pixel position   include device h  void linebres int xa int ya int xb int yb  int dx  abs xa  xb  dy  abs ya  yb  int p  dy  dx int twody   dy twodydx   idy  4x  int x y xend    determine which point to use as start which as end  if ixa  xb   x  xb  y yb  xend  xa  else  section line drawing algorithms  setpixel x y  while x  xend   xt4  if p  pp  twoby else  yt  pp  twodydx  setpixel x y      bresenham s algorithm is generalized to lines with arbitrary slope by con sidering the symmetry between the various octants and quadrants of the xy plane for a line with positive slope greater than we interchange the roles of the x and y directions that is we step along the y direction in unit steps and cal culate successive x values nearest the line path also we could revise the pro gram to plot pixels starting from either endpoint if the initial position for a line with positive slope is the right endpoint both x and y decrease as we step from right to left to ensure that the same pixels are plotted regardless of the starting endpoint we always choose the upper or the lower of the two candidate pixels whenever the two vertical separations from the line path are equal d  d  for negative slopes the procedures are similar except that now one coordinate de creases as the other increases finally special cases can be handled separately horizontal lines ay   vertical lines ax   and diagonal lines with lax   ay each can be loaded directly into the frame buffer without processing them through the line plotting algorithm  parallel line algorithms the line generating algorithms we have discussed so far determine pixel posi tions sequentially with a parallel computer we can calculate pixel positions   pixel positions along the line path between endpoints  and 21 25   plotted with bresenham s line algorithm  along a line path simultaneously by partitioning the computations among the various processors available one approach to the partitioning problem is to adapt an existing sequential algorithm to take advantage of multiple processors alternatively we can look for other ways to set up the processing so that pixel positions can be calculated efficiently in parallel an important consideration in devising a parallel algorithm is to balance the processing load among the avail able processors  given n processors we can set up a parallel bresenham line algorithm by subdividing the line path into n partitions and simultaneously generating line segments in each of the subintervals for a line with slope  m  and left endpoint coordinate position xo yp  we partition the line along the positive x di rection the distance between beginning x positions of adjacent partitions can be calculated as ax  art ny i g n pp where ax is the width of the line and the value for partition width ax is com puted using integer division numbering the partitions and the processors as  up to m  we calculate the starting x coordinate for the kth partition as x xp  kax  16  as an example suppose ax  and we have n  processors then the width of the partitions is and the starting x values for the partitions are xo x   xo  and x   with this partitioning scheme the width of the last rightmost subinterval will be smaller than the others in some cases in addition if the line endpoints are not integers truncation errors can result in variable width parti tions along the length of the line  to apply bresenham s algorithm over the partitions we need the initial value for the y coordinate and the initial value for the decision parameter in each partition the change ay in the y direction over each partition is calculated from the line slope m and partition width ax  ay  max  17 at the kth partition the starting y coordinate is then ye  yo  round kay  18  the initial decision parameter for bresenlym s algorithm at the start of the kth subinterval is obtained from eq 12  py  kax  2ay  round kay  2ax  2ay  ax 19  each processor then calculates pixel positions over its assigned subinterval using the starting decision parameter value for that subinterval and the starting coordi nates x  y  we can also reduce the floating point calculations to integer arith metic in the computations for starting values y and p by substituting m  ay ax and rearranging terms the extension of the parallel bresenham algorithm to a line with slope greater than is achieved by partitioning the line in the y di  section line drawing algorithms  bounding box for a line with coordinate extents ax and ay  rection and calculating beginning x values for the partitions for negative slopes we increment coordinate values in one direction and decrement in the other  another way to set up parallel algorithms on raster systems is to assign each processor to a particular group of screen pixels with a sufficient number of processors such as a connection machine cm with over 000 processors  we can assign each processor to one pixel within some screen region this approach can be adapted to line display by assigning one processor to each of the pixels within the limits of the line coordinate extents bounding rectangle and calculating pixel distances from the line path the number of pixels within the bounding box of a line is ax ay   perpendicular distance d from the line in  to a pixel with coordinates x y is obtained with the calculation d ax by c 20 where a  sy linelength p  s __ linelength c 2eay  yoar linelength with linelength  vax  ay  once the constants a b and c have been evaluated for the line each processor needs to perform two multiplications and two additions to compute the pixel distance d a pixel is plotted if d is less than a specified line thickness parameter  instead of partitioning the screen into single pixels we can assign to each processor either a scan line or a column of pixels depending on the line slope each processor then calculates the intersection of the line with the horizontal row or vertical column of pixels assigned that processor for a line with slope iml  each processor simply solves the line equation for y given an x column value for a line with slope magnitude greater than the line equation is solved for x by each processor given a scan line y value such direct methods although slaw on sequential machines can be performed very efficiently using multiple proces sots  when straight line segments and other objects are scan converted for display with a raster system frame buffer positions must be calculated we have as sumed that this is accomplished with the set pixel procedure which stores in tensity values for the pixels at corresponding addresses within the frame buffer array scan conversion algorithms generate pixel positions at successive unit in ymnx t  pere    e      tx yh  gna     ere addr  addr x y xrax screen frame buffer  pixel screen positions stored linearly in row major order within the frame buffer  tervals this allows us to use incremental methods to calculate frame buffer ad dresses  as a specific example suppose the frame butfer array is addressed in row major order and that pixel positions vary from  at the lower left screen cor ner to  max ymax at the top right corner   for a bilevel system bit per pixel  the frame buffer bit address for pixel position x y is calculated as addr x y  addr  y x    i x 21  moving across a scan line we can calculate the frame buffer address for the pixel at x  y as the following offset from the address for position x y  addr x  y  addr x y   22  stepping diagonally up to the next scan line from x y  we get to the frame buffer address of x  y  with the calculation addr x  y   addr x y  x   23  where the constant x   is precomputed once for all line segments similar in cremental calculations can be obtained from eq 21 for unit steps in the nega tive x and y screen directions each of these address calculations involves only a single integer additian  methods for implementing the set pixel procedure to store pixel intensity values depend on the capabilities of a particular system and the design require ments of the software package with systems that can display a range of intensity values for each pixel frame buffer address calculations would include pixel width number of bits  as well as the pixel screen location  a procedure for specifying straight line segments can be set up in a number of different forms in phigs gks and some other packages the two dimensional line function is  xmons ymax   polyline in wepoints  where parameter n is assigned an integer value equal to the number of coordi nate positions to be input and wcpoints is the array of input world coordinate values for line segment endpoints this function is used to define a set of n  connected straight line segments because series of connected line segments occur more often than isolated line segments in graphics applications polyline provides a more general line function to display a single straight line segment we set n and list the x and y values of the two endpoint coordinates in wepoints  as an example of the use of polyline the following statements generate two connected line segments with endpoints at     and   wepoints x  wepoints y  wepoints x  wepoints y  wepoints  x  wepoints y   polyline  wepoints  coordinate references in the polyline function are stated as absolute coordi nate values this means that the values specified are the actual point positions in the coordinate system in use  some graphics systems employ line and point functions with relative co ordinate specifications in this case coordinate values are stated as offsets from the last position referenced called the current position  for example if location  is the last position that has been referenced in an application program a rel ative coordinate specification of   corresponds to an absolute position of   an additional function is also available for setting the current position before the line routine is summoned with these packages a user lists only the single pair of offsets in the line command this signals the system to display a line start ing from the current position to a final position determined by the offsets the current position is then updated to this final line position a series of connected lines is produced with such packages by a sequence of line commands one for each line section to be drawn some graphics packages provide options allowing the user to specify line endpoints using either relative or absolute coordinates  implementation of the polyline procedure is accomplished by first per forming a series of coordinate transformations then making a sequence of calls to a device level jine drawing routine in phigs the input line endpoints are ac tually specified in modeling coordinates which are then converted to world co ordinates next world coordinates are converted to normalized coordinates then to device coordinates we discuss the details for carrving out these twa dimen sional coordinate transformations in chapter once in device coordinates we display the polyline by invoking a line routine such as bresenham s algorithm n  times to connect the n coordinate points each successive call passes the co ordinate pair needed to plot the next line section where the first endpoint of each coordinate pair is the last endpoint of the previous section to avoid setting the intensity of some endpoints twice we could modify the line algorithm so that the last endpoint of each segment is not platted we discuss methods for avoiding overlap of displayed objects in more detail in section 10  since the circle is a frequently used component in pictures and graphs a proce dure for generating either full circles or circular arcs is included in most graphics packages more generally a single procedure can be provided to display either circular or elliptical curves  ye properties of circles a circle is defined as the set of points that are all at a given distance r from a cen ter position x  y    this distance relationship is expressed by the pythagorean theorem in cartesian coordinates as circle with center coordinates x  y  and radius r  x xp  y y2ar 24 we could use this equation to calculate the position of points on a circle circum  ference by stepping along the x axis in unit steps from x  r to x  r and calcu lating the corresponding y values at each position as y  ytvp   fp 25  but this is not the best method for generating a circle one problem with this ap  proach is that it involves considerable computation at each step moreover the spacing between plotted pixel positions is not uniform as demonstrated in fig  _  13 we could adjust the spacing by interchanging x and y stepping through y   values and calculating x values whenever the absolute value of the slope of the positive half of a circle cirele is greater than but this simply increases the computation and processing pw wane w and required by the algorithm  ye _ another way to eliminate the unequal spacing shown in  is to cal  culate points along the circular boundary using polar coordinates r and  fig  12  expressing the circle equation in parametric polar form yields the pair of equations  x x rcos  26 y y rsind when a display is generated with these equations using a fixed angular step size a circle is plotted with equally spaced points along the circumference the step size chosen for  depends on the application and the display device larger an gular separations along the circumference can be connected with straight line segments to approximate the circular path for a more continuous boundary ona taster display we can set the step size at r this plots pixel positions that are approximately one unit apart  computation can be reduced by considering the symmetry of circles the shape of the circle is similar in each quadrant we can generate the circle section in the second quadrant of the xy plane by noting that the two circle sections are symmetric with respect to the y axis and circle sections in the third and fourth quadrants can be obtained from sections in the first and second quadrants by   symmetry of a circle calculation of a circle point x y in one octant yields the circle points shown for the other seven octants   considering symmetry about the x axis we can take this one step further and note that there is also symmetry between octants circle sections in adjacent oc tants within one quadrant are symmetric with respect to the line dividing the two octants these symmetry conditions are illustrated in fig 14 where a point at position x y on a one eighth circle sector is mapped into the seven circle points in the other octants of the xy plane taking advantage of the circle symme try in this way we can generate all pixel positions around a circle by calculating only the points within the sector from x  to x  y  determining pixel positions along a circle circumference using either eq 24 or eq 26 still requires a good deal of computation time the cartesian equation 24 involves multiplications and square root calculations while the parametric equations contain multiplications and trigonometric calculations more efficient circle algorithms are based on incremental calculation of decision  parameters as in the bresenham line algorithm which involves only simple inte ger operations  bresenham s line algorithm for raster displays is adapted to circle genera tion by setting up decision parameters for finding the closest pixel to the circum ference at each sampling step the circle equation 24 however is nonlinear so that square root evaluations would be required to compute pixel distances from a circular path bresenham s circle algorithm avoids these square root calculations by comparing the squares of the pixel separation distances  a method for direct distance comparison is to test the halfway position be tween two pixels to determine if this midpoint is inside or outside the circle boundary this method is more easily applied to other conics and for an integer circle radius the midpoint approach generates the same pixel positions as the bresenham circle algorithm also the error involved in locating pixel positions along any conic section using the midpoint test is limited to one half the pixel separation  midpoint circle algorithm as in the raster line algorithm we sample at unit intervals and determine the closest pixel position to the specified circle path at each step for a given radius r and screen center position x  y  we can first set up our algorithm to calculate pixel positions around a circle path centered at the coordinate origin   then each calculated position x y is moved to its proper screen position by adding x to x and y to y along the circle section from x  tox  yin the first quadrant the slope of the curve varies from to  therefore we can take unit steps in the positive x direction over this octant and use a decision parameter to deter mine which of the two possible y positions is closer to the circle path at each step positions if the other seven octants are then obtained by symmetry to apply the midpoint method we define a circle function  fort   tyr 27  any point x y on the boundary of the circke with radius r satisfies the equation feirte x    if the point is in the interior of the circle the circle function is nega tive and if the point is outside the circle the circle function is positive to sum  marize the relative position of any point x v can be determined by checking the sign of the circle function   if x y is inside the circle boundary ferte x y    if x y is on the circle boundary 28  if x y is outside the circle boundary the circle function tests in 28 are performed for the midpositions between pix els near the circle path at each sampling step thus the circle function is the deci sion parameter in the midpoint algorithm and we can set up incremental calcu lations for this function as we did in the line algorithm   shows the midpoint between the two candidate pixels at sam pling position x   assuming we have just plotted the pixel at    we next need to determine whether the pixel at position x   y  or the one at position     is closer to the circle our decision parameter is the circle function 27 evaluated at the midpoint between these two pixels  pi  fae  lye  29    y p e if p   this midpoit t is inside the circle and the pixel on scan line y is closer to the circle boundary otherwise the midposition is outside or on the circle bound ary and we select the pixel on scanline y   successive decision parameters are obtained using incremental calculations we obtain a recursive expression for the next decision parameter by evaluating the circle function at sampling position x     x   pray  fae a0 tl yee     y  1p  ve  shoe or pest  pe t  d wha  d  yer  ed  30  where y  is either y or y_  depending on the sign of py  increments for obtaining p  are either 2x    if p is negative or 2x     evaluation of the terms 2x  and   can also be done incremen tally as 2x41  2x  2ye  2y  at the start position  r  these two terms have the values and 2r respectively  each successive value is obtained by adding to the previous value of 2x and subtracting from the previous value of 2y  the initial decision parameter is obtained by evaluating the arcle function at the start position xq  g     m xieyr reed  yr t   rt  my mt ty  midpoint between candidate pixels at sampling position x along a circular path  po fans         f or po   r 30 if the radius r is specified as an integer we can simply round py to po zl r for r an integer  since all increments are integers  as in bresenham s line algorithm the midpoint method calculates pixel po sitions along the circumference of a circle using integer additions and subtrac tions assuming that the circle parameters are specified in integer screen coordi nates we can summarize the steps in the midpoint circle algorithm as follows  midpoint circle algorithm  input radius r and circle center x y  and obtain the first point on the circumference of a circle centered on the origin as  xo yo   r  calculate the initial value of the decision parameter as  pot gr  at each x position starting at k  perform the following test lf px  the next point along the circle centered on  is  y and pri  pr t dys t1 otherwise the next point along the circle is x   y   and pro  pet deyo  1d 2yeos where 2x   2x  and 2y1  2y   determine symmetry points in the other seven octants  move each calculated pixel position x y onto the circular path cen  tered on x  y  and plot the coordinate values  faxtx yrytye  repeat steps through until x  y   section  y   circle generating algorithms  8b      _  selected pixel positions solid  circles along a circle path with radius r  centered on the origin using the midpoint circle algorithm open circles show the symmetry oi 6 10 positions in the first quadrant   example midpoint circle drawing given a circle radius r  we demonstrate the midpoint circle algorithm by determining positions along the circle octant in the first quadrant from x  to x  y the initial value of the decision parameter is po l r   for the circle centered on the coordinate origin the initial point is x9 yo    and initial increment terms for calculating the decision parameters are 2xy yy  successive decision parameter values and positions along the circle path are cal culated using the midpoint method as  ky xkeate mert 2xta yu   20    20   20  18   18  16  14  a plot of the generated pixel positions in the first quadrant is shown in   the following procedure displays a raster circle on a bilevel monitor using the midpoint algorithm input to the procedure are the coordinates for the circle center and the radius intensities for pixel positions along the circle circumfer ence are loaded into the frame buffer array with calls to the set pixel routine  y px x yl x e lipse generated about foci f and f   include device h  void circlemidpoint int xcenter int ycenter int radius   int x   int y  radius  int p  radius  void circleplotpoints int int int int    plot first set of points  circleplotpoints xcenter ycenter x y i while x  y   xtt if p   pts x ll else  yori pte  x  y    circleplotpoints xcenter ycenter x y     void circleplotpoints int xcenter int ycenter int x int y  setpixel xcenter setpixel xcenter x ycenter  y  setpixel xcenter x ycenter  y   x yoenter  y   setpixel xcenter  x ycenter     ha setpixel xcenter y yoenter  x  setpixel xcenter y ycenter  x  setpixel xcenter y yoenter  x  setpixel xcenter y ycenter  x    loosely stated an ellipse is an elongated circle therefore elliptical curves can be generated by modifying circle drawing procedures to take into account the dif ferent dimensions of an ellipse along the major and minor axes  properties of ellipses an ellipse is defined as the set of points such that the sum of the distances from two fixed positions foci is the same for all points   lf the distances to the two foci from any point p  x y on the ellipse are labeled d and d  then the general equation of an ellipse can be stated as d  d  constant 32  expressing distances d and d in terms of the focal coordinates f   x y  and f   x y2  we have  vx  x   y  yy  vg    y ys  constant 39 by squaring this equation isolating the remaining radical and then squaring again we can rewrite the genera ellipse equation in the form ax  by  cxy  dx  ey  f 34  where the coefficients a b c d e and f are evaluated in terms of the focal coor dinates and the dimensions of the major and minor axes of the ellipse the major axis is the straight line segment extending from one side of the ellipse to the other through the foci the minor axis spans the shorter dimension of the ellipse bisecting the major axis at the halfway position ellipse center between the two foci  an interactive method for specifying an ellipse in an arbitrary orientation is to input the two foci and a point on the ellipse boundary with these three coordi nate positions we can evaluate the constant in eg 33 then the coefficients in eq 34 can be evaluated and used to generate pixels along the elliptical path  ellipse equations are greatly simplified if the major and minor axes are ori ented to align with the coordinate axes in  we show an ellipse in stan dard position with major and minor axes oriented parallel to the x and y axes parameter r for this example labels the semimajor axis and parameter r labels the semiminor axis the equation of the ellipse shown in  can be written in terms cf the ellipse center coordinates and parameters r and r as  fu c    doa   35 j wy ry using polar coordinates r and we can also describe the ellipse in standard posi tion with the parametric equations  y x tr cos  36 yrytry sind symmetry considerations can be used to further reduce computations an ellipse in standard position is symmetric between quadrants but unlike a circle it is not symmetric between the two octants of a quadrant thus we must calculate pixel positions along the elliptical arc throughout one quadrant then we obtain posi tions in the remaining three quadrants by symmetry fig 19  midpoint ellipse a gorithm our approach here is similar to that used in displaying a raster circle given pa rameters    and   y  we determine points x  for an ellipse in standard position centered on the origin and then we shift the points so the ellipse is cen tered at x  y  it we wish also to display the ellipse in nonstandard position we could then rotate the ellipse about its center coordinates to reorient the major and minor axes for the present we consider only the display of ellipses in standard position we discuss general methods for transforming object orientations and positions in chapter  the midpoint ellipse method is applied throughout the first quadrant in two parts  shows the division of the first quadrant according to the slope of an ellipse with r   we process this quadrant by taking unit steps in the v direction where the slope of the curve has a magnitude less than and tak ing unit steps in the y direction where the slope has a magnitude greater than  regions and   can be processed in various ways we can start at position  r and step clockwise along the elliptical path in the first quadrant  ellipse centered at   y  with semimajor axis r and semiminor axis    symmetry or an ellipse calculation of a point x y in one quadrant yields the ellipse points shown for the other three quadrants  regam slope     r    ragin     ellipse processing regions over region the magnitude of the ellipse slope is less than over region the magnitude of the slope is greater than t  shifting from unit steps in x to unit steps in y when the slope becomes less than  alternatively we could start at r  and select points in a counterclockwise order shifting from unit steps in y to unit steps in x when the slope becomes greater than  with parallel processors we could calculate pixel positions in the two regions simultaneously as an example of a sequential implementation of the midpoint algorithm we take the start position at  r  and step along the el lipse path in clockwise order throughout the first quadrant we define an ellipse function from eq 35 with  y    as fattpae  y  12x  by  r2r  37 which has the following properties  if x y is inside the ellipse boundary feripselx    if x y is on the ellipse boundary 38  o if x y is outside the ellipse boundary thus the ellipse function fetipee x   serves as the decision parameter in the mid point algorithm at each sampling position we select the next pixel along the el lipse path according to the sign of the ellipse function evaluated at the midpoint between the two candidate pixels  starting at  r  we take unit steps in the x direction until we reach the boundary between region and region   then we switch to unit steps in the y direction over the remainder of the curve in the first quadrant at each step we need to test the value of the slope of the curve the ellipse slope is calcu lated from eq 37 as    39 ary dy dx at the boundary between region and region dy dx  and 2rx  2rdy therefore we move out of region whenever 2rjx  2rdy 40   shows the midpoint between the two candidate pixels at sam pling position x  in the first region assuming position  y  has been se lected at the previous step we determine the next position along the ellipse path by evaluating the decision parameter that is the ellipse function 37 at this midpoint  an  fp 1y      iy t rly   in if pl   the midpoint is inside the ellipse and the pixel on scan line y is closer to the ellipse boundary otherwise the midposition is outside or on the ellipse boundary and we select the pixel on scan line y   at the next sampling position     x   the decision parameter rex  62y   for region is evaluated as  ve te plier  fps year  se y midpoint  nk  gy t ep  rly  s i  xe xt    or    midpoint between candidate ve   u  x  42 pixels at sampling position  x along an elliptical path  plysy  ple  2p t d ry e  where y is either y or y   depending on the sign of p1  decision parameters are incremented by the following amounts 2rexeey  n if pl  increment   rex tpf ye ifp1   as in the circle algorithm increments for ihe decision parameters can be calcu lated using only addition and subtraction since values for the terms x and 2r y can also be obtained incrementally at the initial position  r  the two terms evaluate to arix  43  arzy  2rir  44 as x and y are incremented updated values are obtained by adding 2r to 43 and subtracting 2r from 44 the updated values are compared at each step and we move from region to region when condition 40 is satisfied  in region the initial value of the decision parameter is obtained by evalu ating the ellipse function at the start position xq yo   r   plo  feng ty       r2p2 ny  rly  ny or ply r  rir  qn 45  over region we sample at unit steps in the negative y direction and the midpoint is now taken between horizontal pixels at each step   for this region the decision parameter is evaluated as pay  feu  yu  46    ry    yy   chapter output primitives ly ie rox sr dy   o  midpoint between candidate pixels at sampling position y   along an elliptical path   f p2   the midposition is outside the ellipse boundary and we select the pixel at x if p2   the midpoint is inside or on the ellipse boundary and we select pixel position x   to determine the relationship between successive decision parameters in region we evaluate the ellipse function at the next sampling step y    ym  pei  fouped  yer i 47  ila  by etl dip  rie or with x   set either to x or to x  depending on the sign of p2  when we enter region the initial position x y  is taken as the last posi tion selected in region  and the initial decision parameter in region is then j pay  fata  yo   49  p iv pd p  rilxg  ry  wp  ri ry te simplify the calculation of p2y we could select pixel positions in counterclock wise order starting at r   unit steps would then be taken in the positive y di rection up to the last pesition selected in region  the midpoint algorithm can be adapted to generate an ellipse in nonstan dard position using the ellipse function eq 34 and calculating pixel positions over the entire elliptical path alternatively we could reorient the ellipse axes to standard position using transformation methods discussed in chapter apply the midpoint algorithm to determine curve positions then convert calculated pixel positions to path positions along the original ellipse orientation  assuming r  vy and the ellipse center are given in integer screen coordi nates we only need incremental integer calculations to determine values for the decision parameters in the midpoint ellipse algorithm the increments r  r  2r  and 2rj are evaluated once at the beginning of the procedure a summary of the midpoint ellipse algorithm is listed in the following steps   midpoint ellipse algorithm  input r  ry and ellipse center x y  and obtain the first point on an ellipse centered on the origin as  xo we   ry  calculate the initial value of the decision parameter in region as  at each x position in region starting at k  g perform the follow ing test if pl   the next point along the ellipse centered on  is  y  y and ply  ply t wart ry otherwise the next point along the circle is     and ply  plat 2a  wp  with wx  wx  ay  2y  bre and continue until 2rgx  ory  calculate the initial value of the decision parameter in region using the last point   yo calculated in region as po ri z0    df  br  at each y position in region starting at k  perform the follow ing test if p2  the next point along the ellipse centered on  is tu  and py   pa  tt otherwise the next point along the circle is x    and pave  p2yt irie  why br  using the same incremental calculations for and y as in region  determine symmetry points in the other three quadrants  move each calculated pixel position x y onto the elliptical path cen tered on x  y  and plot the coordinate values  x x xxx yoy ty  repeat the steps for region until 2r3x  2r y   section flipse cenerating algorithms   example midpoint ellipse drawing given input ellipse parameters r  and r   we illustrate the steps in the midpoint ellipse algorithm by determining raster positions along the ellipse path in the first quadrant initial values and increments for the decision parameter cal culations are arjx  with increment 2r7   arty  2riry with increment  2r    for region j the initial point for the ellipse centered on the origin is xp  o    and the initial decision parameter value is ply  ry  r2r  a   successive decision parameter values and positions along the ellipse path are cal culated using the midpoint method as  k ply uxtete veer xa 2b yk  qd  768 224  768 44  768 208  640   640 288  512 244  384  we now move out of region since 2rfx  2rzy  for region the initial point is xp yo    and the initial decision parameter is py     the remaining positions along the ellipse path in the first quadrant are then cal culated as  k pr xeers yeor xara 15t  256 233  128 745  _   a plot of the selected positions around the ellipse boundary within the first quadrant is shown in   in the following procedure the midpoint algorithm is used to display an el lipse with input parameters rx ry xcenter and ycenter positions along the section ellipse generating algorithms   positions along an elliptical path centered on the origin with r  and r  using the midpoint algorithm to calculate pixel o0t123 67 addresses in the first quadrant  rw  oo  curve in the first quadrant are generated and then shifted to their proper screen positions intensities for these positions and the symmetry positions in the other three quadrants are loaded into the frame buffer using the set pixel routine   include device h  define round a   int  a  void ellipsemidpoint int xcenter int ycenter int rx int ry   int rx2  rx rx  int ry2  ry ry  int tworx2  rx2  int twory2  ry2  int p  int x  int y  ry int px   int py  tworx2  y void ellipseplotpoints int int int int    plot the first set of points  ellipseplotpoints xcenter ycenter x y    region  p  round ry2  rxz  ry   25  rxz  while px  py  x  px  twory2 if p  p  ry2  px else  yyr i py  tworx2 p  ry2  px  py  ellipseplotpaints xcenter ycenter x y     region  pp  round ry2  x  x  rx2 y  y  rx2 ry2  while y    r g py  tworx2 if p  p t rx2  py else  k e px  twory2 p  rx2  py  px     ell pseplotpoincs xcenter ycenter x y    void ellipsepiotpo nts int xcenter int ycenter int x int y    setpixel xcenter  x ycenter  y   setpixel xcenter  x ycenzer  y  setpixel xcenter  x ycenter  y  setpixel xcenter  x ycenter  y    other curves various curve functions are useful in object modeling animation path specifica tions data and function graphing and other graphics applications commonly encountered curves include conics trigonometric and exponential functions probability distributions general polynomials and spline functions displays of these curves can be generated with methods similar to those discussed for the circle and ellipse functions we can obtain positions along curve paths directly from explicit representations y  f x or from parametric forms alternatively we could apply the incremental midpoint method to plot curves described with im plicit functions f x y    a straightforward method for displaying a specified curve function is to ap proximate it with stra ght line segments parametric representations are useful in this case for obtaining equally spaced line endpoint positions along the curve path we can also generate equally spaced positions from an explicit representa tion by choosing the independent variable according to the slupe of the curve where the slope of y  x has a magnitude less than we choose x as the inde pendent variable and calculate y values at equal x increments to obtain equal spacing where the slope has a magnitude greater than we use the inverse func tion x  f  y  and calculate values of x at equal y steps  straight line or curve approximations are used to graph a data set of dis crete coordinate points we could join the discrete points with straight line seg ments or we could use linear regression least squares to approximate the data set with a single straight line a nonlinear least squares approach is used to dis play the data set with some approximating function usually a polynomial  as with circles and ellipses many functions possess symmetries that can be exploited to reduce the computation of coordinate positions along curve paths for example the normal probability distribution function is symmetric about a center position the mean  and all points along one cycle of a sine curve can be generated from the points in a interval  conic sections in general we can describe a conic section or conic with the second degree equation  ax  by  cxy  dx  ey  f 50 where values for parameters a b c d e and f determine the kind of curve we are to display given this set of coefficients we can determine the particular conic that will be generated by evaluating the discriminant b  4ac   generates an ellipse or circle b  4ac   generates a parabola 31  generates a hyperbola for example we get the circle equation 24 when a  b  c  d  2x f  2y and f  x  y  r  equation 50 also describes the degenerate conics points and straight lines  ellipses hyperbolas and parabolas are particularly useful in certain aninta tion applications these curves describe orbital and other motions for objects subjected to gravitational electromagnetic or nuclear forces planetary orbits in the solar system for example are ellipses and an object projected into a uniform gravitational field travels along a parabolic trajectory  shows a para bolic path in standard position for a gravitational field acting in the negative y di rection the explicit equation for the parabolic trajectory of the object shown can be written as y wy  ax  x9   b x  x  52 with constants  and b determined by the initial velocity vp cf the object and the acceleration  due to the uniform gravitational force we can also describe such parabolic motions with parametric equations using a time parameter  measured in seconds from the initial projection point  x  xq t byol y  yo  yyol  af here v9 and v are the initial velocity components and the value of g near the surface of the earth is approximately 980cm sec  object positions along the par abolic path are then calculated at selected time steps  hyperbolic motions   occur in connection with the collision of charged particles and in certain gravitational problems for example comets or meteorites moving around the sun may travel along hyperbolic paths and escape to outer space never to return the particular branch left or right in  describing the motion of an object depends on the forces involved in the prob lem we can write the standard equation for the hyperbola centered on the origin in  as fy xy oo   le ouf with x  r for the left branch and x r for the right branch since this equa tion differs from the standard ellipse equation 35 only in the sign between the x and y terms we can generate points along a hyperbolic path with a slightly modified ellipse algorithm we will return to the discussion of animation applica tions and methods in more detail in chapter and in chapter we discuss applications of computer graphics in scientific visualization  g  section other curves  etgnre 24 parabolic path of an object tossed into a downward gravitational field at the initial position x9 yo  left branch    left and right branches of a hy perbola in standard position with symmetry axis along the x axis  chapter output primitives   a spline curve formed with individual cubic polynomial sections between specified coordinate points  parabolas and hyperbolas possess a symmetry axis for example the parabola described by eq 53 is symmetric about the axis  x  xq  opya the methods used in the midpoint ellipse algorithm can be directly applied to obtain points along one side of the symmetry axis of hyperbolic and parabolic paths in the two regions  where the magnitude of the curve slope is less than and  where the magnitude of the slope is greater than to do this we first select the appropriate form of eq 50 and then use the selected function to set up expressions for the decision parameters in the two regions  polynomials and spline curves a polynomial function of nth degree in x is defined as y  ax ko 55  ay  ax    ay yx  ar  where is a nonnegative integer and the a are constants with a  we get a quadratic when  a cubic polynomial when n  a quartic when n  and so forth and we have a straight line when  polynomials are useful in a number of graphics applications including the design of object shapes the speci fication of animation paths and the graphing of data trends in a discrete set of data points  designing object shapes or motion paths is typically done by specifying a few points to define the general curve contour then fitting the selected points with a polynomial one way to accomplish the curve fitting is to construct a cubic polynomial curve section between each pair of specified points each curve section is then described in parametric form as  ay t qgu tag  au  56  y fay  ayy  ayu  aut 57  where parameter u varies over the interval to values for the coefficients of u in the parametric equations are determined from boundary conditions on the curve sections one boundary condition is that two adjacent curve sections have the same coordinate position at the boundary and a second condition is to match the two curve slopes at the boundary so that we obtain one continuous smooth curve   continuous curves that are formed with polynomial pieces are called spline curves or simply splines there are other ways to set up spline curves and the various spline generating methods are explored in chapter   methods for exploiting parallelism in curve generation are similar to those used in displaying straight line segments we can either adapt a sequential algorithm by allocating processors according to curve partitions or we could devise other methods and assign processors to screen partitions  a parallel midpoint method for displaying citcles is to divide the circular arc from to into equal subarcs and assign a separate processor to each subarc as in the parallel bresenham line algorithm we then need to set up com putations to determine the beginning y value and decisicn parameter p value for each processor pixel positions are then calculated throughout each subarc and positions in the other circle octants are then obtained by symmetry similarly a parallel ellipse midpoint method divides the elliptical arc over the first quadrant into equal subarcs and parcels these out to separate processors pixel positions in the other quadrants are determined by symmetry a screen partitioning scheme for circles and ellipses is to assign each scan line crossing the curve to a separate processor in this case each processor uses the circle or ellipse equation to calcu late curve intersection coordinates  for the display of elliptical arcs or other curves we can simply use the scan line partitioning method each processor uses the curve equation to locate the in tersection positions along its assigned scan line with processors assigned to indi vidual pixels each processor would calculate the distance or distance squared from the curve to its assigned pixel if the calculated distance is less than a prede fined value the pixel is plotted   routines for circles splines and other commonly used curves are included in many graphics packages the phigs standard does not provide explicit func tions for these curves but it does include the following general curve function  generalizeddrawingprimitive n wcpoints id datalist  where wcpoints isa list of n coordinate positions datalist contains noncoor dinate data values and parameter id selects the desired function at a particular installation a circle might be referenced with id  an ellipse with id  and so on  as an example of the definition of curves through this phigs function a circle id  say could be specified by assigning the two center coordinate val ues to wcpoints and assigning the radius value to datalist the generalized drawing primitive would then reference the appropriate algorithm such as the midpoint method to generate the circle with interactive input a circle could be defined with two coordinate points the center position and a point on the cir cumference similarly interactive specification of an ellipse can be done with three points the two foci and a point on the ellipse boundary all stored in wo points for an ellipse in standard position wcpoints could be assigned only the center coordinates with daialist assigned the values for r and r  splines defined with control points would be generated by assigning the control point coordi nates towcpoints  functions to generate circles and ellipses often include the capability of drawing curve sections by specifying parameters for the line endpoints expand ing the parameter list allows specification of the beginning and ending angular values for an arc as illustrated in  another method for designating a cir  section curve functions   circular arc specified by beginning and ending angles circle center is at the coordinate origin  chapter  output primitives  cular or elliptical arc is to input the beginning and ending coordinate positions of the arc  10         lower left section of the screen grid referencing integer coordinate positions     lt     4 line path for a series of connected line segments between screen grid coordinate positions   inuminated pixel at raster position   pixel addressing and object geometry so far we have assumed that all input positions were given in terms of scan line number and pixel position number across the scan line as we saw in chapter there are in general several coordinate references associated with the specifica tion and generation of a picture object descriptions are given in a world reference frame chosen to suit a particular application and input world coordi nates are ultimately converted to screen display positions world descriptions of objects are given in terms of precise coordinate positions which are infinitesi mally small mathematical points pixel coordinates however reference finite screen areas if we want to preserve the specified geometry of world objects we need to compensate for the mapping of mathematical input points to finite pixel areas one way to do this is simply to adjust the dimensions of displayed objects to account for the amount of overlap of pixel areas with the object boundaries another approach is to map world coordinates onto screen positions between pixels so that we align object boundaries with pixel boundaries instead of pixel centers  screen grid coordinates an alternative to addressing display positions in terms of pixel centers is to refer ence screen coordinates with respect to the grid of horizontal and vertical pixel boundary lines spaced one unit apart   a screen coordinate position is then the pair of integer values identifying a grid intersection position between two pixels for example the mathematical line path for a polyline with screen endpoints     and  is shown in   with the coordinate origin at the lower left of the screen each pixel area can be referenced by the integer grid coordinates of its lower left corner  illustrates this convention for an by section of a raster with a single illumi nated pixe at screen coordinate position   in geneial we identify the area occupied by a pixel with screen coordinates x y as the unit square with diago nally opposite corners at x y and x  y   this pixel addressing scheme has several advantages it avoids half integer pixel boundaries it facilitates pre cise object representations and it simplifies the processing involved in many scan conversion algorithms and in other raster procedures  the algorithms for line drawing and curve generation discussed in the pre ceding sections are still valid when applied to input positions expressed as screen grid coordinates decision parameters in these algorithms are now simply a mea sure of screen grid separation differences rather than separation differences from pixel centers  maintaining geometric properties of displayed objects when we convert geometric descriptions of objects into pixel representations we transform mathematical points and lines into finite screen areas if we are to maintain the original geometric measurerrents specified by the input coordinates   line path and corresponding pixel display for input screen grid   endpoint coordinates  and 21 23 25 27 29    for an object we need to account for the finite size of pixels when we transform the object definition to a screen display   shows the line plotted in the bresenham line algorithm example of section interpreting the line endpoints  and  as precise grid crossing positions we see that the line should not extend past screen grid posi tion   if we were to plot the pixel with screen coordinates   as in the example given in section we would display a line that spans horizontal units and vertical units for the mathematical line however ax  and dy  if we are addressing pixels by their center positions we can adjust the length of the displayed line by omitting one of the endpoint pixels if we think of screen coordinates as addressing pixel boundaries as shown in  we plot a line using only those pixels that are interior to the line path that is only those pix els that are between the line endpoints for our example we would plot the left most pixel at  and the rightmost pixel at   this displays a line that           conversion of rectangle a with verti es at screen coordinates       and  into display b that includes the right and top boundaries and into display c that maintains geometric magnitudes  section 10 pixel addressing and object geometry chapter qutput primitives  has the same geometric magnitudes as the mathematical line from  to   for an enclosed area inpul geometric properties are maintained by display ing the area only with those pixels that are interior to the object boundaries the rectangle defined with the screen coordinate vertices shown in  a  for example is larger when we display it filled with pixels up to and including the border pixel lines joing the specified vertices as defined the area of the rectangle is units but as displayed in  b  it has an area of units in  c  the original rectangle measurements are maintained by displaying  xe   y       circle path and midpoint circle algorithm plot of a circle with radius in screen coordinates  yyw x  y x dx  y   x y  ty xb  f y 4x   modification of the circle plot in  to maintain the specified circle diameter of only the interna pixels the right boundary of the mput rectangle is at x  to maintain this boundary in the display we set the rightmost pixel grid coordinate at x  the pixels in this vertical column then span the interval from x  to x  similarly the mathematical top boundary of the rectangle is at y  so we set the top pixel row for the displayed rectangle at y   these compensations for finite pixel width along object boundaries can be applied to other polygons and to curved figures so that the raster display main tains the input object specifications a circle of radius and center position   for instance would be displayed as in fig by the midpoint circle algo rithm using screen grid coordinate positions but the plotted circle has a diameter of to plot the circle with the defined diameter of we can modify the circle algorithm to shorten each pixel scan line and each pixel column as in  one way to do this is to generate points clockwise along the circular arc in the third quadrant starting at screen coordinates   for each generated point the other seven circle symmetry points are generated by decreasing the x coordi nate values by along scan lines and decreasing the y coordinate values by along pixel columns similar methods are applied in ellipse algorithms to main tain the specified proportions in the display of an ellipse  a standard output primitive in general graphics packages is a solid color or pat terned polygon area other kinds of area primitives are sometimes available but poly gons are easier to process since they have linear boundaries there are two basic approaches to area filling on raster systems one way to fill an area is to determine the overlap intervals for scan lines that cross the area another method for area filling is to start from a given interior position and paint outward from this point until we encounter the specified boundary conditions the scan line approach is typically used in general graphics packages to fill poly gons circles ellipses and other simple curves fill methods starting from an inte rior point are useful with more complex boundaries and in interactive painting systems in the following sections we consider methods for solid fill of specified areas other fill options are cliscussed in chapter  scan line polygon fill algorithm  illustrates the scan line procedure for sond tilling of polygon areas for each scan line crossing a polygon the area fill algorithm locates the intersec tion points of the scan line with the polygon edges these intersection points are then sorted from left to right and the corresponding frame buffer positions be tween each intersection pair are set to the specified fill color in the example of  the four pixel intersection positions with the polygon boundaries define two stretches of interior pixels from x  to x  l4and from x  tox  some scan line intersections at polygon vertices require special handling a scan line passing through a vertex intersects two polygon edges at that position adding two points to the list of intersections for the scan line  shows two scan lines at positions y and y that intersect edge endpoints scan line y in tersects five polygon edges scan line y  however intersects an even number of edges although it also passes through a vertex intersection points along scan line section 11 filled area primitives 1t7 chapter output primitives  interior pixels along a scan line passing through a polygon area  y correctly identify the interior pixel spans but with scan line y we need to do some additional processing to determine the correct interior points  the topological difference between scan line y and scan line y in  is identified by noting the position of the intersecting edges relative to the scan line for scan line y the two intersecting edges sharing a vertex are on opposite sides of the scan line but for scan line y  the two intersecting edges are both above the scan line thus the vertices that require additional processing are those that have connecting edges on opposite sides of the scan line we can identify these vertices by tracing around the polygon boundary either in clockwise or counterclockwise order and observing the relative changes in vertex y coordinates as we move from one edge to the next if the endpoint y values of two consecutive edges mo notonically increase or decrease we need to count the middle vertex as a single intersection point for any scan line passing through that vertex otherwise the shared vertex represents a local extremum minimum or maximum on the polv gon boundary and the two edge intersections with the scan line passing through that vertex can be added to the intersection list  scan line y  sean line y     intersection points along scan lines that intersect polygon vertices scan line y generates an odd number of intersections but scan line y generates an even number of intersections that can be paired to identify correctly the interior pixel spans one way to resolve the question as to whether we should count a vertex as one intersection or two is to shorten some polygon edges to split those vertices that should be counted as one intersection we can process nonhorizontal edges around the polygon boundary in the order specified either clockwise or counter clockwise as we process each edge we can check to determine whether that edge and the next nonhorizontal edge have either monotonically increasing or decreasing endpoint y values if so the lower edge can be shortened to ensure that only one intersection point is generated for the scan line going through the common vertex joining the two edges  illustrates shortening of an edge when the endpoint y coordinates of the two edges are increasing the y value of the upper endpoint for the current edge 1s decreased by as in fig 37 a  when the endpoint y values are monotonically decreasing as in fig 37 b  we decrease the y coordinate of the upper endpoint of the edge following the current edge  calculations performed in scan conversion and other graphics algorithms typically take advantage of various coherence properties of a scene that is to be displayed what we mean by coherence is simply that the properties of one part of a scene are related in some way to other parts of the scene so that the relation ship can be used to reduce processing coherence methods often involve incre mental calculations applied along a single scan line or between successive scan lines in determining edge intersections we can set up incremental coordinate calculations along any edge by exploiting the fact that the slope of the edge is constant from one scan line to the next  shows two successive scan lines crossing a left edge of a polygon the slope of this polygon boundary line can be expressed in terms of the scan line intersection coordinates    m  et yi 58 xper  xk since the change in y coordinates between the two scan lines is simply ves ye  59 p p  f     scan line y  lt  scan line y p scan line y       a  b   adjusting endpoint y values for a pulygon as we process edges in order around the polygon perimeter the edge currently being processed is inuicated as a solid line in a  the y coordinate of the upper endpoint of the current edge is decreased by in b  the y coordinate of the upper endpoint of the next edge is decreased by  section 11 filled area primitives  scan line y   scan line y   two successive scan lines intersecting a polygon boundary  the x intersection value x  on the upper scan line can be determined from the x intersection value x on the preceding sean line as i  xper  mhf 60 m each successive x intercept can thus be calculated by adding the inverse of the slope and rounding to the nearest integer  an obvious parallel implementation of the fill algorithm is to assign each scan line crossing the polygon area to a separate processor edge intersection cal culations are then performed independently along an edge with slope m the in tersection x value for scan line k above the initial scan line can be calculated as xp  xt  67 mn tn a sequential fill algorithm the increment of x values by the amount m along an edge can be accomplished with integer operations by recalling that the slope is the ratio of two integers  pie  ke where ax and ay are the differences between the edge endpoint x and y coordi nate values thus incremental calculations of x intercepts along an edge for suc cessive scar lines can be expressed as ax xie  mf 62 del k ay using this equation we can perform integer evaluation of the x intercepts by ini tializing a counter to then incrementing the counter by the value of ax each time we move up to a new scan line whenever the counter value becomes equal to or greater than ay we increment the current x intersection value by and de crease the counter by the value ay this procedure is equivalent to maintaining integer and fractional parts for x intercepts and incrementing the fractional part until we reach the next integer value as an example of integer incrementing suppose we have an edge with slope m  at the initial scan line we set the counter to and the counter in sean line y  scan line yp   o  scan line v4   a polygon and its sorted edge table with edge dc shortened by one unit in the y direction  crement to as we move up to the next three scan lines along this edge the counter is successively assigned the values  and on the third scan line above the initial scan line the counter now has a value greater than so we in crement the x intersection coordinate by and reset the counter to the value   we continue determining the scan line intersections in this way until we reach the upper endpoint of the edge similar calculations are carried out to obtain intersections for edges with negative slopes we can round to the nearest pixel x intersection value instead of truncating to obtain integer positions by modifying the edge intersection algorithm so that the increment is compared to ay this can be done with integer arithmetic by incrementing the counter with the value 24x at each step and comparing the in crement to ay when the increment is greater than or equal to ay we increase the x value by and decrement the counter by the value of 2ay in our previous ex ample with m  the counter values for the first few scan lines above the ini tial scan line on this edge would now be  reduced to   reduced to   reduced to   and reduced to  now x would be incre mented on scan lines   etc  abuve the initial scan line for this edge the extra calculations required for each edge are 2ax  ax  ax and 2ay  ay  ay  to efficiently perform a polygon fill we can first store the polygon bound ary in a sorted edge table that contains all the information necessary to process the sean lines efficiently proceeding around the edges in either a clockwise or a counterclockwise order we can use a bucket surt to stare the edges sorted on the smallest y value of cach edge in the correct scan line positions only nonhorizon tal edges are entered into the sorted edge table as the edges are processed we can also shorten certain edges to resolve the vertex intersection question each entry in the table for a particular scan line contains the maximum y value for that edge the x intercept value at the lower vertex for the edge and the inverse slope of the edge for each scan line the edges are in sorted order from left to night  shows a polygon and the assuciated sorted edge table   crapter qutpul primitives next we process the scan lines from the bottem of the polygon to its top producing an active edge list for each scan line crossing the polygon boundaries the active edge list for a scan line contains all edges crossed by that scan line with iterative coherence calculations used to obtain the edge intersections  implementation of edge intersection calculations can also be facilitated by storing ax and ay values in the sorted edge table also to ensure that we cor rectly fill the interior of specified polygons we can apply the considerations dis cussed in section 10 for each scan line we fill in the pixel spans for each pair of x intercepts starting trom the leftmost x intercept value and ending at one po sition before the rightmost  intercept and each polygon edge can be shortened by one unit in the y direction at the top endpoint these measures also guarantee that pixels in adjacent polygons will not overlap each other  the following procedure performs a solid fill scan conversion for an input set of polygon vertices for each scan line within the vertical extents of the poly gon an active edge list is set up and edge intersections are calculated across each scan line the interior fill is then applied between successive pairs of edge intersections processed from left to right  finclude device h  typedef struct tedge  int yupper  float xintersect dxperscan  struct trdge  next edge   inserts edge into list in order of increasing xintersect field   void insertedge edce  edge  p  g  list  pp  q next   edge xintersect  p sxintersect  while p  null  p  null else  q p  p  p next    edge next  g next  g next  edge   int  if  k l   ent  j  else jeke i while pts k y  pts j y lf  j  fent  j  else  for an index return y coordinate of next nonhorizontal line  int ynext int k int cnt depz  pts  list edge  edge    jee return pts j y    store lower y coordinate and inverse slepe for each edge adjust and store upper y coordinate for edges that are the lower member of a monotonicallw increasing or decreasing pair of edges   void makeedgerec if   dcpt lower dcpt upper int ycomp edge  edge edge  edges   edge dxperscan  float  upper x  lower x   upper y  lower y  edge xintersect  lower x if upper y  ycomp edge yupper  upper y  else edge yupper  upper y insertedge edges lower y  edge  void buildedgelist int cnt dept  pts edge  edges      edge  edge dcpt vl v2 int i yprev  pts ent  y  vl x  pts cnt  x vl y  pts ent  y for i i cnt i   v2  pts ij  if vl y  v2 y    nonhorizontal line  edge  edge  malloc sizeof edge  if vl y  v2 y   up going edge  makeedgerec vl v2 ynext i cnt pts  edge edges  else  down going edge   inakeedgerec v2 vl yprev edge edges   yprev  vi y vi  v2  void buildactivelist int scan edge  active edge  edges      edge  p  q  p  edges scan  next while p  q  p next insertedge active p  p    void fillscan int scan edge  active  edge  pl  p2 int i  pl  active next while pl   p2  pl next  for pl xintersect p2 xintersect     seupixel lint i scani   pl  p2 next      void deleteafter edge  q  edge  p  q next  q rext  p next tree p    delete completed edges update xintersect field for others  void updateactivelist int scan edge  active   edge  g  active  p  active next   while p  i if scan  p yupper  p  p mext deleteatrer q    else  p xtntersect  p xintersect  p dxper3can q 3p p  p next  a void rescrtactivelist edge  active  edge  g  p  active next  active next  null while p  q  popnext insertedge active p  p    void seanfill int cnt depr  pts   edge  edges window_height   active int i scan  for i i wincow_height i   edges i   edge  malloc sizeof edge  edges ij next  null buildedgelist cnt pts edges  active  edge  malloc sizeof tedge   active next  null  for scan scan window_height scan   buildactivelist scan active edges  if active next  fillscan scan active  updateactivelist scan active  vesortacctivebist active      free edge records that have been malloc ed      inside outside tests area filling algorithms and other graphics processes often need to identify inte rior regions of objects so far we have discussed area filling only in terms of stan dard polygon shapes in elementary geometry a polygon is usually defined as having no self intersections examples of standard polygons include triangles rectangles octagons and decagons the component edges of these objects are joined only at the vertices and otherwise the edges have no common points in the plane identifying the interior regions of standard polygons is generally a straightforward process but in most graphics applications we can specify any sequence for the vertices of a fill area including sequences that produce intersect ing edges as in  for such shapes it is not always clear which regions of the xy plane we should call interior and which regions we should designate as exterior to the object graphics packages normally use either the odd even rule or the nonzero winding number rule to identify interior regions of an object  we apply the odd even rule also called the odd parity rule or the even odd rule by conceptually drawing a line from any position p to a distant point outside the coordinate extents of the object and counting the number of edge crossings along the line if the number of polygon edges crossed by this line is odd then p is an interior point otherwise p is an exterior point to obtain an ac curate edge count we must be sure that the line path we choose does not inter sect any polygon vertices  a shows the interior and exterior regions obtained from the odd even rule for a self intersecting set of edges the scan line polygon fill algorithm discussed in the previous section is an example of area fill ing using the odd even rule  another method for defining interior regions is the nonzero winding num ber rule which counts the number of times the polygon edges wind around a particular point in the counterclockwise direction this count is called the wind ing number and the interior points of a two dimensional object are defined to be a  a extenor de extenor  a j  tc  ee     eg interior  menor  ve  e e  ay a f  odd even rule nonzero winding number rule  a  b   identifying interior and exterior regions for a self intersecting polygon  chapter output primitives those that have a nonzero value for the winding number we apply the nonzero winding number rule to polygons by initializing the winding number tu c and again imagining a line drawn from any position p to a distant point bu yor the coordinate extents of the object the line we choose must not pass through any vertices as we move along the line from position p to the distant point we count the number of edges that cross the line in each direction we add  to the winding number every time we intersect a polygon edge that crosses the line from right to left and we subtract every time we intersect an edge that crosses from left to right the final value of the winding number after all edge crossings have been counted determines the relative position of p if the winding number is nonzero p is defined to be an interior point otherwise p is taken to be an exterior point  b shows the interior and exterior regions defined by the nonzero winding number rule for a self intersecting set of edges for standard palygons and other simple shapes the nonzero winding number nule and the odd even tule give the same results but for more complicated shapes the two methods may yield different interior and exterior regions as in the example of   one way to determine directional edge crossings is to take the vector cross product of a vector u along the line from p to a distant point with the edge vector e for each edge that crosses the line if the z component of the cross product u x e fora particular edge is positive that edge crosses from right to left and we add to the winding number otherwise the edge crosses from left to right and we subtract from the winding number an edge vector is calculated by sub tracting the starting vertex position for that edge from the ending vertex position for example the edge vector for the first edge in the example of  is ess  vg  va where v and v5 represent the point vectors for vertices a and b a somewhat simpler way to compute directional edge crossings is to use vector dot products instead of cross products to do this we set up a vector that is perpendicular to u and that points from right to left as we look along the line from p in the direction of u if the components of u are u  u  then this perpendicular to u has compo nents  u  u  appendix a  now if the dot product of the perpendicular and an edge vector is positive that edge crosses the line from right to left and we add to the winding number otherwise the edge crosses the line from left to right and we subtract from he winding number  some graphics packages use the nonzero winding number rule to imple ment area filling since it is more versatile than the odd even rule in general ob jects can be defined with multiple unconnected sets of vertices or disjoint sets of closed curves and the direction specified for each set can be used to define the interior regions of objects examples include characters such as letters of the al phabet and punctuation symbols nested polygons and concentric circles or el lipses for curved lines the odd even rule is applied by determining intersec tions with the curve path instead of finding edge intersections similarly with the nonzero winding number rule we need to calculate tangent vectors to the curves at the crossover intersection points with the line from position p  sean line fill of curved boundary areas in general scan line fill of regions with curved boundaries requires more work than polygon filling since intersection calculations now involve nonlinear boundaries for simple curves such as circles or ellipses performing a scan line fill is a straightforward process we only need to calculate the two scan line inter sections un opposite sides of the curve this is the same as generating pixel posi tions along the curve boundary and we can do that with the midpoint method then we simply fill in the horizontal pixel spans between the boundary points on opposite sices of the curve symmetries between quadrants and between octants for circles are used to reduce the boundary calculations  similar methods can be used to generate a fill area for a curve section an elliptical arc for example can be filled as in  the interior region is bounded by the ellipse section and a straight line segment that closes the curve by joining the beginning and ending positions of the arc symmetries and incre mental calculations are exploited whenever possible to reduce computations  boundary fill algorithm another approach to area filling is to start at a point inside a region and paint the interior outward toward the boundary if the boundary is specified in a single color the fill algorithm proceeds outward pixel by pixel until the boundary color is encountered this method called the boundary fill algorithm is particularly useful in interactive painting packages where interior points are easily selected using a graphics tablet or other interactive device an artist or designer can sketch a figure outline select a fill color or pattern from a color menu and pick an interior point the system then paints the figure interior to display a solid color region with no border  the designer can choose the fill color to be the same as the boundary color  a boundary fill procedure accepts as input the coordinates of an interior point x y  a fill color and a boundary color starting from x y  the procedure tests neighboring positions to determine whether they are of the boundary color if not they are painted with the fill color and their neighbors are tested this process continues until all pixels up to the boundary color for the area have been tested both inner and outer boundaries can be set up to specify an area and some examples of defining regions for boundary fill are shown in    shows two methods for proceeding to neighboring pixels from the current test position in  a  four neighboring points are tested these are the pixel positions that are right left above and below the current pixel areas filled by this method are called connected the second method shown in  b  is used to fill more complex figures here the set of neighboring posi tions to be tested includes the four diagonal pixels fill methods using this ap proach are called connected an connected boundary fill algorithm would correctly fill the interior of the area defined in  but a connected bound ary fill algorithm produces the partial fill shown    example color boundaries for a boundary fill procedure   interior fill of an elliptical arc   fill methods applied toa connected area a and to an connected area b  open circles represent pixels to be tested from the current test position shown as a solid color  the following procedure illustrates a recursive method ror filling a connected area with an intensity specified in parameter fill up to a boundary color specified with parameter boundary we can extend this procedure to fill an connected region by including four additional statements to test diagonal positions such as x  y    void boundaryfill4 int x int y int fill int boundary   int current  current  getpixel x y  if  current  boundary   current  fill   setcolor fill  setpixel x y  boundaryfill4 x l y fill boundary  boundaryfill4 x y fill boundary  boundaryfilld x y l fill boundary  boundaryfill4 x y fill boundary      __ recursive boundary fill algorithms may not fill regions correctly if some in terior pixels are already displayed in the fill color this occurs because the algo rithm checks next pixels both for boundary color and for fill color encountering a pixel with the fill color can cause a recursive branch to terminate leaving other interior pixels unfilled to avoid this we can first change the color of any interior pixels that are initially set to the fill color before applying the boundary fill pro cedure  also since this procedure requires considerable stacking of neighboring points more efficient methods are generally employed these methods fill hori zontal pixel spans across scan lines instead of proceeding to connected or connected neighboring points then we need only stack a beginning position for each horizontal pixel span instead of stacking all unprocessed neighboring positions around the current position starting from the initial interior point with this method we first fill in the contiguous span of pixels on this starting scan line then we locate and stack starting positions for spans on the adjacent scan lines where spans are defined as the contiguous horizontal string of positions  start pasition al bi   the area defined within the color boundary a is only partially filled in b using a connected boundary fill algorithm  a  b  c  d  filled pixel spans stacked positions  s668       e00ec0e e    e0e  e o86 eeee       2osogh feohsco 2eo e s06      s635    ay  ee   8666     ssusossesose ari  we  om    oe    sbcgs6ccc008  ge q      a        sseeeeeesoece   boundary fill across pixel spans for a connected area  a the filled initial pixel span showing the position of the initial point open circle and the stacked positions for pixel spans on adjacent scan lines  b filled pixel span on the first scan line above the initial scan line and the current contents of the stack  c filled pixel spans on the first two scan lines above the initial scan line and the current contents of the stack  ad completed pixel spans for the upper right portion of the defined region and the remaining stacked positions to be processed   an area defined within multiple color boundaries  bounded by pixels displayed in the area border color at each subsequent step we unstack the next start position and repeat the process  an example of how pixel spans could be filled using this approach is illus trated for the connected fill region in  in this example we first process scan lines successively from the start line to the top boundary after all upper scan lines are processed we fill in the pixel spans on the remaining scan lines in order down to the bottom boundary the leftmost pixel position for each hori zontal span is located and stacked in left to right order across successive scan lines as shown in  in a of this figure the initial span has been filled and starting positions and for spans on the next scan lines below and above are stacked in  b  position has been unstacked and processed to pro duce the filled span shown and the starting pixel position for the single span on the next scan line has been stacked after position is processed the filled spans and stacked positions are as shown in  c  and  d shows the filled pixels after processing all spans in the upper right of the specified area position is next processed and spans are filled in the upper left of the region then position is picked up to continue the processing for the lower scan lines  flood fill algorithm sometimes we want to fill in or recolor an area that is not defined within a sin gle color boundary  shows an area bordered by several different color regions we can paint such areas by replacing a specified interior color instead of searching for a boundary color valuc this approach is called a flood fill algo rithm we start from a specified interior point x y and reassign all pixel values that are currently set to a given interior color with the desired fill color if the area we want to paint has more than one interior color we can first reassign pixel val ues so that all interior points have the same color using either a connected or connected approach we then step through pixel positions until all interior points have been repainted the following procedure flood fills a connected re gion recursively starting from the input position  void floodfill4 int x int y int fillcoler int oldcolor  if getpixel x y   oldcolor   setcolor fillcolor  setpixel x y  floodfill4 x y fillcolor oldcolor  floodfill4d x y fillcolor oldcolor  floodfill4d x y l1 fillcolor oldcolor  floodfill4 x y fillcolor oldcolor   we can modify procedure f loodfil14 to reduce the storage requirements of the stack by filling horizontal pixel spans as discussed for the boundary fill al gorithm in this approach we stack only the beginning positions for those pixel spans having the value oldcolor  the steps in this modified flood fill algo rithm are similar to those illustrated in  for a boundary fill starting at the first position of each span the pixel values are replaced until a value other than oldcolor is encountered  we display a filled polygon in phigs and gks with the function fillarea n wevertices  the displayed polygon area is bounded by a series of n straight line segments connecting the set of vertex positions specified in wcvertices these packages do not provide fill functions for objects with curved boundaries  implementation of the 111area function depends on the selected type of interior fill we can display the polygon boundary surrounding a hollow interior or we can choose a solid color or pattern fill with no border for the display of the polygon for solid fill the i11area function is implemented with the scan line fill algorithm to display a single color area the various attribute options for dis playing polygon fill areas in phigs are discussed in the next chapter  another polygon primitive available in phigs is 111areaset this func tion allows a series of polygons to be displayed by specifying the list of vertices for each polygon also in other graphics packages functions are often provided for displaying a variety of commonly used fill areas besides general polygons some examples are fillkectangle fillcire e fillcirclearc fill ellipse and fill llipsearc  the cell array is a primitive that allows users to display an arbitrary shape de fined as a two dimensional grid pattern a predefined matrix of color values is mapped by this function onto a specified rectangular coordinate region the phigs version of this function is cellarray wwepoints n m colorarray where colorarray is the n by m matrix of integer color values and wepoints lists the limits of the rectangular coordinate region  min yaun and ona ymar   shows the distribution of the elements of the color matrix over the co ordinate rectangle each coordinate cell in  has width max  xgun n and height umax  yeun m pixel color values are assigned according to the relative positions of the pixel center coordinates if the center of a pixel lies within one of the n by m coordinate cells that pixel is assigned the color of the corresponding element in the matrix colorarray  letters numbers and other characters can be displaved in a variety of sizes and stvles the overall design style for a set or family of characters is called a type  section 12 fill area functions    y  view  a rows ymn m columns  xemun ine x  mapping an n by m cell array into a rectangular coordinate region  face today there are hundreds of typefaces available for computer applications examples of a few common typefaces are courier helvetica new york palatino and zapf chancery originally the term font referred to a set of cast metal char acter forms in a particular size and format such as point courier italic or point palatino bold now the terms font and typeface are often used inter changeably since printing is no longer done with cast metal forms  typefaces or fonts can be divided into two broad groups serif and sans serif serif type has small lines or accents at the ends of the main character strokes while sans serif type does not have accents for example the text in this book is set in a serif font palatino  but this sentence is printed in a sans serif font optima  serif type is generally more readable that is it is easier to read in longer blocks of text on the other hand the individual characters in sans serif type are easier to recognize for this reason sans serif type is said to be more legible since sans serif characters can be quickly recognized this typeface is good for labeling and short headings  two different representations are used for storing computer fonts a simple method for representing the character shapes in a particular typeface is to use rectangular grid patterns the set of characters are then referred to as a bitmap font or bitmapped font  another more flexible scheme is to describe character shapes using straight line and curve sections as in postscript for example in this case the set of characters is called an outline font  illustrates the two methods for character representation when the pattern in  a is copied to an area of the frame buffer the bits designate which pixel positions are to be displayed on the monitor to display the character shape in  b  the interior of the character outline must be filled using the scan line fill proce dure section 11  bitmap fonts are the simplest to define and display the character grid only needs to be mapped to a frame buffer position in general however bitmap fonts require more space because each variation size and format must be stored in a font cache it is possible to generate different sizes and other variations such as bold and italic from one set but this usually does not produce good results  in contrast to bitmap fonts outline fonts require less storage since each vari ation does not require a distinct font cache we can produce boldface italic or different sizes by manipulating the curve definitions for the character outlines but it does take more time to process the outline fonts because they must be scan converted into the frame buffer  a character string is displayed in phigs with the following function  text woepoint string  parameter string is assigned a character sequence which is then displayed at coordinate position wcpoint  x y  for example the statement text wcpoint  population distribution   along with the coordinate specification for wcpoint could be used as a label on a distribution graph  just how the string is positioned relative to coordinates x y is a user op tion the default is that x y sets the coordinate location for the lower left corner of the first character of the horizontal string to be displayed other string orienta tions such as vertical horizontal or slanting are set as attribute options and will be discussed in the next chapter  another convenient character function in phigs is one that places a desig nated character called a marker symbol at one or more selected positions this function is defined with the same parameter list as in the line function  polymarker n wepoints  a predefined character is then centered at each of the n coordinate positions in the list wcpoints the default symbol displayed by polymarker depends on the      tp vt tyr rpayoa oy  tyooy a 1tija oft 1tpo o  t4110 oq1rryyyrpryrpojo o7tfrpoy o tyraalse oo  t oyoj rss a ti ty ypr1p aqa o o o oysalo ola       a  b    the letter b represented in a with an by bilevel bitmap pattem and in b with an outline shape defined with straight line and curve segments  section 14 character generation     x sequence of data values plotted of 100 with the pol ymarker function  particular implementation but we assume for now that an asterisk is to be used  illustrates plotting of a data set with the statement polymarker  wcpoints  summary the output primitives discussed in this chapter provide the basic tools for con structing pictures with straight lines curves filled areas cell array patterns and text examples of pictures generated with these primitives are given in figs 50 and 51  three methods that can be used to plot pixel positions along a straight line path are the dda algorithm bresenham s algorithm and the midpoint method for straight lines bresenham s algorithm and the midpoint method are identical and are the most efficient frame buffer access in these methods can also be per formed efficiently by incrementally calculating memory addresses any of the line generating algorithms can be adapted to a parallel implementation by parti tioning line segments  circles and ellipses can be efficiently and accurately scan converted using midpoint methods and taking curve symmetry into account other conic sec tions parabolas and hyperbolas can be plotted with similar methods spline curves which are piecewise continuous polynomials are widely used in design applications parallel implementation of curve generation can be accomplished by partitioning the curve paths  to account for the fact that displayed lines and curves have finite widths we must adjust the pixel dimensions of objects to coincide to the specified geo metric dimensions this can be done with an addressing scheme that references pixel positions at their lower left corner or by adjusting line lengths  filled area primitives in many graphics packages refer to filled polygons a common method for providing polygon fill on raster systems is the scan line fill algorithm which determines interior pixel spans across scan lines that intersect the polygon the scan line algorithm can also be used to fill the interior of objects with curved boundaries two other methods for filling the interior regions of ob jects are the boundary fill algorithm and the flood fill algorithm these two fill procedures paint the interior one pixel at a time outward from a specified inte rior point  the scan line fill algorithm is an example of fillirg object interiors using the odd even rule ta locate the interior regions other methods for defining object in teriors are also useful particularly with unusual self intersecting objects a com mon example is the nonzero winding number rule this rule is more flexible than the odd even rule for handling objects defined with multiple boundaries    a data plot generated with straight line segments a curve circles or markers  and text  couftesy of  wolfram research inc  the maker of an electrical diagram drawn  mathematica  with straight line sections  circles filled rectangles and text  courtesy of wolfram research inc  the maker of mathematica  additional primitives available in graphics packages include cell arrays character strings and marker symbols cell arrays are used to define and store color patterns character strings are used to provide picture and graph labeling and marker symbols are useful for plotting the position of data points  table lists implementations for some of the output primitives discussed in this chapter  table output primitive implementations  typedef struct  float x y  wept2 defines a location in dimensionai world coordinates  ppolyline int n wept2  pts draw a connected sequence of n line segments specified in pts  pcircle wept2 center float r draw a circle of radius x at center  pfillarea int n wcpt2  pts draw a filled polygon with n vertices specified in pts  pcellarray wept2  pts int n int m  int colors map an n by m array of colors onto a rectangular area defined by pts  ptext wept2 position char  txt draw the character string txt at position  ppolymarker int n wept2  pts draw a collection of n marker symbols at pts  chapter applications  output primitives here we present a few example programs illustrating applications of output primitives functions listed in table are defined in the header file graph ics h along with the routines opengraphics closegraphics setcolor and setbackground  the first program produces a line graph for monthly data over a period of one year output of this procedure is drawn in  this data set is also used by the second program to produce the bar graph in     include stdio h  include graphics h  define window_width  define window_height   amount of space to leave on each side of the chart   define margin_width 05  window_width  define n_data typedef enum  jan feb mar apr may jun jul aug sep oct nov dec  months  char  monthnames n_data    jan  feb  mar  apr  may  jun  jul  bug  sep  oct  now  dec   int readdata char  inpile float  data   int fileerror  false  file  fp  months month  if  fp  fopen infile  r    null fileerror  true else  for month  jan month  dec month  fscanf fp  tf  dataf month  fclose fp    return  fileerror    void linechart float  data  wept2 datapos n_data  labelpos months m float mwidth  window_width   margin_width  n_data int charcbottom   window_height int offset  05  window_height   space between data and labels  int labellength    assuming fixed width pixel characters   labelpos y  chartbettom  for m  jan m  dec m     calculate x and y positions for data markers  datapos m x  margin_width  m  mwidth   mwidth datapos m y  chartbottom  offset  data m   shift the label to the left by one half its length  labelpos x  datapos m x   labellength ptext lahelpos monthnames m    ppolyline n_data datapos  ppolymarker n_data datapos    summary jan feb mar apr may jun jul aug sep oct nov dac  a line plot of data points output by the linechart procedure   void main int argc char  argv   t float data n_data  int dataerror  false long windeowid  if arge   fprintf stderr  usage  datafilename n  argv  exit     dataerror  readdata argv  data  if dataerror  fprintf stderr  s error can t read file s n  argv  exit     windewid  opengraphics  argv window_width window_height   setebackground white  setcolor black  linechart data  sleep   closegraphics windowid   void barchart float  data   wept2 datapos  labelpos months m  float x mwidth  window_width   margin_width  n_data  int chartbottom   window _height  int offset  05  window_height   space between data and labels   int labellength    assuming fixed width b pixel characters    labelpos y  chartbottom  for m  jan m  dec m      find the center of this month s bar    margin_width  m  mwidth   mwwidth   shift the label to the left by one half its assumed length  labelpos x  x   labellength jan feb mar apr may jun jul aug sep oct nov dec  a bar chart plot output by the barchart procedure  ptext labelpos monthnames m   get the coordinates for this month s bar   datafos 0i x  datapos x  x   labellength datafos l x  datapos x  x   laseilength datafos ql y  datapos  y  chartbottom  offset datafos y  datapos  chartbottom  offset  datal m  prillarea  datapos    kk km  pie charts are used to show the percentage contribution of individual parts to the whole the next procedure constructs a pie chart with the number and rel ative size of the slices determined by input a sample output from this procedure appears in    rdefine two_pt 28 void piechart moat  data  wept2 pts  center float radius  window_hetght  float newslice total  lastslice  months month  center x  window_width   center y  window_height  pcircle center radius  for month  jan month  dec month  total  datafmonth  pts ii x  center x pts y  center y  for month  jan month  dec montht   newslice  twolpl  datal month  total  jlastslice ptsi l x  center x  radius  cosf newslice  pts l y  center y  radius  sinf newslice  ppolyline  pts  lastslice  newslice   lo  some variations on the circle equations are output by this next procedure the shapes shown in  are generated by varying the radius r of a circle depending on how we vary r we can produce a spiral cardioid limacon or other similar figure  include stdio h  include math a  include graphics h  define two_pi 28  limacon equacion is r  a  ecs theta  b cardioid is the same with a  b sor a   cos theta  a typedet enum  spiral cardioid threeleat tourleaf limacon  fig void drawcurlyfig fig figure wcpt2 pos int  4p  float r theta  dtheta   float pl0l int npoints  int ceilf two_pi  p  i wept2  pe if  pt  iwept2  malloc npeints  sizeof wept2   null  fprintf stderr  couldn t ailocate pcints n i recur   set first point for figure  pt o y  pos y switch figure  ease spiral prl o x  pos x break case limacon pt o x  pos x  plo  e 1l  break case cardicid prlo x  pos x  pio   break case threeleaf pt  x  pos x  pl0  break case fourleaf pt 0j x  pos x  pl0  break  npoints  i while theta  two_pi  switch figure  case spival r p  theta break case limacon r p  cosf theta  pil  break case cardioid xr  p    cosf treta  break case threeleaf r  p  cosf  theta  break case fourleaf xr  p  cosf  theta  break   pt npoints x  pos x  r  cosf thetui pt npoints y  pos y  r  sinf theta npointst  theta  dtheta  ppolyline nkoints pt  free pt   void main int arge char  argv    output generated from the piechart procedure  oop   curved figures produced with the drawshape procedure  long windowid  opengraphics  argv   fig   center positions for each figure   wept2 center            parameters to define each figure first four need one parameter fifth figure llimacon needs two   int p      setbackground white  setcolor black  for f spiral f limacon        f   drawcurlyfig f center f  plf   sleep  closegraphics windowid   references information on bresenham s algorithms can be found in bresenham   for mid point methods see kappel  parallel methods for generating lines and circles are discussed in pang  and in wright   additional programming examples and information on phigs primitives can be found in howard et al   hopgood and duce  gaskins  and blake  for information on gks output primitive functions see hopgood et al  and enderle kansy and pfaff   exercises   implement the poly ine function using the dda algorithm given any number n of input points a single point is to be plotted when n   extend bresenham s line algorithm to generate lines with any slope taking symmetry between quadrants into account implement the poly ine function using this algorithm as a routine that displays the set of straight lines connecting the n input points for n  the routine displays a single point       10  11  14 15  16  17  18  19  devise a consistent scheme for implementing the polyline function for any set of input line endpoints using a modified bresenham line algorithm so that geometric magnitudes are maintained section 10  use the midpoint method to derive decision parameters for generating points along a straight line path with slope in the range  m  show that the midpoint decision parameters are the same as those in the bresenham iine algorithm  use the midpoint method to derive decision parameters that can be used to generate straight line segments with any slope  set up a parallel version of bresenham s line algorithm for slopes in the range  m  set up a parallel version of bresenham s algorithm for straight lines of any slope suppose you have a system with an inch by inch video monitor that can display pixels per inch if memory is organized in one byte words the starting frame buffer address is and each pixel is assigned one byte of storage what is the frame buffer address of the pixel with screen coordinates  yl  suppose you have a system with an inch by inch video monitor that can display pixels per inch if memory is organized in one byte words the starting frame buffer address is and each pixel is assigned bits of storage what is the frame buffer address ior addresses of the pixel with screen coordinates x y  implement the set pixel routine in bresenham s ine algorithm using iterative tech niques for calculating frame buffer addresses section  revise the midpoint circle algorithm to display sv that geometric magnitudes are maintained section 10  set up a procedure for a parallel implementation of the midpoint circle algorithm  derive decision parameters for the midpoint ellipse algorithm assuming the start posi tion is r  and points are to be generated along the curve path in counterclockwise order  set up a procedure for a parallel implementation of the midpoint ellipse algorithm  devise an efficient algorithm that takes advantage of symmetry properties to display a sine function  devise an efficient algorithm taking function symmetry into account to display a plot of damped harmonic motion  y ae sin wx  where w is the angular frequency and is the phase of the sine function plot y as a function of x for several cycles of the sine function or until the maximum amplitude is reduced to a  using the midpoint method and taking symmetry into account develop an efficient algorithm for scan conversion of the following curve over the interval  x   i yeax 12 use the midpoint method and symmetry considerations to scan convert the parabola y  x  over the interval  x  use the midpoint method and symmetry considerations to scan convert the parabola xe y for the interval  y  exercises   20  21  22 26 27  28 29  30 31  34 set up a midpoint algoritiim taking symmetry considerations into account to scan convert any paraboia of the form y axt b with input values for parameters a b and the range of x write a program to scan convert the interior of a specified ellipse into a solid color devise an algorithm for determining interior regions for any input set of vertices using the nonzero winding rumber rule and cross product calculations to identify the direc tion of edge crossings  devise an algorithm for determining interior regions for any input set of vertices using the nonzero winding number rule and dot product calculatians to identify the direc tion of edge crossings   write a procedure for filling the interior of any specificd set of polygon vertices using the nonzero winding number rule to identify interior regions   modify the boundary fill algorithm for a connected region to avoid excessive stack  ing by incorporating scan line methods write a boundary fill procedure to fill an connected region explain how an ellipse displayed with the midpoint method could be properly filled with a boundary fill algorithm  develop and implement a flood fill algorithm to fill the interior of any specified area write a routine to implement the text function write a routine to implement the polymarker function write a program to display a bar graph using the polyline function input to the program is to include he data points and the labeling required for the x and y axes the data points are to be scaled by the program so that the graph is displayed across the full screen area   write a program to display a bar graph in any selected screen area use the poly  line function to draw the bars  write a grocedure to display a line graph for any input set of data points in any se lected area of the screen with the input data set scaled to fit the selected screen area data points are to be displayed as asterisks joined with straight line segments and the x and y axes are to be labeled according te input specifications  instead of asterisks small circles or some other symbols could be used to plot the data points  using a circle function write a routine to display a pie chart with appropriate label ing input to the routine is to include a data set giving the distribution of the data over some set of intervals the name of the pie chart and the names of the intervals each section labet is to be displayed outside the boundary of the pie chart near the corre sponding pie section hapter      attributes of output primitives     i n general any parameter that affects the way a primitive is to be displayed is referred to as an attribute parameter some attribute parameters such as color and size determine the fundamental characteristics of a primitive others specify how the primitive is to be displayed under special conditions examples of attributes in this class include depth information for three dimensional view ing and visibility or detectability options for interactive object selection pro grams these special condition attributes will be considered in later chapters here we consider only those attributes that control the basic display propertics of primitives without regard for special situations for example lines can be dot ted or dashed fat or thin and blue or orange areas might be filled with one color or with a multicolor pattern text can appear reading from left to right slanted diagonally across the screen or in vertical columns individual characters can be displayed in different fonts colors and sizes and we can apply intensity variations at the edges of objects to smooth out the raster stairstep effect  one way to incorporate attribute options into a graphics package is to ex tend the parameter list associated with each output primitive function to include the appropriate attributes a line drawing function for example could contain parameters to set color width and other properties in addition to endpoint coor dinates another approach is to maintain a system list of current attribute values separate functions are then included in the graphics package for setting the cur rent values in the attribute list to generate an output primitive the system checks the relevant attributes and invokes the display routine for that primitive using the current attribute settings some packages provide users with a combi nation of attribute functions and attribute parameters in the output primitive commands with the gks and phigs standards attribute settings are accom plished with separate functions that update a system attribute list  basic attributes of a straight line segment are its type its width and its color in some graphics packages lines can also be displayed using selected pen or brush options in the following sections we consider how line drawing routines can be modified to accommodate various attribute specifications line type possible selections for the line type attribute include solid lines dashed lines and dotted lines we modify a line drawing algorithm to generate such lines by setting the length and spacing of displayed solid sections along the line path a dashed line could be displayed by generating an interdash spacing that is equal to the length of the solid sections both the length of the dashes and the interdash spacing are often specified as user options a dotted line can be displayed by generating very short dashes with the spacing equal to or greater than the dash section size similar methods are used to produce other line type variations line attributes to set line type attributes in a phigs application program a user invokes the function setlinetype 1t where parameter is assigned a positive integer value of  or to generate lines that are respectively solid dashed dotted or dash dotted other values for the line type parameter 1t could be used to display variations in the dot dash patterns once the line type parameter has been set in a phigs application pro gram al subsequent line drawing commands produce lines with this line type the following program segment illustrates use of the linetype command to display the data plots in    include stdio h  include graphics h  define margin_width 05  window_width int readdata char  infile float  data if int filebrror  false  file  fp  int month  if  fp  fopen infile  r    null fileerror  true else  for month month month t  fscanf fp  f  data month  fclose fp   return fileerror   void chartdata float  data plinetype linetype   wept2 pts i2  float monthwidth  window_width   margin_width   int i  for  i i   pts i x  margin_width  i  monthwidth   monthwidth pts i y  data ij t psetlinetype linetype  ppolyline  pts   int main int argc char  argv   long windowid  opengraphics  argv window_width window_height  float data  setbackground white   setccolor blue  readdata   data datal960  data  chartdata data solid  readdata   data datal970  data  chartdata data dashed  readdata   data datal980  data  chartdata data dotted  sleep   closegraphics windowid   a  ees80e b   unequal length dashes displayed with the same number of pixels    plotting three data sets with three differen line types as output by the chart data procedure  raster line algorithms display line type attributes by plotting pixel spans for the various dashed dotted and dot dashed patterns the line drawing proce dure outputs sections of cuntiguous pixels along the line path skipping over a number of intervening pixels between the solid spans pixel counts for the span length and interspan spacing can be specified in a pixel mask which is a string containing the digits  and to indicate which positions to plot along the line path the mask for instance could be used to display a dashed line with a dash length of four pixels and an interdash spacing uf three pixels on a bilevel system the mask gives the bit values that should be loaded into the frame buffer along the line path to display the selected line type  plotting dashes with a fixed number of pixels results in unequal length dashes for different line orientations as illustrated ir  both dashes shown are plotted with four pixels but the diagonal dash 1s longer by a factor of v2 for precision drawings dash lengths should remain approximately constant for any line orientation to accomplish this we can adjust the pixel counts for the solid spans and interspan spacing according to the line slope in  we can dis play approximately equal length dashes by reducing the diagonal dash to three pixels another method for maintaining dash length is to treat dashes as individ ual line segments endpoint coordinates for each dash are located and passed to the line routine which then calculates pixel positions along the dash path  line width implementation of line width options depends on the capabilities of the output device a heavy line on a video monitor could be displaved as adjacent parallel lines while a pen plotter nught require pen changes as with other phigs attrib utes a line width command is used to set the current line width value in the at tribute list this value is then used by line drawing algorithms to control the thickness of lines generated with subsequent output primitive commands we set the line width attribute with the command  setlinew  inscalefactor lw  line width parameter i is assigned a positive number to indicate the relahve width of the line to be displayed a value of  specifies a standard width line on a pen plotter for instance a user could set lw to a value of to plot a line whose width is half that of the standard line values greater than produce lines thicker than the standard for raster implementation a standard width line is generated with single pixels at each sample position as in the bresenham algorithm other width lines are displayed as positive integer multiples of the standard line by plotting addi tional pixels along adjacent parallel line paths for lines with slope magnitude less than we can modify a line drawing routine to display thick lines by plot ting a vertical span of pixels at each x position along the line the number of pix els in each span is set equal to the integer magnitude of parameter 1w in  we plot a double width line by generating a parallel line above the original line path at each x sampling position we calculate the corresponding y coordinate and plot pixels with screen coordinates x y and x y  we display lines with lw  by alternately plotting pixels above and below the single width line path  for lines with slope magnitude greater than we can plot thick lines with horizontal spans alternately picking up pixels to the right and left of the line path this scheme is demonstrated in  where a line width of is plotted with horizontal pixel spans  although thick lines are generated quickly by plotting horizontal or vertical pixel spans the displayed width of a line measured perpendicular to the line path is dependent on its slope a line will be displayed thinner by a factor of compared to a horizontal or vertical line plotted with the samelength pixel spans  another problem with implementing width options using horizontal or vertical pixel spans is that the method produces lines whose ends are horizontal or vertical regardless of the slope of the line this effect is more noticeable with very thick lines we can adjust the shape of the line ends to give them a better ap pearance by adding line caps   one kind of line cap is the butt cap ob tained by adjusting the end positions of the component parallel lines so that the thick line is displayed with square ends that are perpendicular to the line path if the specified line has slope m the square end of the thick line has slope m another line cap is the round cap obtained by adding a filled semicircle to each butt cap the circular arcs are centered on the line endpoints and have a diameter equal to the line thickness a third type of line cap is the projecting square cap here we simply extend the line and add butt caps that are positioned one half of the line width beyond the specified endpoints  other methods for producing thick lines include displaying the line as a filled rectangle or generating the line with a selected pen or brush pattern as dis cussed in the next section to obtain a rectangle representation for the line   double wide raster line with slope m  generated with vertical pixel spans  section line attributes     x  r x   c   oe      raster line with slope m   and line width parameter lw  plotted with horizontal pixel spans  boundary we calculate the position of the rectangle vertices along perpendicu jars to the line path so that vertex coordinates are displaced from the line end points by one half the line width the rectangular line then appears as in fig a  we could then add round caps to the filled rectangle or extend its length to display projecting square caps  generating thick polylines requires some additional considerations in gen eral the methods we have considered for displaying a single line segment will not produce a smoothly connected series of line segments displaying thick lines using horizontal and vertical pixel spans for example leaves pixel gaps at the boundaries between lines of different slopes where there is a shift from horizon tal spans to vertical spans we can generate thick polylines that are smoothly joined at the cost of additional processing at the segment endpoints  shows three possible methods for smoothly joining two line segments a miter join is accomplished by extending the outer boundaries of each of the two lines until they meet a round join is produced by capping the connection between the two segments with a circular boundary whose diameter is equal to the line  a  b ic  thick lines drawn with a butt caps  b round caps and c projecting square caps  a  b tc   thick line segments connected with a miter join  b round join and c bevel join  width and a bevel join is generated by displaying the line segments with butt caps and filling in the triangular gap where the segments meet if the angle be tween two connected line segments is very small a miter join can generate a long spike that distorts the appearance of the polyline a graphics package can avoid this effect by switching from a miter join to a bevel join say when any two con secutive segments meet at a small enough angle  pen and brush options with some packages lines can be displayed with pen or brush selections op tions in this category include shape size and pattern some possible pen or brush shapes are given in  these shapes can be stored in a pixel mask that identifies the array of pixel positions that are to be set along the line path for example a rectangular pen can be implemented with the mask shown in fig by moving the center or one corner of the mask along the line path as in  to avoid setting pixels more than once in the frame buffer we can sim ply accumulate the horizontal spans generated at each position of the mask and keep track of the beginning and ending x positions for the spans across each scan line  lines generated with pen or brush shapes can be displayed in various widths by changing the size of the mask for example the rectangular pen line in  could be narrowed with a rectangular mask or widened with a 4x4 mask also lines can be displayed with selected patterns by superimposing the pattern values onto the pen or brush mask some examples of line patterns are shown in  an additional pattern option that can be provided in a paint package is the display of simulated brush strokes  illustrates some patterns that can be displayed by modeling different types of brush strokes  line color when a system provides color or intensity options a parameter giving the cur rent color index is included in the list of system attribute values a polyline rou tine displays a line in the current color by setting this color value in the frame buffer at pixel locations along the line path using the set pixel procedure the number of color choices depends on the number of bits available per pixel in the frame buffer  we set the line color value in phigs with the function setpolylinecolourindex lc  section line auributes custom document brushes    ae     pen and brush shapes for line display  nonnegative integer values corresponding to allowed color choices are assigned to the line color parameter lc a line drawn in the background color is invisible and a user can erase a previously displayed line by respecifying it in the back ground color assuming the line does not overlap more than one background color area  an example of the use of the various line attribute commands in an applica  ions program is given by the following sequence of statements  setlinetype  setlinewictnsscalefactor  setpolylinetolourindex  polyline nl wcpointsl  setpolylinetclourindex  polyline n  wepoints   this program segment would display two figures drawn with double wide dashed lines the first is displayed in a color corresponding to code and the second in color     line    path a  bi   a a pixel mask for a rectangular pen and b the associated array of pixels displayed by centering the mask over a specified pixel position   x   _ generating a line with the pen shape of      curved lines drawn with a paint program using various shapes and patterns from left to right the brush shapes are square round diagonal line dot pattern and faded airbrush     a daruma doll a symbol of good fortune in japan drawn by computer artist koichi kozaki using a paintbrush system daruma dolls actually come without eyes one eye is painted in when a wish is made and the other is painted in when the wish comes true  courtesy of wacom technology inc   parameters for curve attributes are the same as those for line segments we can display curves with varying colors widths dot dash patterns and available pen or brush options methods for adapting curve drawing algorithms to accommo date attribute selections are similar to those for line drawing  the pixel masks discussed for implementing line type options are also used in raster curve algorithms to generate dashed and dotted patterns for example the mask produces the dashed circle shown in  we can generate the dashes in the various octants using circle symmetry but we must shift the pixel positions to maintain the correct sequence of dashes and spaces as we move from one octant to the next also as in line algorithms pixel masks display dashes and interdash spaces that vary in length according to the slope of the curve if we want to display constant length dashes we need to adjust the num ber of pixels plotted in each dash as we move around the circle circumference in stead of applying a pixel mask with constant spans we plot pixels along equal angular arcs to produce equal length dashes  raster curves of various widths can be displayed using the method of hon zontal or vertical pixel spans where the magnitude of the curve slope is less than we plot vertical spans where the slope magnitude is greater than we plot horizontal spans  demonstrates this method for displaying a circular arc of width in the first quadrant using circle symmetry we generate the circle path with vertical spans in the octant from x  to x  y and then reflect pixel positions about theline y  x to obtain the remainder of the curve shown circle sections in the other quadrants are obtained by reflecting pixel positions in the first quadrant about the coordinate axes the thickness of curves displayed with section this method is again a function of curve slope circles ellipses and other curves curve attributes will appear thinnest where the slope has a magnitude of another method for displaying thick curves is to fill in the area between two parallel curve paths whose separation distance is equal to the desired width we could do this using the specified curve path as one boundary and setting up the second boundary either inside or outside the original curve path this ap proach however shifts the original curve path either inward or outward de pending on which direction we choose for the second boundary we can maintain the original curve position by setting the two boundary curves at a distance of one half the width on either side of the specified curve path an example of this approach is shown in  for a circle segment with radius and a specified width of the boundary arcs are then set at a separation distance of on either side of the radius of to maintain the proper dimensions of the circular arc as discussed in section 10 we can set the radii for the concentric boundary arcs at r 14and r  although this method is accurate for generating thick circles in general it provides only an approximation to the true area of other thick       a dashed circular arc displayed with a dash span of pixels and an interdash spacing of pixels            circular are of width plotted with pixel spans      a circular arc of width and radius displayed by filling the region between two concentric ares   circular arc displayed with a rectangular pen  curves for example the inner and outer boundaries of a fat ellipse generated with this method do not have the same foci  pen or brush displays of curves are generated using the same techniques discussed for straight line segments we replicate a pen shape along the line path as illustrated in  for a circular arc in the first quadrant here the center of the rectangular pen is moved to successive curve positions to produce the curve shape shown curves displayed with a rectangular pen in this manner will be thicker where the magnitude of the curve slope is a uniform curve thickness can be displayed by rotating the rectangular pen to align it with the slope direc tion as we move around the curve or by using a circular pen shape curves drawn with pen and brush shapes can be displayed in different sizes and with superimposed patterns or simulated brush strokes  various color and intensity level options can be made available to a user de pending on the capabilities and design objectives of a particular system general purpose raster scan systems for example usually provide a wide range of colors while random scan monitors typically offer only a few color choices if any color options are numerically coded with values ranging from through the positive integers for crt monitors these color codes are then converted to intensity level settings for the electron beams with color plotters the codes could control ink jet deposits or pen selections  ina color raster system the number of color choices available depends on the amount of storage provided per pixel in the frame buffer also color informa tion can be stored in the frame buffer in two ways we can store color codes di rectly in the frame buffer or we can put the color codes in a separate table and use pixel values as an index into this table with the direct storage scheme when ever a particular color code is specified in an application program the corre sponding binary value is placed in the frame buffer for each component pixel in the output primitives to be displayed in that color a minimum number of colors can be provided in this scheme with bits of storage per pixel as shown in table each of the three bit positions is used to control the intensity level either on or off of the corresponding electron gun in an rgb monitor the leftmost bit controls the red gun the middle bit controls the green gun and the rightmost bit controls the blue gun adding more bits per pixel to the frame buffer increases the number of color choices with bits per pixel bits can be used for each gun this allows four different intensity settings for each of the three color guns and a total of color values are available for each screen pixel with a resolution of by a full color bit per pixel rgb system needs megabytes of storage for the frame buffer color tables are an alternate means for providing ex tended color capabilities to a user without requiring large frame buffers lower cost personal computer systems in particular often use color tables to reduce frame buffer storage requirements  color tables  illustrates possible scheme for storing color values in a color lookup table or video lookup table  where frame buffer values are now used as indices into the color table in this example each pixel can reference any one of the table positions and each entry in the table uses bits to specify an rgb color for the color code a combination green blue color is displayed for pixel location x y  systems employing this particular lookup table would allow table the eight color codes for a three bit per pixel frame buffer  stored color values displa yed color in frame buffer color code red green blue  black biue green cyan red magenta yellow white wa bw nm h seen hoo oo  o70 section color and grayscale levels chapter 4a user to select any colors for simultaneous display from a palette of nearly attributes of output primitives million colors compared to a full color system this scheme reduces the num  ber of simultaneous colors that can be displayed but it also reduces the frame buffer storage requirements to megabyte some graphics systems provide bits per pixel in the frame buffer permitting a user to select colors that could be used in each display  a user can set color table entries in a phigs applications program with the function  setcolourrepresentation ws ci colorptr  parameter ws identifies the workstation output device parameter ci specifies the color index which is the color table position number to for the exam ple in   and parameter colorptr points to a trio of rgb color values r g b each specified in the range from to an example of possible table entries for color monitors is given in   there are several advantages in storing color codes in a lookup table use of a color table can provide a reasonable number of simultaneous colors without requiring large frame buffers for most applications or different colors are sufficient for a single picture also table entries can be changed at any time allowing a user to be able to experiment easily with different color combinations in a design scene or graph without changing the attribute settings for the graph ics data structure similarly visualization applications can store values for some physical quantity such as energy in the frame buffer and use a lookup table to try out various color encodings without changing the pixel values and in visual ization and image processing applications color tables are a convenient means for setting color thresholds so that all pixel values above or below a specified threshold can be set to the same color for these reasons some systems provide both capabilities for color code storage so that a user can elect either to use color tables or to store color codes directly in the frame buffer  to red gun  ta green gun   to biue gun    a color lookup table with bits per entry accessed from a frame buffer with bits per pixel a value of stored at pixel position x y references the location in this table containing the value each bit segment of this entry controls the intensity level of one of the three electron guns in an rgb monitor        ca coler ci color  of   q         03 13 l   workstation color tables  grayscale with monitors that have no color capability color functions can be used in an ap plication program to set the shades of gray or grayscale for displayed primi tives numeric values over the range from to j can be used to specify grayscale levels which are then converted to appropriate binary codes for storage in the raster this allows the intensity settings to be easily adapted to systems with dif tering grayscale capabilities  table lists the specifications for intensity codes for a four level gray scale system in this example any intensity input value near 33 would be stored as the binary value in the frame buffer and pixels with this value would be displayed as dark gray if additional bits per pixel are available in the frame buffer the value of 33 would be mapped to the nearest level with bits per pixel we can accommodate  gray levels while bits per pixel would give us shades of gray an alternative scheme for storing the intensity information is to convert each intensity code directly to the voltage value that produces this gray scale level on the output device in use  when multiple output devices are available at an installation the same color table interface may be used for all monitors in this case a color table for a monochrome monitor can be set up using a range of rgb values as in  with the display intensity corresponding to a given color index ci calculated as intensity  min r g b  max r g b  table intensity codes for a four lfvel grayscale system  intensity stored intensity displayed codes values in the grayscale frame buffer binary code  black 33 aly dark gray 67  light gray qi1 white  section calor and grayscale levels hollow fa  patterned te  figure  polygon fill styles   options for filling a defined region include a choice between a solid color or a patterned fill and choices for the particular colors and patterns these fill options can be applied to polygon regions or to areas defined with curved boundaries depending on the capabilities of the available package in addition areas can be painted using various brush styles colors and transparency parameters  fill styles areas are displayed with three basic fill styles hollow with a color border filled with a solid color or filled with a specified pattern or design a basic fill style is selected in a phigs program with the function setinteriorstyle fs  values for the fill style parameter fs include hollow solid and pattern   another value for fill style is hatch which is used to fill an area with selected hatching patterns parallel lines or crossed lines as in  as with line at tributes a selected fill style value is recorded in the list of system attributes and applied to fill the interiors of subsequently specified areas fill selections for pa rameter fs are normally applied to polygon areas but they can also be imple mented to fill regions with curved boundaries  hollow areas are displayed using only the boundary outline with the inte rior color the same as the background color a solid fill is displayed in a single color up to and including the borders of the region the color for a solid interior or for a hollow area outline is chosen with setinteriorcolourindex fc  where fill color parameter fc is set to the desired color code a polygon hollow fill is generated with a line drawing routine as a closed polyline solid fill of a re gion can be accomplished with the scan line procedures discussed in section 11  other fill options include specifications for the edge type edge width and edge color of a region these attributes are set independently of the fill style or fill color and they provide for the same options as the line attribute parameters line type line width and line color  that is we can display area edges dotted or dashed fat or thin and in any available color regardless of how we have filled the interior  mn eee ee  diagonal diagonal hatch fill cross hatch fill  polygon fill using hatch patterns pattern fill we select fill patterns with setinteriorstyleindex pi  where pattern index parameter pi specifies a table position for example the fol lowing set of statements would fill the area defined in the i11area command with the second pattern type stored in the pattern table  setinteriorstyie pattern  setinteriorstyleindex  fillarea n points  separate tables are set up for hatch patterns  f we had selected hatch fill for the interior s yle in this program segment then the value assigned to parameter pi is an index to the stored patterns in the hatch table  for fill style pattern table entries can be created on individual output de vices with setpatternrepresentation iws p nx ny cp  parameter pi sets the pattern index number for workstation code ws and cp isa two dimensional array of color codes with nx colunins and ny rows the follow ing program segment illustrates how this function could be used to set the first entry in the pattern table for workstation  cpll    ep   epli   cp    setpatternrepresentation   cp  table shows the first two entries for this color table color array cp in this ex ample specifies a pattern that produces alternate red and black diagonal pixel lines on an eight color system  when a color array cp is to be applied to fill a region we need to specify the size of the area that is to be covered by each element of the array we do this by setting the rectangular coordinate extents of the pattern  setpatternsize dx dy  where parameters dx and dy give the coordinate width and height of the array mapping an example of the coordinate size associated with a pattern array is given in  if the values for dx and dy in this figure are given in screen co ordinates then each element of the color array would be applied to a by screen grid containing four pixels  a reference position for starting a pattern fill is assigned with the statement setpatrernreferencepoint  positicn parameter posit on is a pointer to coordinates xp yp that fix the lower left comer of the rectangular pattern from this starting position the pattern is then replicated in the x and y directions until the defined area is covered by nonover  table a workstation pattern table with two entries using the color codes of table index pattern p1  cp  nn co noh hro norns __ _1   t b    fer tae  ba tap te 4nd    fienre 20 a pattern array with columns and rows mapped to an by coordinate rectangle chapter attributes of output primitives lapping copies of the pattern array the process of filling an area with a rectangu lar pattern is called tiling and rectangular fill patterns are sometimes referred to as tiling patterns  demonstrates tiling of a triangular fill area starting from a pattern reference point  to illustrate the use of the pattern commands the following program exam ple displays a black and white pattern in the interior of a parallelogram fill area   the pattern size in this program is set to map each array element toa single pixel      start position     tiling an area froma designated start position nonoverlapping adjacent patterns are laid out to cover all sean lines passing through the defined area   define ws void patternfill   wept2 pts  int bwpattern          psetpatternrepresentation ws   bwpattern  pes x  pts o y  pts x  pts l y  pts x  pts  y  pts x  pts y   psetfillareainteriorstyle pattern  psetfillareapatternindex  psetpatternreferencepoint   pfillarea  pts  pattern fill can be implemented by modifying the scan line procedures dis cussed in chapter so that a selected pattern is superimposed onto the scan lines beginning from a specified start position for a pattern fill the rectangular patterns would be mapped vertically to scan lines between the top and bottom of the fill area and horizontally to interior pixel positions across these scan lines horizontally the pattern array is repeated at intervals specified by the value of size parameter dx similarly vertical repeats of the pattern are separated by inter vals set with parameter dy this scan line pattern procedure applies both to poly gons and to areas bounded by curves   te e   at   a pattern array a superimposed on a parallelogram fill area to produce the display b  hatch fill is applied to regions by displaying sets of parallel lines the fill procedures are implemented to draw either single hatching or cross hatching spacing and slope for the hatch lines can be set as parameters in the hatch table on raster systems a hatch fill can be specified as a pattern array that sets color values for groups of diagonal pixels  in many systems the pattern reference point xp yp 1s assigned by the sys tem for instance the reference point could be set automatically at a polygon ver tex in general for any fill region the reference point can be chosen as the lower left corner of the bounding rectangle or bounding box determined by the coordi nate extents of the region   to simplify selection of the reference coordi nates some packages always use the screen coordinate origin as the pattern start position and window systems often set the reference point at the coordinate ori gin of the window always setting xp yp at the coordinate origin also simplifies the tiling operations when each color array clement of a pattern is to be mapped to a single pixel for example if the row positions in the pattern array are refer enced in reverse that is from bottom to top starting at  a pattern value is then assigned to pixel position x y in screen or window coordinates as setpixel  x y  cppty mod ny x mod nx    where ny and nx specify the number of rows and number of columns in the pat tern array setting the pattern start position at the coordinate origin however ef fectively attaches the pattern fill to the screen or window background rather than to the fill regions adjacent or overlapping areas filled with the same pattern would show no apparent boundary between the areas also repositioning and refilling an object with the same pattern can result in a shift in the assigned pixel values over the object interior a moving object would appear to be transparent against a stationary pattern background instead of moving with a fixed interior pattern  it is also possible te combine a fill pattern with background colors includ ing grayscale in various ways with a bitmap pattern containing only the digits and the values could be used as transparency indicators to let the back ground show through alternatively the and digits can be used to fill an inte tior with two color patterns in general color fill patterns can be combined in several other ways with background colors the pattern and background colors can be combined using boolean operations or the pattern colors can simply re place the background colors  demonstrates how the boolean and re place operations for a by fill pattern would set pixel values on a binary black and white system against a particular background pattern   ymax   bounding t rectangle  bounding rectangle for a region with coordinate extents xin xmax x varun ang ya in the x and y man directions  mio section area fill attrivutes   eo  pattern background   pixel values  combining a fili pattern with a backgrouna pattern using boolean operations and or and xor exclusive or  and using simple replacement  soft fill modified boundary fill and flood fill procedures that are applied to repaint areas so that the fill color is combined with the background colors are referred to as soft fill or tint fill algorithms one use for these fill methods is to soften the fill colors at object borders that have been blurred to antialias the edges another is to allow repainting of a color area that was originally filled with a semitranspar ent brush where the current color is then a mixture of the brush color and the background colors behind the area in either case we want the new fill color to have the same variations over the area as the current fill color  as an example of this type of fill the linear soft fill algorithm repaints an area that was originally painted by merging a foreground color f with a single background color b where f  b assuming we know the values for f and b we can determine how these colors were originally combined by checking the cur rent color contents of the frame buffer the current rgb color p of each pixel within the area to be refilled is some linear combination of f and b  p tf  ob where the transparency factor t has a value between and for each pixel for values of t less than the background color contributes more to the interior color of the region than does the fill color vector equation holds for each rgb component of the colors with p  pp po pad f  fz fe fp  b  bz by bg   we can thus calculate the value of parameter  using one of the rgb color com ponents as po by pa eb f by  where k  r g or b and f  b  theoretically parameter t has the same value for each rgb component but roundoff to integer codes can result in different values of  for different components we can minimize this roundoff error by se lecting the component with the largest difference between f and b this value of tis then used to mix the new fill color nf with the background color using either a modified flood fill or boundary fill procedure  similar soft fill procedures can be applied to an area whose foreground color is to be merged with multiple background color areas such as a checker board pattern when two background colors b  and b are mixed with fore ground color f the resulting pixel color p is p  f   b    to  t b   where the sum of the coefficients ty t  and  t  t  on the color terms must equal we can set up two simultaneous equations using two of the three rgb color components to solve for the two proportionality parameters tg and  these parameters are then used to mix the new fill color with the two back ground colors to obtain the new pixel color with three background colors and one foreground color or with two background and two foreground colors we need all three rcb equations to obtain the relative amounts of the four colors for some foreground and background color combinations however the system of two or three rgb equations cannot be solved this occurs when the color val ucs are a very similar or when they are all proportional to each other  the appearance of displayed characters is controlled by attributes such as font size color and orientation attributes can be set both for entire character strings text and for individual characters defined as marker symbols  tex attributes there are great many text options that can be made available to graphics pro grammers first of all there is the choice of font or typeface  which is a set of characters with a particular design style such as new york courier helvetica london times roman and various special symbol groups the characters in a selected font can also be displaved with assorted underlining styles solid ted doubie  in boldface in italics and in outline or shadow styles a particular  section character attributes chapter attributes of output primitives  font and associated style is selected in a phigs program by setting an integer code for the text font parameter t f in the function sertextfou  tf  font options can be mace available as predetined sets of grid patterns or as char acter sets designed with polylines and spline curves  color settings for displayed text are stored in the system attribute list and used by the procedures that load character definitions into the frame buffer when a character string is to be displayed the current color is used to set pixel values in the frame buffer corresponding to the character shapes and positions control of text color or intensity is managed from an application program with settextcolourindex tc  where text color parameter zc specifies an allowable color code  we can adjust text size by scaling the overall dimensions height and width of characters or by scaling only the character width character size is specified by printers and compositors in points where point is 013837 inch or approxi mately 72 inch  for example the text you are now reading is a point font point measurements specify the size of the body of a character   but dif ferent fonts with the same point specifications can have different character sizes depending on the design of the typeface the distance between the bottomline and the topline of the character body is the same for all characters in a particular size and typeface but the body width may vary proportionally spaced fonts assign a smaller body width to narrow characters such as i j  and f compared to broad characters such as w or m character heighi is defined as the distance between the baseline and the capline of characters kerned characters such as f and j in fig 25 typically extend beyond the character body limits and letters with descend ers g j p q y extend below the baseline fach character is positioned within the character body by a font designer to allow suitable spacing along and be tween print lines when text is displayed with character bodies touching  text size can be adjusted without changing the width to height ratio of characters with seccharacterheight ich  _ character  kern _ character pom body e i character height    base   im    i  __ bottom j  kern igure character body height  height height parameter ch is assigned a real value greater than to set the coordinate height of capital letters the distance between baseline and capline in user coordinates this setting also affects character body size so that the width and spacing of characters is adjusted to maintain the same text proportions for instance dou bling the height also doubles the character width and the spacing between char acters  shows a character string displayed with three different charac ter heights the width only of text can be set with the function  the effect of different character height settings on displayed text  setcharacterexpansionfactor cw  where the character width parameter cw is set to a positive real value that scales the body width of characters text height is unaffected by this attribute setting examples of text displayed with different character expansions is given in fig 27  spacing between characters is controlled separately with setcharacterspacing cs  where the character spacing parameter cs can be assigned any real value the value assigned to cs determines the spacing betwveen character bodies along print lines negative values for cs overlap character bodies positive values in sert space to spread out the displayed characters assigning the value to cs causes text to be displayed with no space between character bodies the amount of spacing to be applied is determined by multiplying the value of cs by the character height distance between baseline and capline  in  a character string is displayed with three different settings for the character spacing para meter  the orientation for a displayed character string is set according to the direc tion of the character up vector  setcharacterupvector upvect  parameter upvect in this function is assigned two values that specify the x and y vector components text is then displayed so that the orientation of characters from baseline to capline is in the direction of the up vector for example with upvect    the direction of the up vector is and text would be displayed as shown in  a procedure for orienting text rotates characters so that the sides of character bodies from baseline to capline are aligned with the up vector the rotated character shapes are then scan converted into the frame buffer  section character attributes widtho width width   the effect of different character width settings on displayed text  spacing spacing spacing  the effect of different character spacings on displayed text  chapter tt ee  attributes of output primitives i  i  i    te a      uz direction of the up vector a  up vector  _ controls the orientation of  a  oh displayed text b  it is useful in many applications to be able to arrange character strings verti cally or horizontally   an attribute parameter for this option is set with the statement seutextpath tp     t  ax ms cro dpme  f a where the text path parameter tp can be assigned the value right left up or down examples of text displayed with these four options are shown in  a procedure for implementing this option must transform the character patterns into the specified orientation before transferring them to the frame buffer  character strings can also be oriented using a combination of up vector and text path specifications to produce slanted text  shows the directions  of character strings generated by the various text path settings for a up vec  tor examples of text generated for text path values down and right with this up ee vector are illustrated in  oe another handy attribute fer character strings is alignment this attribute  specifies how text is to be positioned with respect to the start coordinates align text path attributes can be set ment attributes are set with to produce horizontai or vertical arrangements of settextaligumert h vi character strings  _ a horizontal text where parameters h and  control horizontal and vertical alignment respectively horizontal alignment is set by assigning h a value of left centre or right vertical d alignment is set by assigning v a value of top cap half base or bottom the inter pretation of these alignment values depends on the current setting for the text r path  shows the position of the alignment settings when text is to be t displayed horizontally to the right or vertically down similar interpretations   apply to text path values of left and up the most natural alignment for a par snmires string ticular text path is chosen by assigning the value norma to the h and v parame  s ters  illustrates common alignment positions tor horizontal and vertt  i cal text labels  r a precision specification for text display is given with n settextpree sion tpri k vee where text precision parameter tpr is assigned one of the values string char or  stroke the highest quality text is displayed when the precision parameter is set to text displayed with the four the value stroke for this precision setting greater detail would be used in defin text path options ing the character shapes and the processing of attribute selections and other string manipulation procedures would be carried out to the highest possible ac curacy the lowest quality precision setting string is used for faster display of character strings at this precision many attribute selections such as text path are ignored and string manipulation procedures are simplified to reduce processing time  marker attributes a marker symbol is a single character that can be displayed in different colors and in different sizes marker attributes are implemented by procedures that load the chosen character into the raster at the defined positions with the specified color and size  we select a particular character to be the marker symbol with setmarkertype mt  where marker type parameter mt is set to an integer code typical codes for marker type are the integers through specifying respectively a dat   a ver tical cross   an asterisk   a circle o  and a diagonal cross x  displayed marker types are centered on the marker coordinates  we set the marker size with setmarkersizescalefactor ms  with parameter marker size ms assigned a positive number this scaling parame ter is applied to the nominal size for the particular marker symbol chosen values greater than produce character enlargement values less than reduce the marker size    string left center   top   cap t  w  voooo ees half ese   dase g bottom  left right alignment attribute values for horizontal and vertical strings   canter section charac er attributes direction of character up vector  a   oy  a lo g   text path direction b    an up vector spec fication a controls the direction of the text path b    a  b   the up vector in  produces the display a fora down path and the display b for a right path   rah ol gnmen center auignment gn tbe aot alig  ligure 35 character string alignmenss  marker color is specified with setpolymarkercolourlindex mc  a selected color cade tor parameter mc is stored in the current attribute list and used to display subsequently specified marker primitives   with the procedures we have considered so far each function references a single attribute that specifies exactly how a primitive is to be displayed with that at tribute setting these specifications are called individual or unbundled attrib utes and they are meant to be used with an output device that is capable of dis playing primitives in the way specified if an application program employing individual attributes is interfaced to several output devices some of the devices may not have the capability to display the intended attributes a program using individual color attributes for example mav have to be modified to produce ac ceptable output on a monochromatic monitor  individual attribute commands provide a simple and direct method for specifying attributes when a single output device is used when several kinds of output devices are available at a graphics installation it is convenient for a user to be able to say how attributes are to be interpreted on each of the different de vices this is accomplished by setting up tables for each output device that lists sets of attribute values that are to be used on that device to display each primi tive tvpe a particular set of attribute values for a primitive on each output de vice is then chosen by specifying the appropriate table index attributes specified in this manner are called bundled attributes the table for each primitive hat de fines groups of attribute values to be used when displaying that primitive on a particular output device 1s called a bundle table  attributes that may be bundled into the workstation table entries are those that do not involve courdinate specifications such as color and line type the choice between a bundled or an unbundled specification is made by setting a switch called the aspect source flag for each of these attributes  set individsalasf fattributeptr flagptr where parameter attic buteptr points to a list of attributes and parameter flagptr points to the corresponding list of aspect source flags each aspect source flag can be assigned a value of individual or bundled attributes that may be bundled are listed in the following sections  bundled lire attributes entries in the bundle lable for line attributes on a specitied workstation are set with the function setpolylinetepresentation ws li it lw lc parameter ws is the workstation identifier and line index parameter 1i defines section the bundle table position parameters 1t lw and 1c are then bundled and as bundled attributes signed values to set the line type line width and line color specifications respec  tively for the designated table index for example the following statements de  fine groups of line attributes that are to be referenced as index number on two different workstations  setpolyiinerepresentation    setpclylinerepresentaticn    a polyline that is assigned a table index value of would then be displayed using dashed lines at half thickness in a blue color on workstation while on workstation this same index generates solid standard sized white lines  once the bundle tables have been set up a group of bundled line attributes is chosen for each workstation by specifying the table index value  setpolylineindex 1i  subsequent polyline commands would then generate lines on each worksta tion according to the set of bundled attribute values defined at the table position specified by the value of the line index parameter  bundled area fill attributes table entries for bundled area fill attributes are set with setiinteriorrepresentation ws fi fs pi fe  which defines the attribute list corresponding to fill index i on workstation ws parameters fs pi and fc are assigned values for the fill style pattern index and fill color respectively on the designated workstation similar bundle tables can also be set up for edge attributes of polygon fill areas  a particular attribute bundle is then selected from the table with the func tion setinteriorindex fi subsequently defined fill areas are then displayed on each active workstation ac cording to the table entry specified by the fill index parameter fi other fill area attributes such as pattern reference point and pattern size are independent of the workstation designation and are set with the functions previously described  bundled text attributes the function settextrepresentation ws ti tf tp te ts tc  bundles values for text font precision expansion factor size and color in a table position for workstation ws that is specified by the value assigned to text index  parameter ci other text attributes including character up vector text path character height and text alignment are set individually a particular text index value is then chosen with the function settextindex ti  each text function that is then invoked is displayed on each workstation with the set of attributes referenced by this table position  bundled marker attrioutes table entries for bundled marker attributes are set up with setpolymazkerrepresentation ws mi mt ms mc  this defines the marker type marker scale factor and marker color for index mi on workstation ws bundle table selections are then made with the function setpolymarkerindex mi   current settings for attributes and other parameters such as workstation types and status in the system lists can be retrieved with mquiry functions these functions allow current values to be copied into specified parameters which can then be saved for later reuse or used to check the current state of the system if an error occurs  we check current attribute values by stating the name of the attribute in the inquiry function for example the functions inguirepolvi nelndex lasz1i and inguirelinteriorcolourindex lastfc  copy the current values for line index and fill color into parameters last1i and lastfc the following program segment illustrates reusing the current line type value after a set of lines are drawn with a new line type  inquirelinetype aldlt  setlincetype newlt  setlinetype  oldit  displayed primitives generated by the raster algorithms discussed in chapter have a jagged or stairstep appearance because the sampling process digitizes co ordinate points on an object to discrete integer pixel positions this distortion of information due to low frequency sampling undersampling is called aliasing we can improve the appearance of displayed raster lines by applying antialias ing methods that compensate for the undersampling process  an example of the effects of undersampling is shown in  to avoid losing information from such periodic objects we need to set the sampling fre quency to at least twice that of the highest frequency occurring in the object re ferred to as the nyquist sampling frequency or nyquist sampling rate f  f 2fonax  another way to state this is that the sampling interval should be no larger than one half the cycle interval called the nyquist sampling interval  for x interval sampling the nyquist sampling interval ax is ax  sats  where axjyce  fmax in  our sampling interval is one and one half times the cycle interval so the sampling interval is at least three times too big if we want to recover all the object information for this example we need to cut the sampling interva down to one third the size shown in the figure  one way to increase sampling rate with raster systems is simply to display objects at higher resolution but even at the highest resolution possible with cur rent technology the jaggies will be apparent to some extent there is a limit to how big we can make the frame buffer and still maintain the refresh rate at to frames per second and to represent objects accurately with continuous para meters we need arbitrarily small sampling intervals therefore unless hardware technology is developed to handle arbitrarily large frame buffers increased screen resolution is not a complete solution to the aliasing problem  nvvma       sampling positions ta   sampling the periodic shape in a at the marked positions produces the aliased lower frequency  b representation in b   section antialiasing  i chapter attributes of output primitives no with raster systems that are capable of displaying more than two intensity levels color or gray scale  we can apply antialiasing methods to modify pixel in tensities by appropriately varying the intensities of pixels along the boundaries of primitives we can sinooth the edges to lessen the jagged appearance  a straightforward antialiasing method is to increase sampling rate by treat ing the screen as if it were covered with a finer grid than is actually available we can then use multiple sample points across this finer grid to determine an appro priate intensity level for each screen pixel this technique of sampling object characteristics at a high resolution and displaying the results at a lower resolu tion is called supersampling or postfiltering since the general method involves computing intensities at subpixe grid positions then combining the results to obtain the pixel intensities  displayed pixel positions are spots of light covering a finite area of the screen and not infinitesimal mathematical points yet in the line and fill area algorithms we have discussed the intensity of each pixel is de termined by the location of a single point on the object boundary by supersam pling we obtain intensity information from multiple points that contribute to the overall intensity of a pixel  an alternative to supersampling is to determine pixel intensity by calculat ing the areas of overlap of each pixe with the objects to be displayed antialias ing by computing overlap areas is referred to as area sampling or prefiltering since the intensity of the pixel as a whole is determined without calculating sub pixel intensities  pixel overlap areas are obtained by determining where object boundaries intersect individual pixel boundaries  raster objects can also be antialiased by shifting the display location of pixel areas this technique calied pixel phasing is applied by microposition ing the electron beam in relation to object geometry  supersampling straight line segments supersamp ing straight lines can be performed in several ways for the gray scale display of a straight line segment we can divide each pixel into a number of subpixels and count the number of subpixels that are along the line path the intensity level for each pixel is then set to a value that is proportional to this sub pixel count an example of this method is given in fig 37 each square pixel area is divided into rine equal sized square subpixels and the shaded regions show the subpixels that would be selected by bresenham s algorithm this scheme provides for three intensity settings above zero since the maximum nuinber of subpixels that can be selected within any pixel is three for this exam ple the pixel at position  is set to the maximum ntensity evel  pixels at  and  are each set to the next highest intensity level  and pix els at  and  are each set to the lowest intensity above zero evel  thus the line intensity 1s spread out over a greater number of pixels and the stairstep effect is smoothed by displaying a somewhat blurred line path in the vicinity of the stair steps between horizontal runs  if we want to use more inten sity levels to antialiase the line with this methad we increase the number of sam pling positions across each pixel sixteen subpixels gives us four intensity levels above zero twenty five subpixels gives us five levels and so on  in the supersampling example of  we considered pixel areas ot fi nite size but we treated the line as a mathematical entity with zero width actu ally displayed lines have a width approximately equal to tha of a pixel if we take the finite width of the line into account we can perform supersampling by setting each pixel intensity proportional to the number of subpixels inside the   supersampling subpixel positions along a straight line segment whose left endpoint is at screen coordinates     polygon representing the line area a subpixel can be considered to be inside the line if its lower left corner is inside the polygon boundaries an advantage of this supersampling procedure is that the number of possible intensity levels for each pixel is equal to the total number of subpixels within the pixel area for the ex ample in  we can represent this line with finite width by positioning the polygon boundaries parallel to the line path as in  and each pixel can now be set to one of nine possible brightness levels above zero  another advantage of supersampling with a finite width line is that the total line intensity is distributed over more pixels in  we now have the pixel at grid position  turned on at intensity level  and we also pick up contributions from pixels immediately below and immediately to the left of posi tion   also if we have a color display we can extend the method to take background colors into account a particular line might cross several different color areas and we can average subpixel intensities to obtain pixel color settings for instance if five subpixels within a particular pixel area are determined to be inside the boundaries for a red line and the remaining four pixels fall within a blue background area we can calculate the color for this pixel as pixel gior   red  blue  the trade off for these gains from supersampling a finite width line is that identifying interior subpixels requires more calculations than simply determining which subpixels are along the line path these calculations are also complicated by the positioning of the line boundaries in relation to the line path this posi    supersampling subpixel positions in relation to the interior of a line of finite width  section antialiasing chapter attributes of output primitives       relative weights for a grid of by subpixels  tioning depends on the slope of the line for a line the line path is centered on the polygon area but tor either a horizontal or a vertical line we want the line path to be one of the polygon boundaries for instance a horizontal line passing through grid coordinates  would be represented as the polygon bounded by horizontal grid lines y  and y  similarly the polygon representing a vertical line through   would have vertical boundaries along grid lines x  and x  for lines with slope  mt   the mathematical line path is posi tioned propertionately closer to the lower polygon boundary and for lines with slope m  this line path is placed closer to the upper polygon boundary  pixel weighting masks supersampling algorithms are often implemented by giving more weight to sub pixels near the center of a pixel area since we would expect these subpixels to be more important in determining the overall intensity of a pixel for the by pixel subdivisions we have considered so far a weighting scheme as in  could be used the center subpixel here is weighted four times that of the corner subpixels and twice that of the remaining subpixels intensities calculated for each grid of nine subpixels would then be averaged so that the center subpixel is weighted by a factor of the top bottom and side subpixels are each weighted by a factor of and the corner subpixels are each weighted by a fac tor of 16 an atray of values specifying the relative importance of subpixels is sometimes referred to as a mask of subpixel weights similar masks can be set up for larger subpixel grids also these masks are often extended to include con tributions from subpixels belonging to neighboring pixels su that intensities can be averaged over adjacent pixels  area sampling straight line segments we perform area sampling for a straight line by setting each pixel intensity pro portional to the area of overlap of the pixel with the finite width line the line can be treated as a rectangle and the section of the line area between two adja cent vertical or two adjacent horizontal screen grid lines is then a trapezoid overlap areas for pixels are calculated by determining how much of the trape zoid overlaps each pixel in that vertical column or horizontal row  in  the pixel with screen grid coordinates  is about percent coverec by the line area so its intensity would be set to percent of the maximum ir tensity similarly the pixel at 21 would be set to an intensity of about percent of maximum a method for estimating pixel overlap areas is illustrated by the su persampling example in  the total number of subpixels within the line boundaries is approximately equal to the overlap area and this estimation is im proved by using finer subpixel grids with color displays the areas of pixel over lap with different color regions is calculated and the final pixel color is taken as the average color of the various overlap areas  filtering techniques a more accurate method for antialiasing lines is to use filtering techniques the method is similar to applying a weighted pixel mask but now we imagine a con tinuous weighting surface or filter function covering the pixel  shows examples of rectangular conical and gaussian filter functions methods for ap plying the filter function are similar to applying a weighting mask but now we integrate over the pixel surface to obtain the weighted average intensity  lo re duce computation table lookups are commonly used to evaluate the integrals  pixel phasing on raster systems that can address subpixel positions within the screen grid pixel phasing can be used to antialias objects stairsteps along a line path or ob ject boundary are smoothed out by moving micropositioning the electron beam to more nearly approximate positions specified by the object geometry systems incorporating this technique are designed so that individual pixel positions can be shifted by a fraction of a pixel diameter the electron beam is typically shifted by  or of a pixel diameter to plot points closer to the true path of a line or object edge some systems also allow the size of individual pixels to be ad justed as an additional means for distributing intensities  illustrates the antialiasing effects of pixel phasing on a variety of line paths  compensating for line intensity differences antialiasing a line to soften the stairstep effect also compensates for another raster effect illustrated in  both lines are plotted with the same number of pixels yet the diagonal line is longer than the horizontal line by a factor of v2 the visual effect of this is that the diagonal line appears less bright than the hori zontal line because the diagonal line is displayed with a lower intensity per unit length a line drawing algorithm could be adapted to compensate for this effect by adjusting the intensity of each line according to its slope horizontal and verti cal lines would be displayed with the lowest intensity while lines would be given the highest intensity but if antialiasing techniques are applied to a display      common filter functions used to antialias line paths the volume of each filter is normalized to i and the height gives the relative weight at any subpixel position section antialiasing  saussian filter  c   intensities are automatically compensated when the finite width of lines is taken into account pixel intensities are adjusted so that lines display a total intensity proportional to their length  antialiasing area boundaries the antialiasing concepts we have discussed for lines can also be applied to the boundaries of areas to remove their jagged appearance we can incorporate these procedures into a scan line algorithm to smooth the area outline as the area is generated  if system capabilities permit the repositioning of pixels area boundaries can be smoothed by adjusting boundary pixel positions so that they are along the line defining an area boundary other methods adjust each pixel intensity at a bound ary position according to the percent of pixel area that is inside the boundary in  the pixel at position x y has about half its area inside the polygon boundary therefore the intensity at that position would be adjusted to one half its assigned value at the next position x  y  along the boundary the in tensity is adjusted to about one third the assigned value for that point similar adjustments based on the percent of pixel area coverage are applied to the other intensity values aronnd the boundary   ad abi   jagged lines a  plotted on the merlin system are smoothed b with an antialiasing technique called pixel phasing this technique increases the number of addressable points on the system from x to x  courtesy of megatek corp     unequal length lines displayed with the same number of pixels in each line   supersampling methods can be applied by subdividing the total area and determining the number of subpixels inside the area boundary a pixel partition ing into four subareas is shown in  the original by grid of pixels is turned into an by grid and we now process eight scan lines across this grid instead of four  shows one of the pixel areas in this grid that overlaps an object boundary along the two scan lines we determine that three of the sub pixel areas are inside the boundary so we set the pixel intensity at percent of its maximum value  another method for determining the percent of pixel area within a bound ary developed by pitteway and watkinson is based on the midpoint line algo tithm this algorithm selects the next pixel along a line by determining which of two pixels is closer to the line by testing the location of the midposition between the two pixels as in the bresenham algorithm we set up a decision parameter p whose sign tells us which of the next two candidate pixels is closer to the line by slightly modifying the form of p we obtain a quantity that also gives the percent of the current pixel area that is covered by an object  we first consider the method for a line with slope m in the range from to in  a straight line path is shown on a pixel grid assuming that the pixel at position x y  has been plotted the next pixel nearest the line at x  x is either the pixel at y or the one at y   we can determine which pixel is nearer with the calculation   ymnia  ry    b  y   this gives the vertical distance from the actual y coordinate on the line to the halfway point between pixels at position y and y   if this difference calcula tion is negative the pixel at y is closer to the line if the difference is positive the   vee   adjusting pixel intensities along an x lael area boundary  section antialiasing  t  t i i t  sqr qr at ara ras      a by pixel section of a raster display subdivided inta an by grid   sean line scan line subdivided pixel area   a subdivided pixel area with three subdivisions inside an object boundary line   boundary edge of an area passing through a pixel grid section  pixel at y  is closer we can adjust this calculation so that it produces a posi tive number in the range from to by adding the quantity  m  p imy    bd  y   a  mm  now the pixel at y is nearer if p m and the pixel at y  is nearer if p il m  parameter p also measures the amount of the current pixel that is over lapped by the area for the pixel at x  y  in  the interior part of the pixel has an area that can be calculated as area  mx  b y    this expression for the overlap area of the pixel at x  y  is the same as that for parameter p in eq  therefore by evaluating p to determine the next pixel po  sition along the polygon boundary we also determine the percent of area cover  age for the current pixel  we can generalize this algorithm to accommodate lines with negative slopes and lines with slopes greater than this calculation for parameter p could then be incorporated into a midpoint line algorithm to locate pixel positions and an object edge and to concurrently adjust pixel intensities along the boundary lines also we can adjust the calculations to reference pixel coordinates at their lower left coordinates and maintain area proportions as discussed in section 10  at polygon vertices and for very skinny polygons as shown in  we have more than one boundary edge passing through a pixel area for these cases we need to modify the pitteway watkinson algorithm by processing all edges passing through a pixel and determining the correct interior area  filtering techniques discussed for line antialiasing can also be applied to area edges also the various antialiasing methods can be applied to polygon areas or to regions with curved boundaries boundary equations are used to esti mate area overlap of pixel regions with the area to be displayed and coherence techniques are used along and between scan lines to simplify the calculations  summary in this chapter we have explored the various attributes that control the appear ance of displayed primitives procedures for displaying primitives use attribute settings to adjust the output of algorithms for line generation area filling and text string displays  the basic line attributes are line type line color and line width specifica tions for line type include solid dashed and dotted lines line color specifica tions can be given in terms of rgb components which control the intensity of the three electron guns in an rgb monitor specifications for line width are given in terms of multiples of a standard one pixel wide line these attributes can be applied to both straight lines and curves  to reduce the size of the frame buffer some raster systems use a separate color lookup table this limits the number of colors that can be displayed to the size of the lookup table full color systems are those that provide bits per pixel and no separate color lookup table      pounder  sy mix     overlap area of a pixel rectangle centered at position x y  with the interior of a polygon area  fill area attributes include the fill style and the mil color or the fill pattern when the fill style is to be solid the fill color specifies the color for the solid fill of the polygon interior a hollow fill style produces an interior in the background color and a border in the fill color the third type of fill is patterned in this case a selected array pattern is used to fill the polygon interior  an additional fill option provided in some packages is soft fill this fill has applications in antialiasing and in painting packages soft fill procedures provide a new fill color for a region that has the same variations as the previous fill color one example of this approach is the linear soft fill algorithm that assumes that the previous fill was a linear combination of foreground and background colors this same linear relationship is then determined from the frame buffer settings and used to repaint the area in a new color  characters defined as pixel grid patterns or as outline fonts can be dis played in different colors sizes and orientations to set the orientation of a char acter string we select a direction for the character up vector and a direction for the text path in addition we can set the alignment of a text string in relation to the start coordinate position marker symbols can be displayed using selected characters of various sizes and colors  graphics packages can be devised to handle both unbundled and bundled attribute specifications unbundled attributes are those that are defined for only one type of output device bundled attribute specifications allow different sets of attributes to be used on different devices but accessed with the same index num ber in a bundle table bundle tables may be installation defined user defined or both functions to set the bundle table values specify workstation type and the attribute list for a given attribute index  to determine current settings for attributes and other parameters we can invoke inquiry functions in addition to retrieving color and other attribute infor mation we can obtain workstation codes and status values with inquiry func tions  because scan conversion is a digitizing process on raster systems displayed primitives have a jagged appearance this is due to the undersampling of infor mation which rounds coordinate values to pixel positions we can improve the appearance of raster primitives by applying antialiasing procedures that adjust pixel intensities one method for doing this is to supersample that is we con sider each pixel to be composed of subpixels and we calculate the intensity of the     polygons with more than one boundary line passing through individual pixel regions  chapter attributes of output primitives  subpixels and average the values of all subpixels alternatively we can perform area sampling and determine the percentage of area coverage for a screen pixel then set the pixel intensity proportional to this percentage we can also weight the subpixel contributions according fo position giving higher weights to the central subpixels another method for antialiasing is to build special hardware configurations that can shift pixel positions  table lists the attributes discussed in this chapter for the output primi tive classifications line fill area text and marker the attribute functions that can be used in graphics packages are listed for each category    table summary of attributes output bundled primitive associated attribute setting attribute type attributes functions functions line type setlinetype setfolylineindex width setlinewidthscalefactor setpolylinerepresentation color setpolylinecolourindex fiil area fill style setinteriorstyle setinteriorindex fill color setinteriorcolorindex setinteriorrepresentation pattern setinteriorstyleindex setpatternrepresentation setpatternsize setpatternreferencepoint text font settextfont settext index color settextcolourindex settextrepresentation size setcharacterheight setcharacterexpansionfactor orientation setcharacterupvector settext path settextalignment marker type setmarkertype set polymarkerindex size setmarkersizescalefactor set polymarkerrepresentation color set polymarkercolour index references calor and grayscale considerations are discussed in crow  and in heckbert   soft fill techniques are given in fishkin and barsky   antialiasing techniques are discussed in pitteway and watkinson  crow  turkowski  korein and badler  and kirk and avro schilling and wu   attribute functions in phigs are discussed in howard et al   hopgood and duce  gaskins  and blake  for information an gks workstations and attrib utes see hapgood et al  and enderle kansy and pfaff   exercises  implement the line type function by modifying bresenham s line drawing algorithm to display either solid dashed or dotted lines     18  20 21  implemeni the line type function with a midporn line algcrithm to display either solid dashed or dotted lines  devise a parallel method for implementing the line type function devise a parallel method for implementing the line width function  a tine specified by two endpoints and a width can be converted to a rectangular poly gon with four vertices and then displayed using a scan line method develop an effi cient algorithm for computing the four vertices needed to define such a rectangle using the line endpoints and line width  implement the line width function in a line drawing arogram so that any one of three line widths can be displayed  write a program to output a line graph of three data sets defined over the same x coor  dinate range input to the program is to include the three sets of data values labeling for the axes and the coordinates for the display area on the screen the data sets are to be scaled to iit the specified area each plotted line is to be displayed in a differert line type solid dashed dotted  and the axes are to be labeled  instead of changing the line type the three data sets can be piotted in different colors   set up an algorithm for displaying thick tines with either butt caps round caps of pro jecting square caps these options can be provided in an option menu  devise an algorithm for displaying thick polylines with either a miter join a round join or a bevel join these options can be provided i an option menu   implement pen and brush menu options for a line drawing procedure including at leasi two options round and square shapes   madity a line drawing algorithm so that the intensity of the ourput line is set according to its slope that is by adjusting pixel intensities according to the value of the slope all ines are displayed with the same intensity per unit length  define and tmplement a function for controlling the line type tsolid dashed dotted of displayed ellipses   define and implement a function for setting the width of displayed ellipses write a routine to display a bar graph in anv spec fied screen area input is to include the data set labeling for the coordinate axes and ths coordinates for the screen area the data set is to be scaled to fit the designated screen area and the bars are to be dis played in designated colors or patterns   write a procedure to display two data sets defined cver the same x coordinate range  with the data values scaled to ft a specified region of the display screen the bars for one of the data sets are to be displaced horizontally to produce an overlapping bar pattern foc easy comparison of the two sets of data ijse a different color or a different fill pattern for the two sets of bars   devise an algorithm for implementing a color lookup table and the set colourrep  resentation operation  suppose you have a system with an inch by inch video screen that can display pixels per inch if a cclor lookup table with positions is used with this system what is the smallest possible size in bytes for the frame buffer  consider an rgb raster system that has a by frame buffer with a bits per pixel and a color lookup table with bits per pixe  a how many distinct gray lev els can be displayed with this system  b how many distinct colors including gray levels can be displayed  c how many colors cai be displayed at any one time  d what is the total memory size  e explain two methods for reducing memory size while maintain ng the same color capabilities  modify the scan line algorithm to apply any specified rectangular fill pattern to a poly  gon interior starting from a designated pattern position write procedure to fill the interior of a given ellipse with a specified pattern write a procedure to implement the set pat terrrepresentat ion function  exercises  chapler atuributes of output primitives  22 23  24  27 28  23  32 33  34 35   define and implement a procedure for changing the size of an existing rectangular till pattern write a procedure to implement a soft fill algorithm carefully define what the soft fill algorithm is to accomplish and how colors are to be combined  devise an algorithm or adjusting the height and width of  haracters defined as rectan gular grid patterns  implement routines for setting the character up vector and the text path for controlling the display of character strings  write a program to align text as specified by input values for the alignment parame  ters  develop procedures jor implementing the marker attribute functions compare attribute implementation procedures needed by systems that employ bun  dled attributes to those needed by systems using unbundicd attributes  develop procedures or storing and accessing attributes in unbundled system attribute tables the procedures are to be designed to store designated attribute values in the system tables to pass attributes to the appropriate output routines and to pass attrrb  utes to memory locations specified in inquiry commands  set up the same procedures described in he previous exercise for bundled system at tribute tables   implement an antialiasing procedure by extending bresenham s line algorithm to ad  just pixel intensities in the vicinity of a line path  implement an antialiasing procedure far the midpoint line algorithm  develop an algorithm for antialiasing elliptical boundaries  modify the scan line algorithm for area fill ta incorporate antialiasing use coherence techniques to reduce calculations on successive scan lines write a program to implement the pitteway watkinson artialiasing algorithm as a scan line procedure to fill a polygon interior use the routine setpixel x y intensity to load the intensity value into the frame buffer at location x y   chapter   two dimensional  geometric transformations  final   position ew  a rf  ra      ee      w ith the procedures for displaying output primitives and their attributes we can create a variety of pictures and graphs in many applications there is also a need for altering or manipulating displays design applications and facility layouts are created by arranging the orientations and sizes of the component parts of the scene and animations are produced by moving the camera or the objects in a scene along animation paths changes in orientation size and shape are accomplished with geometric transformations that alter the coordinate descriptions of objects the basic geometric transformations are trans lation rotation and scaling other transformations that are often applied to ob jects include reflection and shear we first discuss methods for performing geo metric transformations and then consider how transformation functions can be incorporated into graphics packages  here we first discuss general procedures for applying translation rotation and scaling parameters to reposition and resize two dimensional objects then in section we consider how transformation equations can be expressed in a more convenient matrix formulation that allows efficient combination of object transformations  translation a translation is applied to an object by repositioning it aiong a straight line path from one coordinate location to another we translate a two dimensional point by adding translation distances t and t  to the original coordinate position x y to move the point to a new position x  y     xo axtt v ytt   the translation distance pair t  t  is called a translation vector or shift vector  we can express the translation equations as a single matrix equation by using column vectors tc represent coordinate positions and the translation vec tor p  p  et t   xx xx ty this allows us to write the two dimensional translation equations in the matrix form  p p t  sometimes matrix transformation equations are expressed in terms of coordinate row vectors instead of column vectors in this case we would write the matrix representations as p  x y and t  i t  since the column vector representa tion for a point is standard mathematical notation and since many graphics packages for example gks and phigs also use the column vector representa tion we will follow this convention  translation is a rigid body transformation that inoves objects without defor mation that is every point on the object is translated by the same amount a straight line segment is translated by applying the transformation equation to each of the line endpoints and redrawing the line between the new endpoint po sitions polygons are translated by adding the translation vector to the coordinate position of each vertex and regenerating the polygon using the new set of vertex coordinates and the current attribute settings  illustrates the applica tion of a specified translation vector to move an object from one position to an other  similar methods are used to translate curved objects to change the position of a circle or ellipse we translate the center coordinates and redraw the figure in the new location we translate other curves for example splines by displacing the coordinate positions defining the objects then we reconstruct the curve paths using the translated coordinate points  ve yo      att h h  moving a polygon from position a 10 20   to position b with the translation ib vector  50 75   translating a point from position p to position p with translation vector t    rotation of an object through angle  about the pivot point x y    rotation of a point from position x y to position x  y through an angle  telative to the coordinate origin the original angular displacement of the point from the x axis is   rotation a two dimensional rotation is applied to an object by repositioning it along a cir cular path in the xy plane to generate a rotation we specify a rotation angle  and the position x  y  of the rotation point or pivot point about which the ob ject is to be rotated   positive values for the rotation angle define coun terclockwise rotations about the pivot point as in  and negative values rotate objects in the clockwise direction this transformation can alsa be de scribed as a rotation about a rotation axis that is perpendicular to the xy plane and passes through the pivot point  we first determine the transformation equations for rotation of a point posi tion p when the pivot point is at the coordinate origin the angular and coordi nate relationships of the original and transformed point positions are shown in  in this figure r is the constant distance of the point from the origin angle  is the original angular position of the point from the horizontal and  is the ro tation angle using standard trigonometric identities we can express the trans formed coordinates in terms of angles and  as   x rcos    rcos cos rsindsin d   y  rsin   rcos sin   rsin dos the original coordinates of the point in polar coordinates are x rcos  versing  substituting expressions into we obtain the transformation equations for rotating a point at position x y through an angle about the origin  x xcos  ysin  y xsind ycos   with the column vector representations for coordinate positions we can write the rotation equations in the matrix form  p r p  where the rotation matrix is cos  sin    sin  cos  when coordinate positions are represented as row vectors instead af col umn vectors the matrix product in rotation equation is transposed go that the transformed row coordinate vector x y  is calculated as pt  r p t  pr r where p   x y  and the transpose r of matrix r is obtained by interchanging rows and columns for a rotation matrix the transpose is obtained by simply changing the sign of the sine terms rotation of a point about an arbitrary pivot position is illustrated in  using the trigonometric relationships in this figure we can generalize eqs to obtain the transformation equations for rotation of a point about any specified ro tation position x  y   x  x   v x cos  y y  sin d wiry t g v sin  yy cos   these general rotation equations differ from eqs by the inclusion of additive terms as well as the multiplicative factors on the coordinate values thus the matrix expression could be modified to include pivot coordinates by matrix addition of a column vector whose elements contain the additive translational terms in eqs  there are better ways however to formulate such matrix equa tions and we discuss in section a more consistent scheme for representing the transformation equations  as with translations rotations are rigid body transformations that move objects without deformation every point on an object is rotated through the same angle a straight line segment is rotated by applying the rotation equations to each of the line endpuints and redrawing the line between the new end point positions polygons are rotated by displacing each vertex through the speci fied rotation angle and regenerating the polygon using the new vertices curved lines are rotated by repositioning the defining points and redrawing the curves a circle or an cllipse for instance can be rotated about a noncentral axis by mov ing the center position through the are that subtenas the specified rotation angle an ellipse can be rotated about its center coordinates by rotating the major and minor axes  sealing a scaling transformation alters the size of an object this operation can be car ried out for polygons by multiplying the coordinate values x y of each vertex by scaling factors s and s to produce the transformed coordinates x  y   nos xx s yorysy 10  scaling factor s scales objects in the x direction while s scales in the y direction the transformation equations 10 can also be written in the matrix form  iy   e 11 or p s p 12  where s is the by scaling matrix in eq 11  any positive numeric values can be assigned to the scaling factors s and s values less than reduce the size of objects values greater than produce an en largement specifying a value of for both s and s leaves the size of objects un changed when s and s are assigned the same value a uniform scaling is pro  section basic transformations  s igure rotating a point from position x y to position ix y  through an angle  about rotation point x  y   chapter two dimensional geometric transformations  a  b  turning a square a into a rectangle b with scaling factors s  2ands     a line scaled with eq 12 using  s  is reduced in size and moved closer to the coordinate ongin  pp    scaling relative to a chosen fixed point  y  distances from each polygon vertex to the fixed point are scaled by transformation equations 13  duced that maintains relative object proportions unequai values for s and s re sult in a differential scaling that is often used in design applications where pic tures are constructed fram a few basic shapes that can be adjusted by scaling and positioning transformetions    objects transformed with eq 11 are both scaled and repositioned scaling factors with values less than move objects closer ta the coordinate origin while values greater than move coordinate positions farther from the origin figure illustrates scaling a line by assigning the value toa both s and sy in eq 11 both the line length and the distance from the origin are reduced by a factor of  we can control the location of a scaled object by choosing a position called the fixed point that is to remain unchanged after the scaling transformation co ordinates for the fixed point x y can be chosen as one of the vertices the object centroid or any other position   a polygon is then scaled relative to the fixed point by scaling the distance from each vertex to the fixed point for a ver tex with coordinates x y  the scaled coordinates x  y  are calculated as xi say t x  xpsy y yy  ly  ups  13  we can rewrite these scaling transformations to separate the multiplicative and additive terms  xo x s t a1 s  14  yo yes  yl  sy where the additive terms x  s  and y  s  are constant for all points in the object  including coordinates for a fixed point in the scaliny equations is similar to including coordinates for a pivot point in the rotation equations we can set up a column vector whose elements are the constant terms in eqs 14 then we add this column vector to the product s  p in eq 12 in the next section we discuss a matrix formulation for the transformation equations that involves only matrix multiplication  polygons are scaled by applying transformations 14 to each vertex and then regenerating the polygon using the transformed vertices other objects are scaled by applying the scaling transformation equations to the parameters defin ing the objects an ellipse in standard position is resized by scaling the semima jor and semiminor axes and redrawing the ellipse about the designated center co ordinates uniform scaling of a circle is done by simply adjusting the radius then we redisplay the circle about the center coordinates using the transformed radius  coordinates  many graphics applications involve sequences of geometric transformations an animation for example might require an object to be translated and rotated at each increment of the motion in design and picture construction applications we perform translations rotations and scalings to fit the picture components into their proper posihons here we consider how the matrix representations dis cussed in the previous sections can be reformulated so that such transformation sequences can be efficiently processed  we have seen in section that each of the basic transformations can be ex pressed in the general matrix form p m p  m  15  with coordinate positions p and p represented as column vectors matrix m isa by array containing multiplicative factors and m is a two element column matrix containing translational terms for translation mj is the identity matrix for rotation or scaling m contains the translational terms associated with the pivot point or sealing fixed point to produce a sequence of transformations with these equations such as scaling followed by rotation then translation we must calculate the transformed coordinates one step at a time first coordinate posi tions are scaled then these scaled coordinates are rotated and finally the rotated coordinates are translated a more efficient approach would be to combine the transformations so that the final coordinate positions are obtained directly from the initial coordinates thereby eliminating the calculation of intermediate coordi nate values to be able to do this we need to reformulate eq 15 to eliminate the matrix addition associated with the translation terms in mp  we can combine the multiplicative and translational terms for two dimen sional geometric transformations into a sing e matrix representation by expand ing the by matrix representations to by matrices this allows us to express all transformation equations as matrix multiplications providing that we also ex pand the matrix representations for coordinate positions to express any two di mensional transformation as a matrix multiplication we represent each cartesian coordinate position gr y with the homogeneous coordinate triple x  yy fi  where yooh ya  hus a gencral homogeneous coordinate representation can also be written as h x ay h  for two dimensional geometric transformations we can choose the ho mogeneous parameter h to be any nonzero value thus there is an infinite num ber of equivalent homogeneous representations for each coordinate point x y  a convenient choice is simply to set h  each two dimensional position is then represented with homogeneous coordinates x y  other values for parameter are needed for example in matrix formulations of three dimensioral viewing transformations  the term omogeneous courdmatrs is used in mathematics to refer to the ef tect of this representation on cartesian equations when a cartesian point x y is converted to a homogeneous representation x  yy  equations containing x and y such as ffx y   become homogeneous equations in the three parame lers x  y  and h this just means that if each of the three parameters is replaced by any value v times that parameter the value  can be factored out of the equa tions  expressing positions in homogeneous coordinates allows us to represent all geometric transformation equations as matrix multiplications coordinates are section matrix representations and 4omageneous coordinates chapter two dimensional geometric transformations represented with three element column vectors and transformation operations are written as by matrices for translation we have x f  x yypato y y 17 00 which we can write in the abbreviated form p tct t  p 18  with t t  t  as the by translation matrix in eq 17 the inverse of the trans lation matrix is obtained by replacing the translation parameters t and t with their negatives  t and t  similarly rotation transformation equations about the coordinate origin are now written as  x cos  sind x y j  sing cos of  y 19 1yqi or as p  r p 20  the rotation transformation operator r 1s the by matrix in eq 19 with rotation parameter we get the inverse rotation matrix when  is replaced with   finally a scaling transformation relative to the coordinate ongin is now ex pressed as the matrix multiplication x s 90 yi d o s o  y 21  oc or p  sis s  p 22  where s s  s  is the by matrix in eq 21 with parameters s and s  replac ing these parameters with their multiplicative inverses s and s  yields the inverse scaling matrix  matrix representations are slandard methods for implementing transforma tions in graphics systems in many systems rotation and scaling functions pro duce transformations with respect to the coordinate origin as in eqs 19 and 21 rotations and scalings relative to other reference positions are then handled as a succession of transformation operations an alternate approach in a graphics package is to provide parameters in the transformation functions for the scaling fixed point coordinates and the pivot point coordinates general rotation and scaling matrices that include the pivot or fixed point are then set up directly without the need to invoke a succession of transformation functions  with the matrix representations of the previous section we can set up a matrix for any sequence of transformations as a composite transformation matrix by calculating the matrix product of the individual transformations forming prod ucts of transformation matrices is often referred to as a concatenation or compo sition of matrices for column matrix representation of coordinate positions we form composite transformations by multiplying matrices in order from right to left that is each successive transformation matrix premultiplies the product of the preceding transformation matrices  translations if two successive translation vectors f ty  and   are applied to a coordi nate position p the final transformed location p is calculated as phe tila ta atc ty  pi  at ty ta tay tat p where p and p are represented as homogeneous coordinate column vectors we can verify this resujt by calculating the matrix product for the two associative groupings also the composite transformation matrix for this sequence of trans lations is te ty 00 ty  te ty of ty f fo tatty  o c0 ot t x ty tet fed  thy  te fi  fy  25 which demonstrates that two successive translations are additive rotations two successive rotations applied to point p produce the transformed position p  r    r    p   r   robe p 20  by multiplying the two rotation matrices we can verify that two successive rota tions are additive  r a   r g   rca  ey  275 so that the final rotated coordinates can be calculated with the composite rotation matrix as p r   p  28  section composite transformations chapter two dimensional geometric transformations  x    a  scalings concatenating transformation matrices for two successive scaling operations pro duces the following composite scaling matrix  s2 o sx sx sg of  sy o  sy sp 29 ee  or s2 sy2  sey sp  s sx1  sens sy1  sya  30  the resulting matrix in this case indicates that successive scaling operations are multiplicative that is if we were to triple the size of an object twice in succes sion the fina size would be nine times that of the original  general pivot point rotation with a graphics package that only provides a rotate function for revolving objects about the coordinate origin we can generate rotations about any selected pivot point x  y  by performing the following sequence of translate rotate translate operations  translate the object so that the pivot point position is moved to the coordi nate origin  rotate the object about the coordinate origin  translate the object so that the pivot point is returned to its original posi tion  this transformation sequence is illustrated in  the composite transforma  ate yel   fb c   id  original powinwn tranelateon of rotaton transition or object and object so that about object so that pivot point pivot point origin the pivot point ox y b ts at a retumed origin to position x y   a transformation sequence for rotating an object about a specified pivot point using the rotation matrix r  of transformation 19  tion matrix for tlus sequence is obtained with the concatenation section composite transformations x cos sin 0o x yy   sine cos off co y  90 1 06 l cosf sin x1  cos  y sin  sind cos vil cos  x sin  3h   which can be expressed in the form tix uy rco  t x  y   rg y  32  where t  x  y   t  x  y  in general a rotate function can be set up to ac cept parameters for pivot point coordinates as well as the rotation angle and to generate automatically the rotation matrix of eq 31  general fixed point scaling  illustrates a transformation sequence tc produce scaling with respect ta a selected fixed position a y  using a scaling function that can only scale rela  ive to the coordinate origin  translate object so that the fixed point coincides with the coordinate origin  seale the object with respect to the coordinate origin  use the inverse translation of step to return the object to its original posi tion  concatenating the matrices for these three operations produces the required scal  ing matrix x s o x s o x  ool y  sy q y  sy yl  sy  331 1 oc 1 or thy  p sls   tx  yy  sc up  sy  this transiormation is automatically generated on systems that provide a scale function that accepts coordinates for the fixed point  general scaling directions parameters s and s scale objects along the x and y directions we can scale an ob ject in other directions by rotating the object to align the desired scaling direc tions with the coordinate axes before applying the scaling transformation suppose we want to apply scaling factors with values specified by parame ters s and s in the directions shown in  ta accomplish the scaling with  ix vy   tat ibe 1c ids ongmal poston transiate object scale object translate object of object and that fixed point with respect so thot the fixed point fixed point x y  te at origin to origin ta returned to pasition x  y   a transformation sequence for scaling an object with respect to a specified fixed position using the scaling matrix s s  s  of transformation 21    scaling parameters s and  are to be applied in orthogonal directions defined by the angular displacement  out changing the orientation of the object we first perform a rotation so that the directions for s and s coincide with the x and y axes respectively then the scal ing transformation is applied followed by an opposite rotation to return points to their original orientations the composite matrix resulting from the product of these three transformations is r    s s    rca   cos  s sin  s  s cos 6sin   ss  cos sin  s sin  s cos  35  as an example of this scaling transformation we turn a unit square into a parallelogram   by stretching it along the diagonal from   to  d we rotate the diagonal onto the y axis and double its length with the transforma tion parameters    s   and   in eq 35 we assumed that scaling was to be performed relative to the ori gin we could take this scaling operation one step further and concatenate the matrix with translation operators so that the composite matrix would include parameters for the specification of a scaling fixed position  concatenation properties matrix multiplication is associative for any three matrices a b and c the ma trix product a  b  c can be performed by first multiplying a and b or by first multiplying b and c  a b c a b c a b  36  therefore we can evaluate matrix products using either a left to right or a right to left associative grouping  on the other hand transformation products may not be commutative the matrix product a  b is not equal to b  a in general this means that if we want    wu    e ool   fal tbl   a square a is converted to a parallelogram b using the composite transformation matrix 35 with s    and    to translate and rotate an object we must be careful about the order in which the composite matrix is evaluated   for some special cases such as a se quence of transformations all of the same kind the multiplication of transforma tion matrices is commutative as an example two successive rotations could be performed in either order and the final position would be the same this commu   tative property holds also for two successive translations or two successive scal ings another commutative pair of operations is rotation and uniform scaling s  s   general composite transformations and computational efficiency a general two dimensional transformation representing a combination of trans lations rotations and scalings can be expressed as x 1s tsyy ets x t  nn sy ts   y 37 1 the four elements rs are the multiplicative rotation scaling terms in the transfor mation that involve only rotation angles and scaling factors elements frs and irs are the translational terms containing combinations of translation distances pivot point and fixed point coordinates and rotation angles and scaling parame ters for example if an object is to be scaled and rotated about its centroid coordi nates x  y  and then translated the values for the elements of the composite transformation matrix are tey fy  roc yor  sog yer ser sy  s cos6 s sin x  s cos   ys sin t   s sin sycos y s cos   x s sin o ty 38  although matrix equation 37 requires nine multiplications and six addi tions the explicit calculations for the transformed coordinates are section composite transformations chapter  two dimensional geometric transformations   ca a se v final  final   position position on a on res cy oo poet    tii4  eee a  b  reversing the order in which a sequence of transformations 1s performed may affect the transformed position of an object in  an object is first translated then rotated in b  the object is rctated first then translated xs xs aw ps yt etsy yofxy ty ts  ersy is i thus we actually only need to perform four multiplications and four additions to transform coordinate positions this is the maximum uumber of computations required for any transformation sequence once the individual matrices have been concatenated and the elements of the composite matrix evaluated without concatenation the indiv dual transformations would be applied one at a time and the number of calculations could be significantly increased an efficent im plementation for the transformation operations therefore is tv formulate trans formation matrices concatenate any transformation sequence and calculate transformed coordinates using eq 39 on parallel systems direct matrix multr plications w th the composite transformation matrix of ec 37 can be equally ef ficient  a general rigid body transformation matrix involving only translations and rotations can be expressed in the form pe vy ir   4en aly thy  oo where the four elements r are the multiplicative rotation terms and elements tr and tr are the translational terms a rigid body change in coordinate position is also sometimes referred to as a rigid motion transformation all angles and dis tances between coordinate positions are unchanged by the transformation in ad dition matrix 40 has the property that its upper left bv submatrix is an or thogonal matrix this means that if we consider each row of the submatrix as a vector then the two vectors     and   ry form an orthogonal set of unit y vectors each vector has unit length boa pk pk ra try eri tea   a u hy te and the vectors are perpendicular their dot product is  kalyx  taylry  g therefore if these unit vectors are transformed by the rotation submatrix  r  psy is converted to a unit vector along the x axis and r  ry is transformed into a unit vector along the y axis of the coordinate system  te ty nyy ty ty of try   43 1 hy ty ty yz tw ol ry pall 44 1 as an example the following rigid body transformation first rotates an object through an angle  about a pivot point x  y  and then translates  t t    rex y  cos  sin x  cos   y sin  ty  sin cos y cos6 x sin  ty 45  here orthogonal unit vectors in the upper left by submatrix are cos  sin and sin cos  and cos  sin  cos sin cos o   sn    46 1 similarly unit vector sin cos  is converted by the transformation matrix in eq 46 to the unit vector  in the y direction  the orthogonal property of rotation matrices is useful for constructing a ro tation matrix when we know the final orientation of an object rather than the amount of angular rotation necessary to put the object into that position direc tions for the desired orientation of an object could be determined by the align ment of certain objects in a scene or by selected positions in the scene  shows an object that is to be aligned with the unit direction vectors u and v  as suming that the original object orientation as shown in  a  is aligned with the coordinate axes we construct the desired transformation by assigning the elements of u to the first row of the rotation matrix and the elements of v to the second row this can be a convenient method for obtaining the transforma tion matrix for rotation within a local or object  coordinate system when we know the final orientation vectors a similar transformation is the conversion of object descriptions from one coordinate system to another and in section we consider how to set up transformations to accomplish this coordinate conversion  since rotation calculations require trignometric evaluations and several multiplications for each transformed point computational efficiency can become an important consideration in rotation transformations in animations and other applications that involve many repeated transformations and small rotation an gles we can use approximations and iterative calculations to reduce computa  section composite transformations  chapter two dimensional geometric transformations   the rotation matrix for revolving an object from position a ta position b can be constructed with the values cf the unit orientation vectors u and v relative to the original orientation  tions in the composite transformation equations when the rotation angle is small the trigonometric functions can be replaced with approximation values based on the first few terms of their power series expansions for small enough angles less than  cos  is approximately and sin  has a value very close to the value of  in radians  f we are rotating in small angular steps about the ori gin for instance we can set cos  to and reduce transformation calculations at each step to two multiplications and two additions for each set of coordinates to be rotated  xo x ysing y xsin y 47  where sin is evaluated once for all steps assuming the rotation angle does nat change the error introduced by this approximation at each step decreases as the rotation angle decreases but even with small rotation angles the accumulated error over many steps can become quite large we can control the accumulated error by estimating the error in x and y at each step and resetting object posi tions when the error accumulation becomes too great  composite transformations often involve inverse matrix calculations trans formation sequences for general scaling directions and for reflections and shears section  for example can be described with inverse rotation components as we have noted the inverse matrix representations for the basic geometric frans formations can be generated with simple procedures an inverse translation ma trix is obtained by changing the signs of the translation distances and an inverse rotation matrix is obtained by performing a matrix transpose or changing the sign of the sine terms  these operations are much simpler than direct inverse matrix calculations  an implementation of composite transformations is given in the following procedure matrix m is initialized to the identity matrix as each individual transformation is specified it is concatenated with the total transformation ma trix m when all transformations have been specified this composite transforma tion is applied to a given object for this example a polygon is scaled and rotated about a given reference point then the object is translated  shows the original and final positions of the polygon transformed by this sequence section composite transformations 100 200 x 100 200 x  a  oj   polygon a is transformed into b by the composite operations in the following procedure   include math h  include graphics h  typedef float matrix3x3   matrix3x3 thematrix  void matrix3x3setidentity matrix3x3 m  int  for i i i  for j j j  m il j  gi     multiplies matrix a times b putting result in b  void matrix3x3premultiply matrix3x3 a matrix3x3 b   int r c  matrix3x3 tmp  for ry  r  r  for c  c  c ht tmp r ic  afr  o bl o c  afr  i bll fic  alr  bl2 fel  for r  x  r  for c     c  b rife  tmp r cl   void translate2 int tx int ty  matrix3x3 m  matrix3x3settdentity m  m oj  tx  mf1   ty  matrix3x3premultiply m thematrix    void scale2  loat sx oat sy wept refpt   matrix3x3 m  matrix3x3secidentity m  m o   sx m o    sx  refpt x m l ll  sy  m     sy  refpt y matrix3x3premultiply m thematrix   void rotate2 float a wcept2 refpr   matrix3x3 m  matrix3x3setidentity m  a  ptoradians a  m q  o01  cosf a  m  sint a  m  refppt x   cosf a   refpt y  sinf a  m   sinf a  m   cost a  m z  refpt y   cosf a   refpt x  sinf a  matrix3x3premu tiply m thematrix    void transfurmpoints2 int npts wept2 pts  int k float tmp for k  k  npts k   tmp  cthoematrix   pts k x  thematrix   pts k y  thematrix   prs k y  thematrix   pts x x  thematrix  pts k  y  uhematrix  pts k x  tmp    void main int arge char  argv  c wept2 pts       wept2 refpt    long windowin  opengraphics  azgv   setbacxground white  setcolor blue  pfillarea  pts  matrix3x3setiidentity thematrix  scalez  refpt  rotate2  refpt  translate2   transformpoints2  pts  pfillaarea pts  sleep   closegraphics windowid     basic transformations such as translation rotation and scaling are included in most graphics packages some packages provide a few additional transforma tions that are useful in certain applications two such transformations are reflec tion and shear  reflection a reflection is a transformation that produces a mirror image of an object the mirror image for a two dimensional reflection is generated relative to an axis of reflection by rotating the object about the reflection axis we can choose an axis of reflection in the xy plane or perpendicular to the xy plane when the re flection axis is a line in the xy plane the rotation path about this axis is in a plane perpendicular to the xy plane for reflection axes that are perpendicular to the xy plane the rotation path is in the xy plane following are examples of some com mon reflections  reflection about the line y  the x axis is accomplished with the transfor mation matrix 0  48  this transformation keeps x values the same but flips the y values of coordi nate positions the resulting orientation of an object after it has been reflected about the x axis is shown in  to envision the rotation transformation path for this reflection we can think of the flat object moving out of the xy plane and rotating through three dimensional space about the x axis and back into the xy plane on the other side of the x axis  a reflection about the y axis flips x coordinates while keeping y coordinates the same the matrix for this transformation is  01 49   illustrates the change in position of an object that has been reflected about the line x  the equivalent rotation in this case is through three di mensional space about the y axis  we flip both the x and y coordinates of a point by reflecting relative to an axis that is perpendicular to the xy plane and that passes through the coordinate origin this transformation referred to as a reflection relative to the coordinate origin has the matrix representation   50  section other transformations  original position reflected position   reflection of an object about the x axis  original reflected position pasition py   reflection of an object about the y axis   y reflected position v ed  x   xn   md original position  reflection of an object relative to an axis perpendicular to the ry plane and passing through the coordinate origin  you  original  position ro   a  py  sea  reflected pos tion f      reflection of an object with respect to the line y  x   y y pra aa ween eee o71 jz     ve e  ee xap x  reflection of an object relative to an axis perpendicular to the xy plane and passing through point p   an example of reflection about the origin is shown in  the reflection ma trix 50 is the rotation matrix r  with   we are simply rotating the ob ject in the ry plane half a revolution about the origin  reflection 50 can be generalized to any reflection point in the xy plane   this reflection is the same as a rotation in the xy plane using the reflection point as the pivot point  if we chase the reflection axis as the diagonal line y  x   the re flection matrix is ors eou  oo a ey a we can derive this matrix by concatenating a sequence of rotation and coordi nate axis reflection matrices one possible sequence is shown in  here we first perform a clockwise rotation through a angle which rotates the line y  x onto the x axis next we perform a reflection with respect to the x axis the final step is to rotate the line y  x back to its original position with a counter clockwise rotation through  an equivalent sequence of transformations is first to reflect the object about the x axis and then to rotate counterclockwise  to obtain a transformation matrix for reflection about the diagonal y  x we could concatenate matrices for the transformation sequence  clockwise ro tation by   reflection about the y axis and  counterclockwise rotation by  the resulting transformation matrix is qo 0 32  shows the original and final positions for an object transformed with section this reflection matrix other transformations reflections about any line y  mx  in the xy plane can be accomplished with a combination of translate rotate reflect transformations in general we first  translate the line so that it passes through the origin then we can rotate the line ne onto one of the coordinate axes and reflect about that axis finally we restore the line to its original position with the inverse rotation and translation transforma  tions we can implement reflections with respect to the coordinate axes or coordi  nate origin as scaling transformations with negative scaling factors also ele ments of the reflection matrix can be set to values other than  values whose magnitudes are greater than shift the mirror image farther from the reflection fa axis and values with magnitudes less than bring the mirror image closer to the reflection axis y shear  i a transformation that distorts the shape of an object such that the transformed __   shape appears as if the object were composed of internal layers that had been caused to slide over each other is called a shear two common shearing transfor gg mations are those that shift coordinate x values and those that shift y values  an x direction shear relative to the x axis is produced with the transforma tion matrix 10 53 ov which transforms coordinate positions as   x x sh y yay 54  c any real number can be assigned to the shear parameter sh a coordinate posi poe tion x y is then shifted horizontally by an amount proportional to its distance y sequence of transformations value from the x axis y   setting sh to for example changes the square in to produce reflection about  into a parallelogram negative values for sh shift coordinate positions  the line y  x  a cleckwise   to the left rotation of  b reflection we can generate x direction shears relative to other reference lines with about the x axisrand c counterclockwise rotation sh  shy yet by  55 60  with coordinate positions transformed as x x  shy  yres  yoy 56  an example of this shearing transformation is given in  for a shear para meter value of relative to the line y      reflected position  original position  reflection with respect to the line y  x       a  bd  of   a unit square a is converted to a parallelogram b using the x direction shear matrix 53 with sh   a y direction shear relative to the line x  formation matrix xi is generated with the trans  sh  shy xyep 57  which generates transformed coordinate positions wos x yl sh kx  xe  y 58  this transformation shifts a coordinate position vertically by an amount propor tional to its distance from the reference line x  x   illustrates the conversion of a square into a parallelogram with sh  and x    shearing operations can be expressed as sequences of basic transformations the x direction shear matrix 53 for example can be written as a composite transformation involving a series of rotation and scaling matrices that would scale the unit square of  along its diagonal while maintaining the origi nal lengths and orientations of edges parallel to the x axis shifts in the positions of objects relative to shearing reference lines are equivalent to translations    d       yar  yer    a  b   a unit square a is transformed toa shifted parallelogram b with sh  and y q  1in the shear matrix 55   y      a1   xy   x ng ea x a  b  a unit square a is turned into a shifted parallelogram b with parameter values sh  and x   in the y direction using shearing transformation 57   graphics applications often require the transformation of object descriptions from one coordinate system to another sometimes objects are described in non cartesian reference frames that take advantage of object symmetries coordinate descriptions in these systems must then be converted to cartesian device coordi nates for display some examples of two dimensional non cartesian systems are polar coordinates elliptical coordinates and parabolic coordinates in other cases we need to transform between two cartesian systems for modeling and design applications individual objects may be defined in their own local carte sian references and the local coordinates must then be transformed to position the objects within the overall scene coordinate system a facility management program tor office layouts for instance has individual coordinate reference de scriptions for chairs and tables and other furniture that can be placed into a floor plan with multiple copies of the chairs and other iterns in different positions in other applications we may simply want to reorient the coordinate reference for displaying a scene relationships between cartesian reference systems and some esmmon non cartesian systems are given in appendix a here we consider transformations between two cartesian frames of reference   shows two cartesian systems with the coordinate origins at  and xo yo and with an orientation angle  between the x and x axes to trans form object descriptions from xy coordinates to x y coordinates we need to set up a transformation that superimposes the x y axes onto the xy axes this is done in two steps  translate so that the origin  p yg of the x y system is moved to the origin of the xy system  rotate the x axis onto the x axis  translation of the coordinate origin is expressed with the matrix operation qo  x t  o  o  yo 59 061 section transformations between coordinate systems  chapter two dimensional geometric transformations   a cartesian x y system positioned at xp yp with orientation  in an xy cartesian system  and the orientation of the two systems after the translation operation would ap  pear as in  to get the axes of the two systems into coincidence we then perform the clockwise rotation cos sin r     sin cos  60  concatinating these two transformations matrices gives us the complete compos ite matrix for transforming object descriptions from the ry system to the x y sys tem  myyry  r  t xo  yo  61  an alternate method for giving the orientation of the second coordinate sys tem is to specify a vector v that indicates the direction for the positive y axis as shown in  vector v is specified as a point in the xy reference frame rela tive to the origin of the xy system a unit vector in the y direction can then be obtained as  al y   v  uy en a a ny and we obtain the unit vector u along the x axis by rotating v clockwise  u  yy  v    u my  63   position of the reference frames shown in  after translating the origin of the x y system to the coordinate origin of the xy system  x axis   cartesian system x y with origin at py  xa yo and y axis parallel to vector v  in section we noted that the elements of any rotation matrix could be ex pressed as elements of a set of orthogonal unit vectors therefore the matrix to rotate the xy system into coincidence with the xy system can be written as uy uy o r  vy 64  as an example suppose we choose the orientation for the y axis as v    then the x axis is in the positive y direction and the rotation transformation ma trix is  oro oo  i  equivalently we can obtain this rotation matrix from 60 by setting the orienta tion angle as   in an interactive application it may be more convenient to choose the direc tion for v relative to position py than it is to specifv it relative to the ry coordi nate origin unit vectors u and v would then be oriented as shown in  the components of v are now calculated as pi  po v  lp  pol  65  and u is obtained as the perpendicular to v that forms a right handed cartesian system  y axis   a cartesian x y system defined with two coordinate positions py and p  within an sy reference frame   section transformations between coordinate systems chapter  two dimensional geometric transformations  a coordinate transformation of the form x  ax  ayy  b  y ay x  ayy  by 66  is called a two dimensional affine transformation each of the transformed coor dinates x and y is a linear function of the original coordinates x and y and para meters a and  are constants determined by the transformation type affine transformations have the general properties that parallel lines are transformed into parallel lines and finite points map to finite points  translation rotation scaling reflection and shear are examples of two di mensional affine transformations any general two dimensional affine transfor mation can always be expressed as a composition of these five transformations another affine transformation is the conversion of coordinate descriptions from one reference system to another which can be described as a combination of translation and rotation an affine transformation involving only rotation trans lation and reflection preserves angles and lengths as well as parallel lines for these three transformations the lengths and angle between two lines remains the same after the transformation  graphics packages can be structured so that separate commands are provided to a user for each of the basic transformation operations as in procedure trans  formobject a composite transformation is then set up by referencing individ ual functions in the order required for the transformation sequence an alternate formulation is to provide users with a single transformation function that in cludes parameters for each of the basic transformations the output of this func tion is the composite transformation matrix for the specified parameter values both options are useful separate functions are convenient for simple transforma tion operations and a composite function can provide an expedient method for specifying complex transformatian sequences  the phigs library provides users with both options individual commands for generating the basic transformation matrices are translate trans atevector matrixtrans ate rotate theta matrixrotate scale scalevector matrixscale  hach of these functions produces a by transformation matrix that can then be used to transform coordinate positions expressed as homogeneous column vec tors parameter translatevector is a pointer to the pair of translation dis tances  and t  similarly parameter scalevector specifies the pair of scaling values s and s  rotate and scale matrices matrixtranslate and matrix scale transform with respect to the coordinate origin we concatenate transformation matrices that have been previously set up with the function composematrix matrix2 matrixl matrixout  where elements of the composite output matrix are calculated by postmultiply ing matrix2 by matrix a composite transformation matrix to perform a com bination scaling rotation and translation is produced with the function buildfransformationmatrix referencepoint translatevector theta scalevector matrix  rotation and scaling are carried out with respect to the coordinate position speci fied by parameter referencepoint the order for the transformation sequence is assumed to be  scale  rotate and  translate with the elements for the composite transformation stored in parameter matrix we can use this function to generate a single transformation matrix or a composite matrix for two or three transformations in the order stated  we could generate a translation matrix by setting scalevector    theta  and assigning x and y shift values to parameter translatevector any coordinate values could be assigned to pa rameter referencepoint since the transformation calculations are unaffected by this parameter when no scaling or rotation takes place but if we only want to set up a translation matrix we can use function translate and simply specify the translation vector a rotation or scaling transformation matrix is specified by setting translatevector   and assigning appropriate values to parame ters referencepoint theta and scalevector to obtain a rotation matrix we set scalevector    and for scaling only we set theta  if we want to rotate or scale with respect to the coordinate origin it is simpler to set up the matrix using either the rotate or scale function  since the function buildtransformationmatrix always generates the transformation sequence in the order  scale  rotate and  translate the fol lowing function is provided to allow specification of other sequences  composetransformationmatrix matrixin referencepoint translatevector theta scalevector matrixout  we can use this function in combination with the buildtransformationma trix function or with any of the other matrix construction functions to compose any transformation sequence for example we could set up a scale matrix about a fixed point with the bui ldtransformat ionmatrix function then we could use the composetransformationmatrix function to concatenate this scale matrix with a rotation about a specified pivot point the composite rotate scale sequence is then stored in matrixout  after we have set up a transformation matrix we can apply the matrix to individual coordinate positions of an object with the function transformpoint inpoint matrix outpoint  where parameter inpoint gives the initial xy coordinate position of an object point and parameter out point contains the corresponding transformed coordi nates additional functions discussed in chapter are available for performing two dimensional modeling transformations  section transformation functions chapter two dimensional geometric transformations  a    translating an object from screen position a to position b by moving a rectangular block of pixel values coordinate positions p   and p   specify the limits of the rectangular block to be moved and p  is the destination reference posiion    the particular capabilities of raster systems suggest an alternate method for transforming objects raster systems store picture information as pixel patterns in the frame buffer therefore some simple transformations can be carried out rapidly by simply moving rectangular arrays of stored pixel values from one lo cation to another within the frame buffer few arithmetic operations are needed so the pixel transformations are particularly efficient  raster functions that manipulate rectangular pixel arrays are generally re ferred to as raster ops moving a block of pixels from one location to another is also called a block transfer of pixel values on a bilevel svstem this operation is called a bitblt bit block transfer  particularly when the function is hardware implemented the term pixbit is sometimes used for block transfers on multi level systems multiple bits per pixel   illustrates translation performed as a block transfer of a raster area all bit settings in the rectangular area shown are copied as a block into an other part of the raster we accomplish this translation bv first reading pixel in tensities from a specified rectangular area of a raster into an array then we copy the array back into the raster at the new location the original object could be erased by filling its rectangular area with the background intensity assuming the object does not overlap other objects in the scene  typical raster functions often provided in graphics packages are   copy  movea pixel block from one raster area to another  read  save a pixel block in a designated array  write  transfer a pixel array to a position in the frame buffer some implementations provide options for combining pixel values in replace made pixel values are simply transfered to the destination positions other op tions for combining pixel values include boolean operations aid or and exclte sive or and binary arithmetic operations with the exclusive or mode two succes sive copies of a block to the same raster area restores the values that were originally present in that area this technique can be used to move an object across a scene without destroying the background another option for adjusting pixel values is to combine the source pixels with a specified mask this allows only selected positions within a block to be transferred or shaded by the patterns defined in the mask   12014 3 93 7  6 1 10  a  b  c   rotating an array of pixel values the original array orientation 1s shown in a  the array orientation after a counterclockwise rotation is shown in b  and the array orientation after a rotation is shown in   __ destination rotated pixel areas pixel array  destination pixel array   a raster rotation for a rectangular block of pixels is accomplished by mapping the destination pixel areas onto the rotated block  rotations in degree increments are easily accomplished with black trans fers we can rotate an object counterclockwise by first reversing the pixel val ues in each row of the array then we interchange rows and columns a rota tion is obtained by reversing the order of the elements in each row of the array then reversing the order of the rows  demonstrates the array manipu lations necessary to rotate a pixel block by and by  for array rotations that are not multiples of  we must perform more computations the general procedure is illustrated in  each destination pixel area is mapped onto the rotated array and the amount of overlap with the rotated pixel areas is calculated an intensity for the destination pixel is then computed by averaging the intensities of the overlapped source pixels weighted by their percentage of area overlap  raster scaling of a block of pixels is analogous to the cell array mapping discussed in section 13 we scale the pixel areas in the original block using specified values for s and s and map the scaled rectangle onto a set of destina tion pixels the intensity of each destination pixel is then assigned according to its area of overlap with the scaled pixel areas     poteet i ty 1 i       b  4___ destination    i t  i pixel array b ju 74 bbb trot ett i  t   t   scaled array  eta i t x    mapping destination pixel areas onto a scaled array of pixel values scaling factors s  s  are applied relative to fixed point x y  section raster methods for transformations chapter two dimensional geometric transformations  summary the basic geometric transformations are translation rotation and scaling trans lation moves an object in a straight line path from one position to another rota tion moves an object from one position to another in a circular path around a specified pivot paint ratation point  scaling changes the dimensions of an object relative toa specified fixed point  we can express two dimensional geometric transformations as by ma trix operators so that sequences of transformations can be concatenated into a single composite matrix this is an efficient formulation since it allows us to re duce computations by applying the composite matrix to the initial coordinate po sitions of an object to obtain the final transformed positions to do this we also need to express two dimensional coordinate positions as three element column or row matrices we choose a column matrix representation for coordinate points because this is the standard mathematical convention and because many graph ics packages also follow this convention for two dimensional transformations coordinate positions are then represented with three element nomogeneous coor dinates with the third homogeneous coordinate assigned the value  composite transformations are formed as multiplications of any combina tion of translation rotation and scaling matrices we can use combinations of translation and rotation for animation applications and we can use combinations of rotation and scaling to scale objects in any specified direction in general ma trix multiplications are not commutative we obtain different results for exam ple if we change the order of a translate rotate sequence a transformation se quence involving only translations and rotations is a rigid body transformation since angles and distances are unchanged also the upper left submatrix of a rigid body transformation is an orthogonal matrix thus rotation matrices can be formed by setting the upper left by submatrix equal to the elements of two orthogonal unit vectors computations in rotationg transformations can be re duced by using approximations for the sine and cosine functions when the rata tion angle is small over many rotational steps however the approximation error can accumulate to a significant value  other transformations include reflections and shears reflections are trans formations that rotate an object about a reflection axis this produces a mir ror image of the object with respect to that axis when the reflection axis is per pendicular to the xy plane the reflection is obtained as a rotation in the xy plane when the reflection axis is in the xy plane the reflection is obtained as a rotation ina plane that is perpendicular to the xy plane shear transformations distort the shape of an object by shifting x or y coordinate values by an amount proportional to the coordinate distance from a shear reference line  transformations between cartesian coordinate systems are accomplished with a sequence of translate rotate transformations one way to specify a new co ordinate reference frame is to give the position of the new coordinate origin and the direction of the new y axis the direction of the new x axis is then obtained by rotating the y direction vector clockwise coordinate descriptions of objects in the old reference frame are transferred to the new reference with the transforma tion matrix that superimposes the new coordinate axes onto the old coordinate axes this transformation matrix can be calculated as the concatentation of a translation that moves the new origin to the old coordinate origin and a rotation to align the two sets of axes the rotation matrix is obtained from unit vectors in the x and y directions for the new system two dimensional geometric transformations are affine transformations that is they can be expressed as a linear function of coordinates x and y affine transformations transform parallel lines to parallel lines and transform finite points to finite points geometric transformations that do not involve scaling or shear also preserve angles and lengths  transformation functions in graphics packages are usually provided only for translation rotation and scaling these functions include individual proce dures for creating a translate rotate or scale matrix and functions for generating a composite matrix given the parameters for a transformation sequence  fast raster transformations can be performed by moving blocks of pixels this avoids calculating transformed coordinates for an object and applying scan conversion routines to display the object at the new position three common raster operations bitblts or pixblts are copy read and write when a block of pixels is moved to a new position in the frame buffer we can simply replace the old pixel values or we can combine the pixel values using boolean or arithmetic operations raster translations are carried out by copying a pixel block to a new location in the frame buffer raster rotations in multiples of are obtained by manipulating row and column positions of the pixel values in a block other rotations are performed by first mapping rotated pixel areas onto destination po sitions in the frame buffer then calculating overlap areas scaling in raster trans formations is also accomplished by mapping transformed pixel areas to the frame buffer destination positions  references for additional information on homogeneous coordinates in computer graphics see blinn and  transformation functions in phigs are discussed in hopgood and duce  t oward et al   gaskins  and blake  for information on gks transformation func tions see hopgood et al  and enderle kansy and pfaff   exercises write a program to continuously rotate an object about a pivot point small angles are to be used for each successive rotation and approximations to the sine and cosine functions are to be used to speed up the calculations the rotation angle for each step is to be chosen so that the object makes one complete revolution in less than sec onds to avoid accumulation of coordinate errors reset the original coordinate values for the object at the start of each new revolution  show that the composition of two retations is additive by concatinating the matrix representations for r  and r   to obtain r   r g   rg    we write a set of procedures to implement the buildtrans format ionmatrix and the composetransformationmatrix functions to produce a composite transforma tion matrix for any set of input transformation parameters  write a program that applies any specified sequence of transformations to a displayed object the program is to be designed so that a user selects the transformation se quence and associated parameters from displayed menus and the composite transfor   a exercises chapter two dimensional geometric transforma ons       an ni oo oo  i  eva  mation is then calculated and used to transform the object display the original object and the transformed object in different colars or different fill patterns  modily the transformation matrix 35  for scaling in an arbitrary direction to in clude coordinates for any specified scaling fixed point x y  prove that the multiplication of transformation matrices tor each of the following se quence of operations is commutative  a two successive rotations  b two successive trans ations  c two successive scatings  prove that a uniform scaling s  s  and a rotatior form a commutative pair of opera tions but that in general scaling and rotation are not commutative operations multiply the individual scale rotate and translate matrices in eq 38 to verify the el ements in the composite transformation matrix  show that transformation matrix 51  fora reflection about the line y  x is equiva lent to a reflection relative to the x axis followed by a counterclockwise rotation of  show that transformation matrix 52  for a reflection about the line y  x is equivalent to a reflection relative to the y axis followed by a counterclockwise rotation of  show that two successive reflections about either of the coordinate axes is equivalent to a single rotation about the caordinate origin  determine the form of the transformation matrix for a reflection about an arbitrary line with equation y  mx  b  show that two successive reflections about any line passing through the coordinate origin 1s equivalent to a single rotation about the origin determine a sequence of basic transformations that are equivalent to the x direction shearing matrix 53  determine a sequence of basic transformations that are equivalent to the y direction shearing matrix 571 set up a shearing procedure to display italic characters given a vector font definitior  that is afl character shapes in this font are defined with straight line segments and italic characters are formed with shearing transformations determine an appropriate value for the shear parameter by comparing italics and plain text in some available font define a simple vectar fon for input to your routine  derive the following equations for transforming a coordinate point p  x yi in one cartesian system ta the coordinate values x  yin another cartesian system thal is ro tated by an angle  as in  project point p onto each of the four axes and analyse the resulting right triangles  x xcos  ysin  y   xsin  vcos write a procedure to compute the elements of the matrix for transforming object de scriptions from one cartesian coordinate system to another the second coordinate system is to be defined with an origin point py and a vectar v that gives the directian for the positive y axis of this system  set up procedures for implementing a block transfer of a rectangular area of a frame buffer using onc function to read the area into an array and another function to cop the array into the designated transfer area  determine the results of performing two successive block transfers into the same area of a frame buffer using the various boolean operations  what are the results of performing two successive block transfers into the same area a frame buffer using the binary arithmetic operations  implement a routine to perform block transfers in a trame bulier using any specified boolean operation or a replacement copy operation 23 write a routine to implement rotations in increments of in frame buffer block transfers  exercises 24 write a routine to implement rotations by any specified angle in a frame buffer block transier  25 write a routine to implement scaling as a raster transformation of a pixel block   chapter two dimensional viewing  viewing coordinate window  normalized space     viewport l ws2 a  re me ny window  zt a in  ws ws1 viewport window ws2 viewport    monitor monitor    w e now consider the formal mechanism for displaying views of a picture on an output device typically a graphics package allows a user to specify which part of a defined picture is to be displayed and where that part is to be placed on the display device any convenient cartesian coordinate system referred to as the world coordinate reference frame can be used to define the pic ture for a two dimensional picture a view is selected by specifying a subarea of the total picture area a user can select a single area for display or several areas could be selected for simultaneous display or for an animated panning sequence across a scene the picture parts within the selected areas are then mapped onto specified areas of the device coordinates when multiple view areas are selected these areas can be placed in separate display locations or some areas could be in serted into other larger display areas transformations from world to device co ordinates involve translation rotation and scaling operations as well as proce dures for deleting those parts of the picture that are outside the limits of a selected display area  a world coordinate area selected for display is called a window an area ona display device to which a window is mapped is called a viewport the window defines what is to be viewed the viewport defines where it is to be displayed often windows and viewports are rectangles in standard position with the rec tangle edges parallel to the coordinate axes other window or viewport geome tries such as general polygon shapes and circles are used in some applications but these shapes take longer to process in general the mapping of a part of a world coordinate scene to device coordinates is referred to as a viewing transfor mation sometimes the two dimensional viewing transformation is simply re ferred to as the window to viewport transformation or the windowing transformation but in general viewing involves more than just the transformation from the win dow to the viewport  illustrates the mapping of a picture section that falls within a rectangular window onto a designated rectangular viewport  in computer graphics terminology the term window originally referred to an area of a picture that is selected for viewing as defined at the beginning of this section unfortunately the same term is now used in window manager systems to refer to any rectangular screen area that can be moved about resized and made active or inactive in this chapter we will only use the term window to window ywinas r viewpoint yinax me  l  xw  erin aw  max venues xvnax world coordinates device coordinates  a viewing transformation using standard rectangies for the window and viewport  refer to an area of a world coordinate scene that has been selected for displav when we consider graphical user interfaces in chapter  we will discuss screen windows and window manager systems  some graphics packages that provide window and viewport operations allow only standard rectangles but a more general approach is to allow the rec tangular window to have any orientation in this case we carry out the viewing transformation in several steps as indicated in  first we construct the scene in world coordinates using the output primitives and attributes discussed in chapters and nest to obtain a particular orientation for the window we can set up a two dimensional viewing coordinate system in the world coordi nate plane and define a window in the viewing coordinate system the viewing coordinate reference frame is used to provide a method for setting up arbitrary orientations for rectangular windows once the viewing reference frame is estab lished we can transform desenptions in world coordinates to viewing coordi nates we then define a viewport in normalized coordinates in the range from to and map the viewing coordinate description of the scene to normalized co ordinates at the final step all parts of the picture that he outside the viewport are clipped and the contents of the viewport are transferred to device coordi nates  illustrates a rotated viewing coordinate reference frame and the mapping to normalized coordinates  by changing the position of the viewport we can view objects at different positions on the display area of an output device also by varying the size of viewports we can change the size and proportions of displayed objects we achieve zooming effects by successively mapping different sized windows on a  construct  convert map viewing map normalized world coordinate world coordinates to viewport to  mc scene using wc coordinates vc normalized nvc device       modaling coordinate  to    viewing coordinates   coordinates  transformations viewing using window viewport    coordinates specifications    the two dimensional viewing transformation pipeline device coordinates   setting up a rotated world window in viewing coordinates and the corresponding normalized coordinate viewport  fixed size viewport as the windows are made smaller we zoom in on some part of a scene to view details that are not shown with larger windows similarly more overview is obtained by zooming out from a section of a scene with succes sively larger windows panning effects are produced by moving a fixed size win dow across the various objects in a scene  viewports are typically defined within the unit square normalized coordi nates  this provides a means for separating the viewing and other transforma tions from specific output device requirements so that the graphics package is largely device independent once the scene has been transferred to normalized coordinates the unit square is simply mapped to the display area for the particu lar output device in use at that time different output devices can be used by pro viding the appropriate device drivers  when all coordinate transformations are completed viewport clipping can be performed in normalized coordinates or in device coordinates this allows us to reduce computations by concatenating the various transformation matrices clipping procedures are of fundamental importance in computer graphics they are used not only in viewing transformations but also in window manager sys tems in painting and drawing packages to eliminate parts of a picture inside or outside of a designated screen area and in many other applications  this coordinate system provides the reference frame for specifying the world coordinate window we set up the viewing coordinate system using the proce dures discussed in section first a viewing coordinate origin is selected at some world position po  xo yo  then we need to establish the orientation or rotation of this reference frame one way to do this is to specify a world vector v that defines the viewing y direction vector v is called the view up vector  given v we can calculate the components of unit vectors v  v  vy and u  u  u  for the viewing y and x axes respectively these unit vectors are used to form the first and second rows of the rotation matrix r that aligns the viewing x y axes with the world y  axes  section  viewing coordinate reference frame  x world   ys ey  a  b    a viewing coordinate frame is moved into coincidence with the world frame in two steps  a translate the viewing origin to the world origin then b rotate to align the axes of the two systems  we obtain the matrix for converting world coordinate positions to viewing coordinates as a two step composite transformation first we translate the view ing origin to the world origin then we rotate to align the two coordinate refer ence frames the composite two dimensional transformation to convert world coordinates to viewing coordinates is where t is the translation matrix that takes the viewing origin point p to the world origin and r is the rotation matrix that aligns the axes of the two reference frames  illustrates the steps in this coordinate transformation  once object descriptions have been transferred to the viewing reference frame we choose the window extents in viewing coordinates and select the viewport limits in normalized coordinates   object descriptions are then trans ferred to normalized device coordinates we do this using a transformation that maintains the same relative placement of objects in normalized space as they had in viewing coordinates if a coordinate position is at the center of the viewing window for instance it will be displayed at the center of the viewport   illustrates the window to viewport mapping a point at position xw yw in the window 1s mapped into position xv yv in the associated view port to maintain the same relative placement in the viewport as in the window we require that xu hveup xw xwyn weax  xumin xwax  xwoyn   yo  yun _ yw  yw in ymax  yu min yo max  yroin a point at position rw yw in a designated window is mapped to viewport coordinates xv yu so that relative positions in the two areas are the same  solving these expressions for the viewport position xv yv  we have xv  aveug  kw  xw sx  yo  ymin  yw  ym sy where the scaling factors are x  vmax  xunun xwmax  wn  ay  pes  hain yo max  ywmin equations can also be derived with a set of transformtions that converts the window area into the viewport area this conversion is performed with the fol lowing sequence of transformations  perform a scaling transformation using a fixed point position of xu pin ywymin that scales the window area to the size of the viewport  translate the scaled window area to the position of the viewport  relative proportions of objects are maintained if the scaling factors are the same sx  sy  otherwise world objects will be stretched or contracted in either the x or y direction when displayed on the output device  character strings can be handled in two ways when they are mapped to a viewport the simplest mapping maintains a constant character size even though the viewport area may be enlarged or reduced relative to the window this method would be employed when text is formed with standard character fonts that cannot be changed in systems that allow for changes in character size string definitions can be windowed the same as other primitives for characters formed with line segments the mapping to the viewport can be carried out as a sequence of line transformations  from normalized coordinates object descriptions are mapped to the vari ous display devices any number of output devices can be open in a part cular application and another window to viewport transformation can be performed for each open output device this mapping called the workstation transforma  section window ta viewpart coordinate transiormation chapter  two dimensional viewing viewing coordinate window  normalized space t viewpon  ws2 windowws window monitor monitor  mapping selected parts of a scene in normalized coordinates to different video monitors with workstation transformations  tion is accomplished by selecting a window area in normalized space and a viewport area in the coordinates of the display device with the workstation transformation we gain some additional control over the positioning of parts of a scene on individual output devices as illustrated in  we can use work station transformations to partition a view so that different parts of normalized space can be displayed on different output devices  we define a viewing reference system in a phigs application program with the following function  evaluatevieworientationmatrix xv yo xv yv error viewmatrix  where parameters x0 and y0 are the coordinates of the viewing origin and para meters xv and yv are the world coordinate positions for the view up vector an integer error code is generated if the input parameters are in error otherwise the viewmat rix for the world to viewing transformation is calculated any number of viewing transformation matrices can be defined in an application  to set up the elements of a window to viewport mapping matrix we in voke the function avaluateviewmappingmatrix xwmin xwmax ywmin ymax xvmin xvmax yvmin yvmax error viewmappingmatrix  here the window limits in viewing coordinates are chosen with parameters xwmin xwmax ywmin and ywmax and the viewport limits are set with the nor malized coordinate positions xvmin xvmax yvmin yvmax as with the viewing transformation matrix we can construct several window viewport pairs and use them for projecting various parts of the scene to different areas of the unit square  next we can store combinations of viewing and window viewport map pings for various workstations in a viewing table with setviewrepresentation ws viewindex viewmatrix viewmappingmatrix xclipmin xclipmax yclipmin yclipmax clipxy  where parameter ws designates the output device workstation  and parameter viewindex sets an integer identifier for this particular window viewport pair the matrices viewmatrix and viewmappingmatrix can be concatenated and referenced by the viewindex additional clipping limits can also be specified here but they are usually set to cvincide with the viewport boundaries and pa rameter cl ipxy is assigned either the value moclip or the value clip this allows us to turn off clipping if we want to view the parts of the scene outside the view port we can also select noclip to speed up processing when we know that all of the scene is included within the viewport limits the function setvviewiindex viewindex  selects a particular set of options from the viewing table this view index selec tion is then applied to subsequently specified output primitives and associated attributes and generates a display on each of the active workstations  at the final stage we apply a workstation transformation by selecting a workstation window viewport pair  setworkstationwindow ws xwswindmir xwswindmax ywswindmin ywswindmax  setworkstationviewport ws xwsvportmin xwsvportmax ywsvportmin ywsvportmax  where parameter ws gives the workstation number window coordinate extents are specified in the range from to normalized space  and viewport limits are in integer device coordinates  ifa workstation viewport is not specified the unit square of the normalized reference frame is mapped onto the largest square area possible on an output de vice the coordinate origin of normalized space is mapped to the origin of device coordinates and the aspect ratio is retained by transforming the unit square onto a square area on the output device  example two dimensional viewing example as an example of the use of viewing functions the following sequence of state ments sets up a rotated window in world coordinates and maps its contents to the upper right corner of workstation we keep the viewing coordinate origin at the world origin and we choose the view up direction for the window as   this gives us a viewing coordinate system that is rotated clockwise in the world coordinate reference frame the view index is set to the value  section two dimensional viewing functions chapter two dimensional viewing evaluatevieworlentationmatrix   viewerror viewmat  evaluateviewmappingmatrix  24  75   c  viewmaperror viewmapmat  setviewrepresentation  viewmat viewmapmat    clip  setviewindex   similarly we could set up an additiona transformation with view index that would map a specified window into a viewport at the lower left of the screen two graphs for example could then be displayed at opposite screen comers with the following statements  setviewindex  polyline  axes  polyline  datal  setvviewindex  polyline  axes  polyline  data2  view index selects a viewport in the upper right of the screen display and view index selects a viewport in the lower left corner the function polyline  axes produces the horizontal and vertical coordinate reference for the data plot in each graph   generally any procedure that identifies those portions of a picture that are either inside or outside of a specified region of space is referred to as a clipping algo rithm or simply clipping the region against which an object is to clipped is called a clip window  applications of clipping include extracting part of a defined scene for view ing identifying visible surfaces in three dimensional views antialiasing line seg ments or object boundaries creating objects using sclid modeling procedures displaying a multiwindow environment and drawing and painting operations that allow paris of a picture to be selected for copying moving erasing or duphi cating depending on the application the clip window can be a general polygon or it can even have curved boundaries we first consider clipping methods using rectangular clip regions then we discuss methods for other clip region shapes  for the viewing transformation we want to display only those picture parts that are within the window area assuming that the clipping flags have not been set to noclip  everything outside the window is discarded clipping algorithms can be applied in world coordinates so that only the contents of the window in terior are mapped to device coordinates alternatively the complete world coor dinate picture can be mapped first to device coordinates or normalized device coordinates then clipped against the viewport boundaries world coordinate clipping removes those primitives outside the window from further considera tion thus eliminating the processing necessary to transform those primitives to device space viewport clipping on the other hand can reduce calculations by al lowing concatenation of viewing and geometric transformation matrices but viewport clipping does require that the transformation to device coordinates be section performed for all objects including those outside the window area on raster _ line clipping systems clipping algorithms are often combined with scan conversion  in the following sections we consider algorithms for dipping the following primitive types  point clipping  line clipping straight line segments  area clipping polygons   curve clipping  text clipping line and polygon clipping routines are standard components of graphics pack ages but many packages accommodate curved objects particularly spline curves and conics such as circles and ellipses another way to handle curved objects is to approximate them with straight line segments and apply the line or polygon clipping procedure  assuming that the clip window is a rectangle in standard position we save a point p  x y for display if the following inequalities are satisfied xweyin  xfs awersy   yin  ys yurx where the edges of the clip window pin xwmax lmine wmax can be either the world coordinate window boundaries or viewport boundaries if any one of these four inequalities is not satisfied the point is clipped not saved for display  although point clipping is applied jess often than line or polygon clipping some applications may require a point lipping procedure for example point clipping can be applied to scenes involving explosions or sea foam that are mod eled with particles points distributed in some region of the scene    illustrates possible relationships between line positions and a standard rectangular clipping region a line clipping procedure involves several parts first we can test a given line segment to determine whether it lies completely in side the clipping window if it does not we try to determine whether it lies com pletely outside the window finally if we cannot identify a line as completely in side or completely outside we must perform intersection calculations with one or more clipping boundaries we process lines through the inside outside tests by checking the line endpoints a line with both endpoints inside all clipping boundaries such as the line from p to p  is saved a line with both endpoints outside any one of the clip boundaries line p p in  is outside the win   window    before clipping after clipping  a tb  line clipping against  rectangular clip window  dow all other lines cross one or more clipping boundaries and may require cal culation of multiple intersection points to minimize calculations we try to de vise clipping algorithms that can efficiently identify outside lines and reduce in tersection calculations  for a line segment with endpoints x  y  and   yy and one or both end points outside the clipping rectangle the parametric representation  aeox fey xd   wey tuys  yh peusl could be used to determine values of parameter i for intersections with the chp ping boundary coordinates if the value of u for an intersection with a rectangle boundary edge is outside the range to the line does not enter the interiar of the window at that boundary if the value of u is within the range from to the line segment dues indeed cross into the clipping area this method can be ap phed to each chpping boundary edge in turn to determine whether any part of the line segment is to be displayed line segments that are parallel to window edges can be handled as special cases  clipping line segments with these parametric tesis requires a good deal of computation and faster approaches to clipping are possible a number of effi cient jine clippers have been developed and we survey the major algorithms in the next sections some algorithms are designed explicitly for two dimensional pictures and some are easily adapted to three dimensional applications  cohen sutherland line chpping this is one of the oldest and most popular kne clipping procedures generally the method speeds up the processing of hne segments by performing initial tests that reduce the number of intersections that must be calculated every line end point in a picture is assigned a four digit binary code called a region code that identifies the location of the point relative to the boundaries of the clipping rec tangle regions are set up in reference to the boundaries as shown in  each bit position in the region code is used to indicate one of the four relative co ordinate positions of the point with respect to the clip window to the left right top or bottom by numbering the bit positions in the region code as through from right to left the coordinate regions can be correlated with the bit posi tions as bit left bit nght bit below bit above a value of in any bit position indicates that the point is in that relative position otherwise the bit position is set to if a point is within the clipping rectangle the region code is a point that is below and to the left of the rectangle has a region code of  bit values in the region code are determined by comparing endpoint coordi nate values x y to the clip boundaries bit is set to if x  xwgin the other three bit values can be determined using similar comparisons for languages in which bit manipulation is possible region code bit values can be determined with the following two steps  calculate differences between endpoint coordi nates and clipping boundaries  use the resultant sign bit of each difference calculation to set the corresponding value in the region code bit is the sign bit of x  xw pin dit is the sign bit of xw    x bit is the sign bit of y  ywain and bit is the sign bit of yn  y  once we have established region codes for all line endpoints we can quickly determine which lines are completely inside the clip window and which are clearly outside any lines that are completely contained within the window boundaries have a region code of for both endpoints and we trivially accept these lines any lines that have a in the same bit position in the region codes for each endpoint are completely outside the clipping rectangle and we trivially re ject these lines we would discard the line that has a region code of for one endpoint and a code of for the other endpoint both endpoints of this line are left of the clipping rectangle as indicated by the in the first bit position of each region code a method that can be used to test lines for total clipping is to perform the logical and operation with both region codes if the result is not the line is completely outside the clipping region  lines that cannot be identified as completely inside or completely outside a clip window by these tests are checked for intersection with the window bound aries as shown in  such lines may or may not cross into the window in terior we begin the clipping process for a line by comparing an outside endpoint to a clipping boundary to determine how much of the line can be discarded then the remaining part of the line is checked against the other boundaries and we continue until either the line is totally discarded or a section is found inside the window we set up our algorithm to check line endpoints against clipping boundaries in the order left right bottom top  to illustrate the specific steps in clipping lines against rectangular bound aries using the cohen sutherland algorithm we show how the lines in  could be processed starting with the bottom endpoint of the line from p to p2  section line clipping 1000 0000 oo1c ___ lwinctow _ 0100 o11c  binary region codes assigned to line endpoints according to relative position with respect to the clipping rectangle   define round a  py   window   lines extending from one pp coordinate region to another may py pass through the clip window p p or they may intersect clipping   boundaries without entering the window  we check p against the left right and bottom boundaries in turn and find that this point is below the clipping rectangle we then find the intersection point p with the bottom boundary and discard the line section from p to p  the line now has been reduced to the section from p to p2 since p is outside the clip window we check this endpoint against the boundaries and find that it is to the left of the window intersection point p is calculated but this point is above the window so the final intersection calculation yields p  and the line from p to p is saved this completes processing for this line so we save this part and go on to the next line point p in the next line is to the left of the clipping rectangle so we determine the intersection p and eliminate the line section from p3 to p  by checking region codes for the line section from p to p  we find that the remain der of the line is below the clip window and can be discarded also  intersection points with a clipping boundary can be calculated using the slope intercept form of the line equation for a line with endpoint coordinates x y  and xx y  the y coordinate of the intersection point with a vertical boundary can be obtained with the calculation y y tm  x   where the x value is set either to xwypin of to xwmax and the slope of the line is cal culated as m  y  y    x  similarly if we are looking for the intersection with a horizontal boundary the x coordinate can be calculated as x x  in  with y set either to yw of to ywrax  the following procedure demonstrates the cohen sutherland line clipping algorithm codes for each endpoint are stored as bytes and processed using bit manipulations  ifint  as0    bat masks encode a point s position relative to the clip edges a point s status is encoded by or ing together appropriate bit masks    fdefine left_edge  oxl  caefne right edge 0x2 gdefine buttom_edge 0x4 define top edge ox8   points encoded as are completely inside the clip rectangle all others ere outside at least one edge if cr ing two codes is false mo bits are set in either code  the ine can be accepted if the and operation between two codes is true the line defined by those endpoints is completely outside the clip region and can be rejected  ys  define inside a  a  define reject a b  akb  define accept a b   alb  unsigned char encode wept2 pt dcpt winmin dept winmax  unsigned char code 0x60  if ipt x  winmin x  code  code  left_edge if pt x  winmax x  code  code  right_edge if pt y  winmin y  code  code  bottom_edge if pc y  winmax y  code  code  top_enge return code  void swappts wept2  pl weopt2  p2   worte tmp  imp  pl  pl  p2  p2  tmp   vo d swapcodes junsigned char  cl unsigne char     unsigned char tmp  tmp  cl  cl  c2  c2  tmp  r void clipbline dcpt winmin ucpt winmax weft2 pl weptz2 p2   unsigned char codel code2  int done  false draw  false  float m  while  done  codel  encode pi winmin winmax  code2  encode p2 winmin winmax  if accept codel code2   done  true draw  true  else if reject codel code2  done  true else   ensure that pl is outside window  if inside codei    swappts  pl  p2  swapcodes  codel  code2 t  use slope m to find line clipedge intersections  if p2 x   pl x m  p2 y  pl y   p2 x  pl x  if codel  left_edge  pl y   winmin x  pl x  m pl x  winmin x  else if codel  right_edge  pl y   winmax x  pl x  m pl x  winmax x  else if codel  bottom_edge    need to update pl x for non vertical lines only  it tp2 x  pl x pl x   winmin y  pl y  m1 pl y  winmin y  else if codel  top_edge  if p2 x x  pl x pl x   winmax y  pl y  a pl y  winmax y    if draw  linedda round p1 x  round pl y  round p2 x  round p2 y    liang barsky line clipping  faster line clippers have been developed that are based on analysis of the para metric equation of a line segment which we can write in the form x x  udx  y y t udy qsu sl where ax  x  x and ay  y  y  using these parametric equations cyrus and beck developed an algorithm that is generally more efficient than the cohen sutherland algorithm later liang and barsky independently devised an even faster parametric line clipping algorithm following the liang barsky ap proach we first write the point clipping conditions in the parametric form xwin x  uax  xw max  10 yw min  y  way  ywmax each of these four inequalities can be expressed as up   k 4 11 where parameters p and q are defined as po  ax  x aw an pz  ax  xwmar  oe 12 p  ay a yt wein ps  ay  vw any line that is parallel to one of the clipping boundaries has p  for the value of k corresponding to that boundary k   and correspond to the left right bottom and top boundaries respectively  if for that value of k we also find q  then the line is completely outside the boundary and can be elimi nated from further consideration if q   the line is inside the parallel clipping boundary  when p   the infinite extension of the line proceeds from the outside to the inside of the infinite extension of this particular clipping boundary if p   the line proceeds from the inside to the outside for a nonzero value of p  we can calculate the value of  that corresponds to the point where the infinitely ex tended line intersects the extension of boundary k as we ht 13 pa for each line we can calculate values for parameters u and u that define that part of the line that lies within the clip rectangle the value of u is deter mined by looking at the rectangle edges for which the line proceeds from the out side to the inside p   for these edges we calculate r  q p  the value of u is taken as the largest of the set consisting of and the various values of r con versely the value of is determined by examining the boundaries for which the line proceeds from inside to outside p   a value of is calculated for each of these boundaries and the value of u is the minimum of the set consisting of and the calculated r values if u  tu the line is completely outside the clip win dow and it can be rejected otherwise the end points of the clipped line are calcu lated from the two values of parameter this algorithm is presented in the following procedure line intersection parameters are initialized to the values v  anc wy  for each clipping boundary the appropriate values for p and q are calculated and used by the func tion cliptest to determine whether the line can be rejected or whether the intersec tion parameters are to be adjusted when p  the parameter r is used to update when p  parameter r is used to update up ff updating u or uy results in u  uy we reject the line otherwise we update the appropriate u parameter only if the new value results in a shortening of the hne when p  and q  we can discard the line since it is parallel to and outside of this boundary if the line has not been rejected after all four values of p and g have been tested the endpoints of the clipped line are determined from values of and tp  finclude graphics   define round a i 1int  at9   int cliptest float p float q float  ul fleat   section line clipping float r int retval  true  if p oo   req p if r  u2s retval  false else if iv  ul sul er  else  if p    r qg ppp if ry  ul retval  false else if r  u2  u2   else  p  so line is parallel to this clipping edge  if q    line is outside clipping edge retval  false  return retval    void clipline depe winmin dcpt winmax wefiz pl wept2 p2   float ul  u2  dx  p2 x  pl x dy  if cliptest  dx pl x  winmin x  ul  u2  if cliptest dx winmax x  pl x  ul  u2   dy  p2 y  pl y  if cliptest  dy pl y  winmin y  ul    if cliptest dy winmax y  pl y sui  u2    if u2    p2 x  pl x  u2  dx p2 y  pl y  u2  dy    if ful    pl x  ul  dx  pl y  ul  dy    linedda round pl x  round pl y round p2 x  round p2 y    in general the liang barsky algorithm is more efficient than the cohen sutherland algorithm since intersection calculations are reduced each update of parameters u and u requires only one division and window intersec tions of the line are computed only once when the final values of u and u have been computed in contrast the cohen sutherland algorithm can repeatedly cal culate intersections along a line path even though the line may be completely outside the clip window and each intersection calculation requires both a divi sion and a multiplication both the cohen sutherland and the liang barsky al  gorithms can be extended to three dimensional clipping chapter  nicholl lee nicholl line clipping by creating more regions around the clip window the nicholl lee nicholl or nln algorithm avoids multiple clipping of an individual line segment in the cohen sutherland method for example multiple intersections may be calcu lated along the path of a single line before an intersection on the clipping rectan gle is located or the line is completely rejected these extra intersection calcula tions are eliminated in the nln algorithm by carrying out more region testing before intersection positions are calculated compared to both the cohen suther land and the liang barsky algorithms the nicholl lee nicholl algorithm per forms fewer comparisons and divisions the trade off is that the nln algorithm can only be applied to two dimensional clipping whereas both the liang barsky and the cohen sutherland methods are easily extended to three dimensional scenes  for a line with endpoints p and p3 we first determine the position of point p for the nine possible regions relative to the clipping rectangle only the three regions shown in  need be considered if p lies in any one of the other six regions we can move it to one of the three regions in  using a sym metry transformation for example the region directly above the clip window can be transformed to the region left of the clip window using a reflection about the line y   x or we could use a counterclockwise rotation  next we determine the position of p relative to p  to do this we create some new regions in the plane depending on the location of p  boundaries of the new regions are half infinite line segments that start at the position of p and pass through the window corners if p is inside the clip window and p is out side we set up the four regions shown in  the intersection with the ap propriate window boundary is then carried out depending on which one of the four regions l t r or b contains p  of course if both p and p are inside the clipping rectangle we simply save the entire line  if p is in the region to the left of the window we set up the four regions l lt lr and lb shown in  these four regions determine a unique bound ary for the line segment for instance if p is in region l we clip the line at the left boundary and save the line segment from this intersection point to p  but if p is in region lt we save the line segment from the left window boundary to the top boundary if p is not in any of the four regions l lt lr or lb the entire line is clipped  p in window p in edge region ta b  section line clipping f in corner region ic   three possibfe positions for a line endpoint p in the nln line clipping algorithm    the four clipping regions used in the nln algorithm when p is inside the clip window and pj is outside    the jour chipping regions used in the nln algorithm when p is directly left of the clip window  for the third case when p is to the left and above the clip window we use the clipping regions in  in this case we have the two possibilites shown depending on the position of p relative to the top left corner of the window if p is in one of the regions t l tr tb lr or lb this determines a unique clip window edge for the intersection calculations otherwise the entire line is re jected  to determine the region in which p is located we compare the slope of the line to the slopes of the boundaries of the clip regions for example if p is left of the clipping rectangle   then p is in region lt if  slope p prp  slope p p  slope p p  14 or wow bow 15 xpo xp myo ky moy and we clip the entire line if y yo  x  or  x yn  wd o to the coordinate difference and product calculations used in the slope tests are saved and also used in the intersection calculations from the parametric equations x x   x  xu y yit g2  ypu an x intersection position on the left window boundary is x  x  with   x  x    x   that the y intersection position is  the two possible sets of clipping regions used in the nln algonthin when p 1s above and co the left of the clip window  line chaping using nonrectangular clip windows in some applications it is often necessary to clip lines against arbitrarily shaped polygons algorithms based on parametric line equations such as the liang barsky method and the earlier cyrus beck approach can be extended eas ily to convex polygon windows we do this by modifying the algorithm to in clude the parametric equations for the boundaries of the clip region preliminary screening of line segments can be accomplished by processing lines against the coordinate extents of the clipping polygon for concave polygon clipping re gions we can still apply these parametric clipping procedures if we first split the concave polygon into a set of convex polygons  circles or other curved boundary clipping regions are also possible but less commonly used clipping algorithms for these areas are slower because intersec tion calculations involve nonlinear curve equations at the first step lines can be clipped against the bounding rectangle coordinate extents of the curved clip ping region lines that can be identified as completely outside the bounding rec tangle are discarded to identify inside lines we can calculate the distance of line endpoints from the circle center if the square of this distance for both endpoints of a line is less than or equal to the radius squared we can save the entire line the remaining lines are then processed through the intersection calculations which must solve simultaneous circle line equations splitting conc ave polygons we can identify a concave polygon by calculating the cross products of succes sive edge vectors in order around the polygon perimeter if the z component of chapter two dimensional viewing  splitting a concave polygon using the vector method  identifying a concave polygon by calculating cross products of successive pairs of edge vectors  some cross products is positive while others have a negative z component we have a concave polygon otherwise the polygon is convex this is assuming that no series of three successive vertices are collinear in which case the cross product of the two edge vectors for these vertices is zero if all vertices are collinear we have a degenerate polygon a straight line   illustrates the edge vector cross product method for identifying concave polygons  a vector method for splitting a concave polygon in the xy plane is to calculate the edge vector cross products in a counterclockwise order and to note the sign of the z component of the cross products if any z component tums out to be neg ative as in   the polygon is concave and we can split it along the line of the first edge vector in the cross praduct pair the following example illustrates this method for splitting a concave polygon  example vector method far splitting concave polygons  shows a concave polygon with six edges edge vectors for this poly gon can be expressed as e    e    e   ey    e    be     where the z component is since all edges are in the xy plane the cross product e x e for two successive edge vectors is a vector perpendicular to the xy plane with z component equal to e ey  ee jy  e x e   d e x e     e x e    e x e    e x e    e x e    since the cross product e x e has a negative z component we split the polygon along the line of vector e  the line equation for this edge has a slope of and a y intercept of  we then determine the intersection of this line and the other  splitting a concave polygon using the rotational method after rotating v3 onto the x axis we find that v is below the x axis so we split the polygon along the line of vy  polygon edges to split the polygon into two pieces no other edge cross products are negative so the two new polygons are both convex  we can also split a concave polygon using a rotational method proceeding counterclockwise around the polygon edges we translate each polygon vertex v in turn to the coordinate origin we then rotate in a clockwise direction so that the next vertex v  is an the x axis if the next vertex v   is below the x axis the polygon is concave we then split the polygon into two new polygons along the x axis and repeat the concave test for each of the two new polygons otherwise we continue to rotate vertices on the x axis and to test for negative y vertex values  illustrates the rotational method for splitting a concave polygon  to clip polygons we need to modify the line clipping procedures discussed in the previous section a polygon boundary processed with a line clipper may be displayed as a scries of unconnected line segments   depending on the orientation of the polygon to the clipping window what we really want to dis play is a bounded area after clipping as in  for polygon clipping we re quire an algorithm that will generate one or more closed areas that are then scan converted for the appropriate area fill the output of a polygon clipper should be a sequence of vertices that defines the clipped polygon boundaries    lo eee  display of a polygon processed by a balore clipping after clipping line clipping algorithm section polygon clipping  chapter two dimensional viewing  original polygon   wr  display of a correctly clipped before clipping after clipping polygon  sutherland hadgeman polygon clipping we can correctly clip a polygon by processing the polygon bound ry as a whole against each window edge this could be accomplished by processing all poly gon vertices against each clip rectangle boundary in turn beginning with the ini tial set of polygon vertices we could first clip the polygon against the left rectan gle boundary to produce a new sequence of vertices the new set of vertices could then be successively passed to a right boundary clipper a bottom bound ary clipper and a top boundary clipper as in  at each step a new se quence of output vertices is generated and passed to the next window boundary clipper  there are four possible cases when processing vertices in sequence around the perimeter of a polygon as each pair of adjacent polygon vertices is passed to a window boundary clipper we make the following tests  if the first vertex is outside the window boundary and the second vertex is inside both the intersec tion point of the polygon edge with the window boundary and the second vertex are added to the output vertex list  if both input vertices are inside the win dow boundary only the second vertex is added to the output vertex list  if the first vertex is inside the window boundary and the second vertex is outside only the edge intersection with the window boundary is added tu the output vertex list  if both input vertices are outside the window houndary nothing is added to the output list these four cases are illustrated in  for successive pairs of polygon vertices once all vertices have been processed for one clip window boundary the output hst of vertices is clipped against the next window bound ary  clip left clip top  clipping a polygon against successive window boundaries   a ydaras   xewm 4dop  utnm jdop q ebbpga d z3domm eptsut qut bv ode n sugep ebpa  do  woqjog 4ysta ajet  umus zapadday  arepunog mopurm siy 10j isi xowia jndyno ayy ur spnod ayy jaqry pasn o78 siaquinu pout xayaa yim sunieys mopulm eyo arepumog 1a au surese uosajod e buiddy aand14  modular  arepunog yea ysuteze paddy syutod yse pue ysiy ayy aq pauyap seury sdip autynor busop e passadoid uaaq aaey saotien uo8ajod tle tay arepunog yey ysutese paddy yurod ys1y ayy arepunog mopuim yea jo saloys jutog aszy aeue ayy syutod jo aerie jndyno ay owl pasayua uay st sare punog mopul je ysuteze butddips saatains yey yutod auy a8vys buiddy jxau ay  passed st yl mopulm ayy apisut st d j  adeys sutiddyp yxau ay  passed pue payepngyes st uolpasiaqul ay  arepunog mopuuia sty sassop azepunog s pue d syuiodpua kq pauyap aul ay jj arepunog mmopulm jsiy ay ysurese butddips jo aun jutodat to ay  d xayiaa yea sassed autos urew ayy arepunoq mopulm dip yses 10j paddija sem yey yurod yuaoas jsou ay sprosar s aeue uy yoeoidde zutddip aurjadid ay sayexjsuowap ounpasoid zuimot os ay  ssaddya arepunog jo auyedid e ysnoryy ul santen uosatod ayy jo ucissarzoid ay a esnyyi 2m  sly u moppulm dip e ym squtod uokqdesja ui syi pure uosatod ev smoys amsi4z auyadid ayy ur anuguoo jou saop yurod ay  asimsayyq sueddyo are punog moj te 4q arepunog mopulm  ud jo apisul aq peululiajap uaaq uaaq sey u saye afuo 3st xaqea ndno ayy pappe st quod uotdessayui payems eo 10 xoyed jndur ue saya yutod y sauynos zutddip yo auryjedid e pue sossaz0id afsuis e siossadoid jayjered yum auop aq ues siqy aeddro arepunog yxau ayy uo saoquea paddy ay butssed pure days yora ye saoysaa enplarpul buid dyp ajduns aq syst xayaa yndyno ayerpaunaqut ayy ayeutums ued aay arepunoqg mopuim yea ysuteze paddy st uobajod e se saotyre jo yst yndyno ue joy abei0 s dn 8unjas samnbar paquosap jsnl aaey am se wyyo08je ay suyuewarduiy  azepuncg mopulm 4xau ay oy ssadoid ayy yead a1 pinom am sjutod panes aay ayy butsy julod uoysasjajui ayy aaes pur puy am os apis no st xa iaa puy pul y xis al  paaes are osje aay pue aprsul aq paululiajap are  pue p saorplaa  xapaa puke yuod uotpasjayul ayy yo aves pue vosasiayt ay ayenz e am apisut st yonym  xayaa sucre suraocpy are punog ayy jo apisyno ay uo aq pumoy ale zz pur  saotwan arepunog mopuim ye ay ysulese  bly ul eare ayy bunssadoid aq poyyaur sy ayeaysnyy ay  arepunog mopumm yet ay ysurese saoysaa u08ajod jo sited jo sutssazoid aatssa2ons 24n314  audu bars  a oars ta oape ala 2aes 1nd  ul ul ul ur ino  a polygon overlapping a rectangular clip window   es  top  ee clipper out vy   v1   y vi  v5 vy mg i gn _ vs  vy _ v5  vv   processing the vertices of the polygon in  through a boundary clipping pipeline after all vertices are processed through the pipeline the vertex list for the clipped polygon is v3 vz vx vi  case left if p x  wmin x return false  break case right if p x  wmax x return false  break case bottom if p y  wmin y return false  break case top if p y  wmax y return false  break   return true   int cross wcpt2 pl wcpt2 p2 edge b dcpt wmin dcpt wmax  if inside pl b wmin wmax   inside p2 b wmin wmax  return false  else return true   wept2 intersect wcpt2 pl wecpt2 p2 edge b dcpt wmin dcpt wmax   weopt2 ipt  float m  if pl x  p2 x  m  pl y  p2 y   pl x  p2 x  gwitch b  case left ipt   wmin x ipt y  p2 y  wmin x  p2 x  m break  case right ipt x  wmax x    ipt y  p2 y  wmax x  p2 x  m break case bottom ipt y  wmin y if pl x  p2 x ipt x  p2 x  wmin y  p2 y  m else ipt x  p2 x break case top ipt y  wmax y if pl x  p2 x ipt x  p2 x  wmax y  p2 y  m else ipt x  p2 x break vt return ipt   void clippoint wcpt2 p edge b dept wmin dcpt wmax wept2  pout int  cnt wept2  first  weopt2  s  wept2 ipt   if no previous point exists for this edge save this point   if  first b  first b   p else  previous point exists if p and previous point cross edge find intersection clip against next boundary if any if no more edges add intersection to output list   if cross p s b  b wmin wmax   ipt  intersect p s b  b wmin wmax  if b  top clippoint ipt b wmin wmax pout ent first s  else  pout ent  ipt   ent     s b  p   save p as most recent point for this edge    for all if point is inside proceed to next clip edge if any  if inside p b wmin wmax  if b  top clippoint p b wmin wmax pout cnt first  else  pout  cnt  p   ent     void closeclip dcpt wmin dcpt wmax wept2  pout int  cnt wept2  first  wopt2  s  wept2 i edge b  for b  left b  top bre  if cross s b  first b  b wmin wmax   i intersect s b  first b  b wmin wmax  if b  top clippoint i b l wmin wmax pout cnt first s  else  pout ent  i  ent       int clippolygon dcpt wmin dcpt wmax int n wcpt2  pin wept2  pout      first holds pointer toa first point processed against a clip edge  s holds most recent point processed against an edge   wept2  first n_edge  int i ert  q for i1 i n i   elippoint pin i      s n_edge  left wmin wmax pour  cnt first  s  closeclip  wmin wmax pout  cnt first s  return cnt   convex polygons are correctly clipped by the sutherland hodgeman algo rithm but concave polygons may be displayed with extraneous lines as demon strated in  this occurs when the clipped polygon should have two or more separate sections but since there is only one output vertex list the last ver tex in the list is always joined to the first vertex there are several things we could do to correctly display concave polygons for one we could split the con cave polygon into two or more convex polygons and process each convex poly gon separately another possibility is to modify the sutherland hodgeman ap proach to check the final vertex list for multiple vertex points along any chp window baundary and correctly join pairs of vertices finally we could use a more general polygon clipper such as either the weiler atherton algorithm or the weiler algorithm described in the next section  weiler atherton polygen clipping here the vertex processing procedures for window boundaries are modified so that concave polygons are displayed correctly this clipping procedure was de veloped as a method for identifying visible surfaces and so it can be apphed with arbitrary polygon clipping regions  the basic idea in this algorithm is that instead of always proceeding around the polygon edges as vertices are processed we sometimes want to follow the window boundaries which path we follow depends on the polygon processing direction clockwise or counterclockwise and whether the pair of polygon ver tices currently being processed represents an outside to inside pair or an inside  window po tee i i i j  we     clipping the concave polygon in a   with the sutherland hodgeman tees n clipper produces the two connevted a  b areas in b   v  stop ve  b    clipping a concave polygon a with the weiler atherton algorithm generates the two separate polygon areas in b  to outside pair for clockwise processing of polygon vertices we use the follow ing rules   for an outside to inside pair of vertices follow the polygon boundary   for an inside to outside pair of vertices follow the window boundary in a clockwise direction  in  the processing direction in the weiler atherton algorithm and the re sulting clipped polygon is shown for a rectangular clipping window  an improvement on the weiler atherton algorithm is the weiler algorithm which applies constructive solid geometry ideas to clip an arbitrary polygon against any polygon clipping region  illustrates the general idea in this approach for the two polygons in this figure the correctly dipped polygon is calculated as the intersection of the clipping polygon and the polygon object  other polygon clipping algorithms various parametric line clipping methods have also been adapted to polygon clipping and they are particularly well suited for clipping against convex poly gon clipping windows the liang barsky line clipper for example can be ex tended to polygon clipping with a general approach similar to that of the suther land hodgeman method parametric line representations are used to process polygon edges in order around the polygon perimeter using region testing proce dures similar to those used in line clipping    polygon tipping  abject clipping pelygon   clipping a polygon by determining  _ clipped the intersection of two polygon area areas  section polygon clipping   before chipping after clipping   chipping a filled carcle  string   before clipt clipping __  string  after clipy ci ipping   text clipping using bounding rectang e about the entire string   areas with curved boundaries can be clipped with methods similar to those dis cussed in the previous sections curve clipping procedures will involve nonlin ear equations however and this requires more processing than for objects with linear boundaries  the bounding rectangle for a circle or other curved object can be used first to test for overlap with a rectangular clip window if the bounding rectangle for the object is completely inside the window we save the object if the rectangle is determined to be completely outside the window we discard the object in either case there is no further computation necessary but if the bounding rectangle test fails we can look for other computation saving approaches for a circle we can use the coordinate extents of individual quadrants and then octants for prelimi nary testing before calculating curve window intersections for an ellipse we can test the coordinate extents of individual quadrants  illustrates circle clipping against a rectangular window  similar procedures can be applied when clipping a curved object against a general polygon clip region on the first pass we can clip the bounding rectangle of the object against the bounding rectangle of the clip region if the two regions overlap we will need to solve the simultaneous line curve equations to obtain the clipping intersection points   there are several techniques that can be used to provide text clipping in a graph ics package the clipping technique used will depend on the methods used to generate characters and the requirements of a particular application  the simplest method for processing character strings relative to a window boundary is to use the all or none string clipping strategy shown in  if all of the string is inside a clip window we keep it otherwise the string is dis carded this procedure is implemented by considering a bounding rectangle around the text pattern the boundary positions of the rectangle are then com pared to the window boundaries and the string is rejected if there is any overlap this method produces the fastest text clipping  an alternative to rejecting an entire character string that overlaps a window boundary is to use the aff or none character clipping strategy here we discard only those characters that are not completely inside the window   in this case the boundary limits of individual characters are compared to the window any character that either overlaps or is outside a window boundary is clipped  a final method for handling text clipping is to clip the components of indi vidual characters we now treat characters in much the same way thal we treated lines if an individual character overlaps a clip window boundary we clip off the parts of the character that are outside the window   outline character fonts formed with line segments can be processed in this way using a line clipping algorithm characters defined with bit maps would be clipped by com paring the relative position of the individual pixels in the character grid patterns to the clipping boundaries  so far we have considered only procedures for clipping a picture to the interior of a region by eliminating everything outside the clipping region what is saved by these procedures is inside the region in some cases we want to do the reverse that is we want to clip a picture to the exterior of a specified region the picture parts to be saved are those that are outside the region this is referred to as exte rior clipping  a typical example of the application of exterior clipping is in multiple window systems to correctly display the screen windows we often need to apply both internal and external clipping  illustrates a multiple window display objects within a window are clipped to the interior of that win dow when other higher priority windows overlap these objects the objects are also clipped to the exterior of the overlapping windows  exterior clipping is used also in other applications that require overlapping pictures examples here include the design of page layouts in advertising or pub lishing applications or for adding labels or design patterns to a picture the tech nique can also be used for combining graphs maps or schematics for these ap plications we can use exterior clipping to provide a space for an insert into larger picture   procedures for clipping objects to the interior of concave polygon windows can also make use of external clipping  shows a line p p that is to be clipped to the interior of a concave window with vertices v v v v vs line p p can be clipped in two passes  first p p is clipped to the interior of the convex polygon v v v3v to yield the clipped segment p p   b   then an external clip of p p  is performed against the convex polygon v v v to yield the final clipped line segment p p    summary in this chapter we have seen how we can map a two dimensional world coordinate scene to a display device the viewing transformation pipeline in   a multiple window screen display showing examples of both interior and exterior clipping  courtesy of sun microsystems   summary  string oh string string  before clipping  ng oi tring string   after clipping ligure 29 text clipping using a bounding rectangle about individual characters  tring  on o  oe before clipping  tring  s after clipping  text clipping performed on the components of individual characters   interior clip tb    exterior clip c  clipping line p p to the interior of a concave polygon with vertices v v v4v4vs a  using convex polygons v v v v  hb and v_v v  c  to produce the clipped line p p   cludes constructing the werld coordinate scene using modeling transformations transferring world cocrdinates to viewing coordinates mapping the viewing coordinate descriptions f objects to normalized device coordinates and finally mapping to device coordinates normalized coord nates are specified in the range from to and thev are used to make viewing packages independent ot particular output devices viewing coordinates are specified by giving the werld coordinate position of the viewing origin and the view up vector that defines the directior of the viewing y axis these parameters are used to construct tne viewing transforma tion matrix that maps world coordinate object descriptions to viewing coordi nates  a window is then set up in viewing coordinates and a viewport is specified in normalized device coordinates typically the window and viewport are rec tangles in standard position rectangle boundaries are parallel to the coordinate axes  the mapping from viewing coordinates to normal zed device coordinates is then carried out so that relative positions in the window are maintained in the viewport  viewing functions in a graphics programming package are used to create one or more sets of viewing parameters one function is typically provided tu calculate the elements of the matrix for transforming world coordinates to view ing coordinates another function is used to set up the window to viewport transformation matrix and a third function can be used to specify combinations of viewing transforma ions and window mapping in a viewing table we can then select different viewing combinations by spo ifving particular view indices listed in the viewing table  when objects are displayed on the output device all parts of a scene our side the window and the viewport are clipped oft unless we set clip parameters to turn off clipping in many packages clipping is gone in normalized device co ordinates so that all transformations can be concatenated into a single transfor mation operation before applying the clipping alponthms the clipping region is commonly referred to as the clipping window or as the clisping rectangle when the window and viewport are standard rectangles several algorithms have been developed for clipping objects against the clip windew boundaries  line clipping algorithms include the cohen sutherland method the liang barsky method and the nicholl lee nicholl method the cohen suther land method is widely used since it was one of the first line clipping algorithms to be developed region codes are used to identify the position of line endpoints telative to the rectangular clipping window boundaries lines that cannot be im mediately identified as completely ins de the window or completely outside are then chpped against window boundaries liang and barsky use a parametric line representation similar to that of the earlier cyrus beck algorithm to set up a more efficient line clipping procedure that reduces intersectian calculations the nicholl lee nicholl algorithm uses more region testing in the xy plane to reduce intersection calculations even further parametric liie clipping is easily extended to convex clipping windows and to three dimensional clipping windows  line clipping can also be carried out for concave polygon clipping win dows and for chpping windows with curved boundaries with concave poly gons we can use either the vector method or the revational method to split a con cave polygon into a number of convex polygons with curved clipping windows we calculate line intersections using the curve equations  polygon clipping algorithms include the sutherland hodgeman method the liang barsky method and the weiler atherton method in the suther land hodgeman clipper vertices of a convex polygon are processed in order against the four rectangular window boundaries to produce an output vertex list for the clipped polygon liang and barsky use parametric line equations to repre sent the convex polygon edges and they use similur testing to that performed n line clipping to produce an outpul vertex list for the clipped polygon both the weiler atherland method and the weiler method correctly clip both convex and concave polygons and these polygon clippers also allow the clipping window ov be a general polygon the weiler atherland algorithm processes polygon ver tices in order to produce one or more lists of output polygon vertices the weiler method performs clipping by finding the intersection region of the two polygons  objects with curved boundaries are processed against rectangular clipping windows by calculating intersections using the curve equations these clipping procedures are slower than line clippers or polygon clippers because the curve equations are nonlinear  the fastest text clipping method is to completely clip a string if any part of the string is outside any window boundary another method for text clipping is to use the all or none approach with the individual characters in a string a third method is to apply either point line polygon or curve clipping to the individual characters in a string depending on whether characters are defined as point prids or as outline fonts  in some applications such as creating picture insets and managing multi ple screen windows exterior clipping is performed in this case all parts of a scene that are inside a window are clipped and the exterior parts are saved  summary  chapter two dimensional viewing  references line clipping algorithms are discussed in sproul and sutherland  cyrus and beck  and liang and barsky  methods for improving the speed of the cohen sutherland fine clipping algorithm are given in duvanenko  polygon clipping methods are presented in sutherland and hodgeman  and in liang and barsky  general techniques for clipping arbitrarily shaped polygons against each other are given in weiler and atherton  and in weiler   two dimensional viewing operations in phigs are discussed in howard et al   gask ins  hopgood and duce  and blake  for information on gks viewing operatians see hopgood et al  and enderle et al   write a procedure to to implement the evaluatevieworientationmatrix func tion that calculates the elements of the matrix for transforming world coordinates to viewing coordinates given the viewing coordinate origin py and the view up vector v derive the window to viewport transformation equations by first scaling the win dow to the size of the viewport and then translating the scaled window to the view port position  write a procedure to mplement the evaluateviewmappingmatrix function that calculates the elements of a matrix for performing the window to viewport transforma tion  write a procedure to implement the set viewrepresentat ion function to concate nate viewmatrix and viewmappingmatrix and to store the result referenced by a spetitied view index in a viewing table write a set of procedures to implement the viewing pipeline without clipping and without the workstation transformation your program should allow a scene ta be con structed with modeling coordinate transformations a specified viewing system and a specified window v ewport pair as an option a viewing table can be implemented to store different sets of viewing transformation parameters  derive the matrix representation for a workstation transformation  write a set of procedures to implement the viewing pipeline without clipping but in cluding the workstation transformation your program should allow a scene to be con structed with modeling coordinate transformations a specified viewing system a specified window viewport pair and workstation transformation parameters for a given world coordinate scene the composite viewing transformation matrix should transform the scene to an output device for display  tmplement the cohen sutherland line clipping algorithm  carefully discuss the rationale behind the various tests and methods for calculating the intersection parametets u and u in the liang barsky line clipping algorithm   compare the number of arithmetic operations performed in the cohen sutherland and the liang barsky line clipping algorithms for several different line orientations rel ative to a clipping window  write a procedure to implement the liang barsky line c ipping algorithm  devise symmetry transformations for mapping the intersection calculations for the three regions in  to the other six reg ons of the xy plane set up a detailed algorithm for the nicholl lee nicholl approach to line clipping for any input pair of line endpoints  compare the number of arithmetic operations performeo in nln algorithm to both the cohen sutherland and the liang barsky line clipping algorithms for several different line orientations relative to a clipping window write a routine to identify concave polygons by calculating cross products of pairs of edge vectors  write a routine to split a concave polygon using the vector method  write a routine to split a concave polygon using the rotational method  adapt the liang barsky line clipping algorithm to polygon clipping set up a detailed algorithm for weiler atherton polygon clipping assuming that the clipping window js a rectangle in standard position   devise an algorithm for weiler atherton polygon clipping where the clipping win  dow can be any specified polygon   write a routine to clip an ellipse against a rectangular window  assuming that all characters in a text string have the same width develop a text clip ping algorithm that clips a string according ta the all or none character clipping strategy  develop a text clipping algorithm that clips individual characters assuming that the characters are defined in a pixel grid of a specified s ze  write a routine to implement exterior clipping on any part of a defined picture using any specified window  write a routine to perform both interior and exterior clipping given a particular win dow system display input to the routine is a set of window positions on the screen the objects to be displayed in each window and the window priorities the individuat objects are to be clipped to fit into their respective windows then clipped to remove parts with overlapping windows of higher display priority  exercises  chapter    structures and hierarchical modeling  f or a great many applications it is convenient to be able to create and ma nipulate individual parts of a picture without affecting other picture parts most graphics packages provide this capability in one form or another with the ability to define each object ina picture as a separate module we can make modi fications to the picture more easily in cesign applications we can try out differ ent positions and orientations for a component of a picture without disturbing other parts of the picture or we can take out parts of the picture then we can easily put the parts back into the display at a later time similarly in modeling applications we can separately create and position the subparts of a complex ob ject or system into the overall hierarchy and in animations we can apply trans formations to individual parts of the scene so that one object can be animated with one type of motion while other objects in the scene move differently or re main stationary  a labeled set of output primitives and associated attributes in phigs is called a structure other commonly used names for a labeled collection of primitives are segments gks and olyects graphics library on silicon graphics systems  in this section we consider the basic structure managing functions in phigs similar operations are available in other packages for handling labeled groups of primi tives in a picture  basic structure functions when we create a structure the coordinate positions and attribute values spec  fied for the structure are stored as a labeled group ina system structure list called the central structure store we create a structure with the function openstructure id  the label for the segment is the positive integer assigned to parameter id in phigs  we can use character strings to label the structures instead of using inte ger names this makes it easier to remember the structure identifiers after all primitives and attributes have been listed the end of the structure is signaled with the clogestructure statement for example the following program chapter structures and hierarchical modeling statements define structure as the line sequence specified in polyline with the designated line type and color  openstructure ic  setlinetype 1t  setpolylinecolourindex lc  polyline nr pts  clesestructure  any number of structures can be created for a picture but only one structure can be open in the creation process at a time any open structure must be closed be fore a new structure can be created this requirement eliminates the need for a structure identification number in the closestructure statement  once a structure has been created it can be displayed ona selected output device with the function poststructure ws id priority  where parameter ws is the workstation identifier ic is the structure name and priority is assigned a rea value in the range from to parameter pr ority sets the display priority relative to other structures when two structures overlap onan output display device the structure with the higher priority will be visible for example if structures and are posted to workstation with the following priorities poststructure poststructure then any parts of structure that overlap structure will be hidden since struc ture has higher prioritv if two structures are assigned the same priority value the last structure to be posted is given display precedence when a structure is posted to an active workstation the primitives in the structure are scanned and interpreted for display on the selected output device video monitor laser printer etc  scanning a structure list and sending the graphical output to a workstation is called traversal a list of current attribute values for primitives is stored in a data structure called a traversal state list as changes are made to posted structures both the system structure list and the tra versal state list are updated this automatically modifies the display of the posted structures on the workstation  ta remove the display of a structure from a part cular output device we in voke the function unpoststructure iws id  this deletes the structure from the active list of structures for the designated out put device but the system structure list is not affected on a raster system a structure is removed from the display by redrawing the primitives in the back ground color this process however may also affect the display of primitives fram other structures that overlap the structure we want to erase to remedy this we can use the coordinate extents of the various structures in a scene to deter mine which ones overlap the structure we are erasing then we can simply re draw these overlapping structures after we have erased the structure that is to be unposted all structures can be removed from a selected output device with unpostallstructures ws  if we want to remove a particular structure from the system structure list we accomplish that with the function deletestructure id  of course this also removes the display of the structure from all posted output devices once a structure has been deleted its name can be reused for another set of primitives the entire system structure list can be cleared with deleteallstructures it is sometimes useful to be able to relabel a structure this is accomplished with changestructureldentifier oldid newid  one reason for changing a structure label is to consolidate the numbering of the structures after several structures have been deleted another is to cycle through a set of structure labels while displaying a structure in multiple locations to test the structure positioning  setting structure attributes we can set certain display characteristics for structures with workstation filters the three properties we can set with filters are visibility highlighting and the ca pability of a structure to be selected with an interactive input device  visibility and invisibility settings for structures on a particular workstation for a selected device are specified with the function setinvisibilityfilter ws devcode invisset visset  where parameter invisset contains the names of structures that will be invisi ble and parameter visset contains the names of those that will be visible with the invisibility filter we can turn the display of structures on and off at selected workstations without actually deleting them from the workstation lists this al lows us for example to view the outline of a building without all the interior de tails and then to reset the visibility so that we can view the building with all in ternal features included additional parameters that we can specify are the number of structures for each of the two sets structures are made invisible on a raster monitor using the same procedures that we discussed for unposting and for deleting a structure the difference however is that we do not remove the structure from the active structure list for a device when we are simply making it invisible  highlighting is another convenient structure characteristic in a map dis play we could highlight all cities with populations below a certain value or fora section structure concepts chapter structures and hierarchica modeling  landscape layout we could highlight certain varieties of shrubbery or in a circuit diagram we could highlight all components within a specific voltage range this is done with the function sethighlightingfilter ws devcode highlightset nohighlightset  parameter highlightset contains the names of the structures that are to be highlighted and parameter nohighlightset contains the names of those that are not to be highlighted the kind of highlighting used to accent structures de pends on the type and capabilities of the graphics system for a color video mon itor highlighted structures could be displayed in a brighter intensity or in a color reserved for highlighting another common highlighting implementation is to turn the visibility on and off rapidly so that blinking structures are displayed blinking can also be accomplished by rapidly alternating the intensity of the highlighted structures between a low value and a high value  the third display characteristic we can set for structures is pickability this refers to the capability of the structure to be selected by pointing at it or position ing the screen cursor over it if we want to be sure that certain structures in a dis play can never be selected we can declare them to be nonpickable with the pick ability filter in the next chapter we take up the topic of input methods in more detail  often we would like to modify a structure after it has been created and closed structure modification is needed in design applications to try out different graph ical arrangements or to change the design configuration in response to new test data  if additional primitives are to be added to a structure this can be done by simply reopening the structure with the openstructure nclon and append ing the required statements as an example of simple appending the following program segment first creates a structure with a single fil area and then adds a second fill area to the structure  openstructure shape  setiinteriorstyle solid  setinteriorcolouriindex  fillarea ni vertsl  closestructure  openstructure shape  setintericrstyle hollow  fillarea nz verts2  closestructure  this sequence of operations is equivalent to initially creating the structure with both fill areas openstructure shape  setinteriorstyle solid  setinteriorcolourindex  fillarea nl vertsl  setinteriorstyle hollow  fillarea n2 verts2  closestructure  in addition to appending we may also want sometimes to delete certain items in structure to change primitives or attribute settings or to insert items at selected positions within the structure general editing operations are carried out by accessing the sequence numbers for the individual components of a structure and setting the edit mode  structure lists and the element pointer individual items in a structure such as output primitives and attribute values are referred to as structure elements or simply elements each element is as signed a reference position value as it 1s entered into the structure  shows the storage of structure elements and associated position numbers created by the following program segment  openstructure gizmo  setlinetype ltl  setpolylinecolourindex 1cl1  polyline nl ptsl  setlinetype 1t2  setpolylinecolcurindex 1c2  polyline n2 pts2  closestructure  structure elements are numbered consecutively with integer values starting at and the value indicates the position just before the first element when a structure is opened an element pointer is set up and assigned a position value that can be used to edit the structure if the opened structure is new not already existing in the system structure list  the element pointer is set to if the opened structure does already exist in the system list the element pointer is set to the po sition value of the last element in the structure as elements are added to a struc ture the element painter is incremented by  we can set the value of the element pointer to any position within a struc ture with the function setelementpointer k  gizmo structure  setlinetype 1tl setpolylinecolcurindex 1c1   setpolylinecolourindex  wp element  element position values for pointer polyline n2 pts2 structure gizmo  section uditing structures  chapter structures and hierarchical modeling where parameter k can be assigned any integer vajue from to the maximum number of elements in the structure it is also possible to position the element pointer using the following offset function that moves the pointer relative to the current position  offsetelementpo nter dk  with dk assigned a positive or negative integer offset from the present position of the pointer once we have positioned the element pointer we can edit the struc ture at that position  setting the edit mode structures can be modified in one of two possible modes this is referred to as the edit mode of the structure we set the value of the edit mode with seted tmode moce  where parameter mode is assigned either the value fsert or he value replace  inserting structure elements when the edit mode is set to msert the next item entered into a structure will be placed in the position immediately following the element pointer elements in the structure list tollowing the inserted item are then automatically renumbered to illustrate the insertion operation let s change the standard line width currently in structure g zmo   to some other value we can do this by in serting a line width statement anywhere before the first polyline command  openstructure gizmo  seteditmode insert  setelemertpointer  setlinewidth lw  closestructure   shows the modified element list of gizmo created by the previous in sett operation after this insert the element pointer is assigned the value the position of the new line width attribute  also all elements after the line width statement have been renumbered starting at the value  gizmo structure  element pointer getlinewidth lw  getlinetype t1  setpolylinefolourindex lcl    modified element list and position of the clement pointer after inserting a line width attribute into structure gizmo  polyline nl pts1  setlinetype 1t2  setpolylinecolourindex 1c2  swoon ewnad polyline n2 pts2   when a new structure is created the edit mode is automatically et to the value insert assuming the edit mode has not been changed from this iefault value before we reopen this structure we can append items at the end of the ele ment list without setting values for either the edit mode or element pointer as demonstrated at the beginning of section this is because the edit mode re mains at the value insert and the element pointer for the reopened structure points to the last element in the list  replacing structure elements when the edit mode is set to the value replace the next item entered into a struc ture is placed at the position of the element pointer the element originally at that position is deleted and the value of the element pointer remains unchanged  as an example of the replace operation suppose we want to change the color of the second polyline in structure gizmo   we can do this with the sequence  openstructure gizmc  seteditmode replace  setelementpointer  setpolylinecolourindex lc2new  closestructure   shows the element list of gizmo with the new color for the second polyline after the replace operation the element pointer remains at position the position of the new line color attribute  deleting structure elements we can delete the element at the current position of the element pointer with the function deleteeiement this removes the element from the structure and sets the value of the element pointer to the immediately preceding element  as an example of element deletion suppose we decide to have both poly lines in structure gizmo   displayed in the same color we can accom plish this by deleting the second color attribute  gizmo structure  setlinetype    modified element list and position of the element pointer after changing the color of the second polyline in structure gizmo  setpolylinecolourindex 1c1   setlinetype 1t2  slement pointer get polylinecolourindex 1c2new   polyline nl ptsl   polyline n2 pts2  section editing structures no chapter structures and hierarchical modeling openstructure gizmo  setelementfointer  deleteelement  closestructure  the element pointer is then reset to the value and all following elements are renumbered as shown in  a contiguous group of structure elements can be deleted with the function deleteelementrange kl k2  where integer parameter k1 gives the beginning position number and k2 speci fies the ending position number for example we can delete the second polyline and associated attributes in structure gizmo with deleteelementrange  and all elements in a structure can be deleted with the function emptystructure iid  labeling structure flements once we have made a number of modifications to a structure we could easily lose track of the element positions deleting and inserting elements shift the ele ment position numbers to avoid having to keep track of new position numbers as modifications are made we can simply label the different elements in a struc ture with the function label k  where parameter k is an integer position identifier labels can be inserted any where within the structure list as an aid to locating structure elements without re ferring to position number the label function creates structure elements that have no effect on the structure traversal process we simply use the labels stored in the structure as editing references rather than using the individual element po sitions also the labeling of structure elements need not be unique sometimes it is convenient to give two or more elements the same label value particularly if the same editing operations are likely to be applied to several positions in the structure  gizmo structure  setlinetype 1t1 i   eetpolylinecolourindex  ae  modified element jist and position  polyline ni ptsl  j element oortinee ie of the element pointer after deleting pointer bet iinetype  the color attribute statement for the  polyline n2 pts2   second polyline in structure gizmo  to illustrate the use of labeling we create structure labeledgizmo in the following routine that has the elements and position numbers as shown in   openstructure labeledgizmo  label objectllinetype  setlinetype 1t1  label objectlcolor  setpolylinecolouriindex 1cl1  label objectl  polyline nl pts1  label object2linetype  setlinetype 1t2  label object2color  setpolylinecolourindex 1c2  label object2  polyline n2 pts2  closestructure  now if we want to change any of the primitives or attributes in this structure we can do it by referencing the labels although we have labeled every item in this structure other labeling schemes could be used depending on what type and how much editing is anticipated for example all attributes could be lumped under one label or all color attributes could be given the same label identifier  a label is referenced with the function setelementpointeratlabel k  which sets the element pointer to the value of parameter k the search for the label begins at the current element pointer position and proceeds forward through the element list this means that we may have to reset the pointer when reopening a structure since the pointer is always positioned at the last element in a reopened structure and label searching is not done backward through the ele ment list if for instance we want to change the color of the second object in structure labeledgizmo we could reposition the pointer at the start of the ele ment list after reopening the structure to search for the appropriate calor at tribute statement label  iabeledgizme structure label objectilinetype setlinetype 1tl  label abjeccicolor setpolylinecolourindex 1c1 label objectl  polyline nl ptsi  label object2linetype  a  getlinatype 1t2 label object2color  setpolylinecolourindex   label object2 element __ pointer  o   a set of labeled objects and associated position numbers stored in structure labeledgizmo   polyline n2 pts2   section editing structures chapter steuctures and hierarchical modeling openstructure iabeledgizmo  setelementpointer  seteditmode replace  setelementpointeratlabel object2color  offsetelementpointer  setpolylinecolourindex 1c2new  closeftructure  deleting an item referenced with a label is similar to the replacement opera tion illustrated in the last openstructure routine we first locate the appropri ate label and then offset the pointer for example the color attribute for the sec ond polyline in structure labeledgizmo can be deleted with the sequence openstructure labeledgizmo  setelementpointer  seteditmode replace  setelementpointeraatlabel object2color  offsetelementpointer  deleteelement  closestructure  we can also delete a group of structure elements between specified labels with the function deleteelementsbetweenlabels  k1 k2 after the set of elements is deleted the element pointer is set to position k1 copying elements from one structure to another we can copy all the entries from a specified structure into an open structure with copyalllelementsfromstructure id the elements from structure id are inserted into the open structure starting at the position immediately following the element pointer regardless of the setting of the edit mode when the copy operation is complete the element pointer is set to the position of the last item inserted into the open structure   an important use of structures is in the design and representation of different types of systems architectural and engineering systems such as building lay outs and electronic circuit schematics are commonly put together using com puter aided design methods graphical methods are used also for representing economic financial organizational scientific social and environmental systems representations for these systems are often constructed to simulate the behavior of a system under various conditions the outcome of the simulation can serve as an instructional tool or as a basis for making decisions about the system to be ef fective in these various applications a graphics package must possess efficient methods for constructing and manipulating the graphical system representations the creation and manipulation of a system representation is termed model ing any single representation is called a model of the system models for a sys tem can be defined graphically or they can be purely descriptive such as a set of equations that defines the relationships between system parameters graphical models are often referred to as geometric models because the component parts of a system are represented with geometric entities such as lines polygons or cir cles we are concerned here only with graphics applications so we will use the term model to mean a computer generated geometric representation of a system  model representations  shows a representation for a logic circuit illustrating the features com mon to many system models component parts of the system are displayed as geometric structures called symbols and relationships between the symbols are represented in this example with a network of connecting lines three standard symbols are used to represent logic gates for the boolean operations and or and not the connecting lines define relationships in terms of input and output flow from left to right through the system parts one symbol the and gate is dis played at two different positions within the logic circuit repeated positioning of a few basic symbols is a common method for building complex models each such occurrence of a symbol within a model is called an instance of that symbol we have one instance for the or and not symbols in fig and two instances of the and symbol  in many cases the particular graphical symbols chosen to represent the parts of a system are dictated by the system description for circuit models stan dard electrical or logic symbols are used with models representing abstract con cepts such as political financial or economic systems symbols may be any con venient geometric pattern  information describing a model is usually provided as a combination of geometric and nongeometric data geometric information includes coordinate positions for locating the component parts output primitives and attribute func tions to define the structure of the parts and data for constructing connections between the parts nongeometric information includes text labels algorithms de scribing the operating characteristics of the model and rules for determining the relationships or connections between component parts if these are not specified as geometric data     model of a logic circuit  section basic modeling concepts  chapter structures and hierarchical madeling there are two methods for specifying the information needed to construct and manipulate a model one method is to store the infomation in a data struc ture such as a table or linked list the other method is to specify the information in procedures in general a model specification will contain both data structures and procedures although some models are defined completely with data struc tures and others use only procedural specifications an application to perform solid modeling of objects might use mostly information taken from some data structure to define coordinate positions with very few procedures a weather model on the other hand may need mostly procedures to calculate plots of tem perature and pressure variations  as an example of how combinations of data strictures and procedures can be used we consider some alternative model specifications for the logic circuit of  one method is to define the logic components in a data table table  with processing procedures used to specify how the network connections are to be made and how the circuit operates geometric data in this table include coor dinates and parameters necessary for drawing and pasitioning the gates these symbols could all be drawn as polygon shapes or they could be formed as com binations of straight line segments and elliptical arcs labels for each of the com ponent parts also have been included in the table aithough the labels could be omitted if the symbols are displayed as commonly recognized shapes proce dures would then be used to display the gates and construct the connecting lines based on the coordinate positions of the gates and a specified order for connect ing them an additional procedure is used to produce the circuit output binary values for any given input this procedure could be set up to display only the final output or it could be designed to display intermediate vutput values to il lustrate the internal functioning of the circuit  alternatively we might specify graphical information for the circuit model in data structures the connecting lines as well as the gates could then be de fined in a data table that explicitly lists endpoints for each of the lines in the cir cuit a single procedure might then display the circuit and calculate the output at the other extreme we could completely define the model in procedures using no external data structures  symbol hierarchies many models can be organized as a hierarchy of symbols the basic building blocks for the model are defined as simple geometric shapes appropriate to the type of model under consideration these basic symbols can be used to form composite objects called modules which themselves can be grouped to form higher level modules and so on for the various components of the model in the table a data table defining the structure and position of each gate in the circuit of fig   symbol geometric identitying code description label gate coordinates and other paramete s and gate i or gate  not gate  and simplest case we can describe a model by a one level hierarchy of component parts as in  for this circuit exarnple we assume that the gates are posi tioned and connected to each other with straight lines according to connection rules that are specified with each gate description the basic symbols in this hier archical description are the logic gates although the gates themselves could be described as hierarchies formed from straight lines elliptical arcs and text that sort of description would not be a convenient one for constructing logic cir cuits in which the simplest building blocks are gates for an application in which we were interested in designing different geometric shapes the basic symbols could be defined as straight line segments and arcs  an example of a two level symbol hierarchy appears in  here a fa cility layout is planned as an arrangement of work areas each work area is out fitted with a collection of furniture the basic symbols are the furniture items worktable chair shelves file cabinet and so forth higher order objects are the work areas which are put together with different furniture organizations an in stance of a basic symbol is defined by specifying its size position and orientation within each work area for a facility layout package with fixed sizes for objects only position and orientation need be specified by a user positions are given as coordinate locations in the work areas and orientations are specified as rotations that determine which way the symbols are facing at the second level up the hi erarchy each work area is defined by specifying its size position and orientation within the facility layout the boundary for each work area might be fitted with a divider that encloses the work area and provides aisles within the facility  more complex symbol hierarchies are formed by repeated grouping of sym bol clusters at each higher level the facility layout of  could be extended to include symbol clusters that form different rooms different floors of a build ing different buildings within a complex and different complexes at widely sep arated physical locations  modeling packages some general purpose graphics systems gks for example are not designed to accommodate extensive modeling applications routines necessary to handle modeling procedures and data structures are often set up as separate modeling packages and graphics packages then can be adapted to interface with the mod eling package the purpose of graphics routines is to provide methods for gener   a two level hierarchical description of a facility layout  ating and manipulating final output displays modeling routines by contrast provide a means for defining and rearranging model representations in terms of symbol hierarchies which are then processed by the graphics routines for dis play systems such as phigs and graphics library gl on silicon graphics equipment are designed so that modeling and graphics functions are integrated into one package  symbols available in an application modeling package are defined and structured according to the type of application the package has been designed to handle modeling packages can be designed for either two dimensional or three dimensional displays  illustrates a two dimensional layout used in cir cuit design an example of three dimensional molecular modeling is shown in  and a three dimensional facility layout is given in  such three dimensional displays give a designer a better appreciation of the appearance of a layout in the following sections we explore the characteristic features of model ing packages and the methods for interfacing or integrating modeling functions with graphics routines    two dimensional modeling layout used in circuit design  courtesy of summagraphics   one half of a stereoscopic image pair showing a three dimensional molecular model of dna data supplied by tamar schlick nyu and wilma k olson rutgers university visualization by jerry greenberg sdsc  courtesy of stephanie sides san diego supercomputer center     a three dimensional view of an office layout courtesy of intergraph corporation   a hierarchical model of a system can be created with structures by nesting the structures into one another to form a tree organization as each structure is placed into the hierarchy it is assigned an appropriate transformation so that it will fit properly into the overall model one can think of setting up an office facil ity in which furniture is placed into the various offices and work areas which in turn are placed into departments and so forth on up the hierarchy  local coordinates and modeling transformations in many design applications models are constructed with instances transformed copies of the geometric shapes that are defined in a basic symbol set instances are created by positioning the basic symbols within the world coordinate refer ence of the model the various graphical symbols to be used in an application are each defined in an independent coordinate reference called the modeling coordi nate system modeling coordinates are also referred to as local coordinates or sometimes master coordinates  illustrates local coordinate definitions section hierarchical modeling with structures chapter structures and hierarchical arrays for chair coordi nates modeling  x chair y chair  now ww   wowww  for two symbols that could be used in a two dimensional facility layout applica tion   to construct the component parts of a graphical model we apply transfor mations to the local coordinate definitions of symbols to produce instances of the symbols in world coordinates transformations applied to the modeling coordi nate definitions of symbols are referred to as modeling transformations typi cally modeling transformations involve translation rotation and scaling to posi tion a symbol in world coordinates but other transformations might also be used in some applications  modeling transformations we obtain a particular modeling transformation matrix using the geometric transformation functions discussed in chapter that is we can set up the indi vidual transformation matrices to accomplish the modeling transformation or we can input the transformation parameters and allow the system to build the matrices in either case the modeling package concatenates the individual trans formations to construct a homogeneous coordinate modeling transformation ma trix mt an instance of a symbol in world coordinates is then produced by ap plying mt to modeling coordinate positions p   to generate corresponding world coord inate positions p    p mt  px  d structure hierarchies as we have seen modeling applications typically require the composition of basic symbols into groups called modules these modules may be combined into arrays tor worktable coordinates  worktable ywernsbn  j   chair coisuis ler tipyiiticins  a 10 workable fb    objects defined in local coordinates  higher level modules and so on such symbol hierarchies can be created by em bedding structures within structures at each successive level in the tree we can first define a module structure as a list of symbol instances and their transfor mation parameters at the next level we define each higher level module as a list of the lower module instances and their transformation parameters this process is continued up to the root of the tree which represents the total picture in world coordinates a structure is placed within another structure with the function executestruccure id  jo properly orient the structure we first assign the appropriate local transforma tion to structure id this is done with setlocaltransformation mlt type  where parameter mlt specifies the transformation matrix parameter type is as signed one of the following three values pre post or replace to indicate the type of matrix composition to be performed with the current modeling transformation matrix if we simply want to replace the current transformation matrix with imt we set parameter type to the value replace if we want the current matrix to be premultipled with the local matrix we are specifying in this function we choose pre and similarly for the value post the following code section illustrates a se quence of modeling statements to set the first instance of an object into the hier archy below the root node  createstructure id0q  setlocaltransformation lmt  type execurestructure idl  closestructure  the same procedure is used to instance other objects within structure id0 to set the other nodes into this level of the hierarchy then we can create the next level down the tree by instancing objects within structure idl and the other structures that are in ido we repeat this process until the tree is complete the entire tree is then displayed by posting the root node structure id0 in the previ ous example in the following pracedure we illustrate how a hierarchical struc ture can be used to model an object  void main   enum  frame wheel bicycle   int npcs  wept2 pts  pmatrix3 m    routines to generate geometry  i extern void getwheelvertices int  npts wept2 prs   extern voic getframevertices int  npts wcpt2 pts      make the wheel structure   section hierarchical modeling with structures getwheelvertices npts prsi epenstructure wreeli setlinewidth   polyline npts f ts  closestructure   make the frame structure  getframevertices npts pts  openstructure iframe  setlinewidth   polyline infts  ts  closestructure  make the bic openstructure bic   nclude the frame  executestructure iframe    position and include rear wheel  matrixsetidenti mi  m    l     setlocaltransformationmatrix m replace  executestructure wheel    position and iaclude front wheel  m   mfl    o setlocaltransformationmatrix m replace executestructure wheel  closestructure  we delete a hierarchy with the function deletestructurenetwork 1d  where parameter id rererences the root structure of the tree this deletes the root node of the hierarchy and all structures that have been placed below the root using the executestyucture function assuming thet the hierarchy is orga nized as a tree  summary a structure also called a segment or an object in some systems is a labeled group of output statements and associated attributes bv designing pictures as sets of structures we can easily add delete or manipwate picture components independently of each another as structures are created they are entcred into a central structure store structures are then displayed by posting them to various output devices with assigned priorities when two structures overlap the struc ture with the higher pnority is displayed over the structt re with the lower prior itv  we can use workstation filters to set attributes such as visibility and high lighting for structures with the visibility filter we can turn off the display of a structure while retaining it in the structure list the highlighting filter is used to emphasize a displayed structure with blinking color or high intensity patterns  various editing operations can be applied to structures we can reopen structures to carry out append insert or delete operations locations in a struc ture are referenced with the element pointer in addition we mdividually label the primitives or attributes in a structure the term model in graphics applications refers to a graphical representa tion for some system components of the system are represented as symbols de exercises fined in loca  modeling coordinate reference frames many models such as elec trical circuits are constructed by placing instances of the symbols at selected locations  many medels are constructed as symbol hierarchies a bicycle for instance can be constructed with a bicycle frame and the wheels the frame can include such parts as the handlebars and the pedals and the wheels contain spokes rims and tires we can construct a hierarchial model by nesting structures for example we can set up a bike structure that contains a frame structure and a wheel structure both the frame and wheel structures can then contain primitives and additional structures we continue this nesting down to structures that con tain only output primitives and attributes  as each structure is nested within another structure an associated model ing transformation can be set for the nested structure this transformation de scribes the operations necessary to properly orient and scale the structure to fit into the hierarchy  references structure operations and hierarchical modeling in phigs are discussed in hopgoed and duce  howard et al   gaskins  and blake   for information on gks segment operations see hopgood  and enderle et ai   exercises  write a procedure for creating and manipulating the intormation in a central structure store this procedure is to be invoked by functians such as openstructure deletestructure and changestructurelident ifier   write a routine tor storing information in a traversal state fist kr  write a routine for erasing a specified structure on a raster system given the coordi  nate extents for all displayed structures in a scene  wrile a procedure to implement the unsost structure function on a raster system   write a procedure to implement the deletestructure function on a rasler system   write a procedure to implement highlighting as a blinking operation   write a set of routines for editing structures your routines should provide ror the fol lowing types of editing appending insening replacing and deleting structure ele ments   discuss model representations that would be appropriate far several distinctly difter  ent kinds of systems also discuss how graphical representations might be imple mented tor each system  fora logi circuit modeling applicatior such as that in  give a detailed graph tcal description of the standard logic symbols to be used in constructing a display of a circuit 10 develop a modeling package for electrical design that will allow a user to position elecrical symbols within a circuit network only translations reed be applied to place an instance of one of the electrical menu shapes into the network once a component has been placed in the network it is to be connected to other specified components with straight line segments  11 devwse a two dimensional facility layout package a nenu of furniture shapes is to be chapter  structures and hierarchical modeling  12  pravided to a des gner who can place the objects in ary location within a single room one level hierarchy  instance transformations can be limited to translatiors and reta tions  devise a two dimensional facility layout package that presents a menu of furniture shapes a two leve hierarchy is to be used so that furniture items can be placed into various work areas and the work areas can be arranged within a larger area instance transformations may be limited to translations and rotations but scaling could be used if furniture items of different sizes are to be available chapter oe  graphical user interfaces and interactive input methods  t he human computer interface for most systems invalves extensive graph ics regardless ot the application typically general systems now consist of windows pull down and pop up menus icons and pomting devices such as a mouse or spaceball for positioning the screen cursor popular graphical user in terfaces include x windows windows macintosh openlook and motif these interfaces are used in a variety of applications including word processing spreadsheets databases and file management systems presentation systems and page layout systems in graphics packages specialized interactive dialogues are designed for individual applications such as engineering design architectural design data visualization drafting business graphs and artist s paintbrush pro grams for general graphics packages interfaces are usually provided through a standard system an example is the x window system interface with phigs in this chapter we take a look at the basic elements of graphical user interfaces and the techniques for interactive dialogues we also consider how dialogues in graphics packages in particular can allow us to construct and manipulate pic ture components select menu options assign parameter values and select and position text strings a variety of input devices exists and general graphics packages can be designed to interface with various devices and to provide exten sive dialogue capabilities   for a particular application the user s mioael serves as the basis for the design of the dialogue the user s model describes what the system is designed to accom plish and what graph cs operations are available  t states the type of objects that can be displayed and how the objects can be manipulated for example if the graphics system is ta be used as a tool for architectural design the model de scribes how the package can be used to construct and display views of buildings by positioning walls doors windows and other building components similarly for a facilitv layout system objects could be defined as a set of furniture items tables chairs etc  and the available operations would include those for posi tioning and removing different pieces of furniture within the facility layout and a circuit design prograni might use electrical or logic elements for objects with positioning operations available for adding or deletirg elements within the over all circuit design all information in the user dialogue is then presented in the language of the section application in an architectural design package this means that all interactions the user dialogue are described only in architectural terms without reference to particular data structures or other concepts that may be unfamiliar to an architect in the follow ing sections we discuss some of the general considerations in structuring a user dialogue  windows and icons  shows examples of common window and icon graphital interfaces vi sual representations are used both for objects to be manipulated in an application and for the actions to be performed on the application objects  a window system provides a window manager interface for the user and functions for handling the display and manipulation of the windows common functions for the window system are opening and closing windows reposition ing windows resizing windows and display routines that provide interior and exterior clipping and other graphics functions typically windows are displayed with sliders buttons and menu icons for selecting various window options some general systems such as x windows and news are capable of supporting multiple window managers so that different window styles can be accommo dated each with its own window manager the window managers can then be designed for particular applications in other cases a window system is designed for one specific application and window style  icons representing objects such as furniture items and circuit elements are often referred to as application icons the icons representing actions such as ro tate magnify scale clip and paste are called control icons or command icons  accommodating multiple skill levels usually interactive graphical interfaces provide several methods for selecting ac tions for example options could be selected by pointing at an icon and clicking different mouse buttons or by accessing pull down or pop up menus or by typ ing keyboard commands this allows a package to accommodate users that have different skill levels  for a less experienced user an interface with a few easily understood oper ations and detailed prompting is more effective than one with a large compre   c   examples of screen layouts using window systems and icons  courtesy of a intergraph corporation  b visual numerics inc  and c sun microsystems  nm caples graphical ser lilertaces aac interac t  e faput methods hensive operation set a simplifies setot menus and options is easy to learn and remember and the user can concentrate on the application uistead of on the de tails of the intertace sim ple point and click operations arv often easiest for an in experienced user of an applications package therefore mterfaces typically pro vide a means for maskirg the complexity of a package so that beginners can use the system without being overwhelmed wrth too much deta  experienced users on the other hand typically want speed this means fewer prompts and more input trom the kevboard or sith multiple mouse but ton clicks actions are selected with function keys or with simultaneous combina tions of keyboard keys  ince experienced users will remember these shortcuts for commonly used actions similarly help tacuities can be designed on several levels so that beginners can carry on a detailed dialogue while more experienced neers can reduce or eliminate prompts and messages help facilities can also include one or more tu torial applications which provide users with an introduction to the capabilities and use of the svstem  corns stencs an important design consideration in an interface is consistenev for example a particular icon shape should always have a single mear ing rather than serving to represent different actions or objects depending on the context some other ex amples of consistency are always placing menus in the same relative positions so that a user does not have to hunt for a particular option always using a particu lar combination of keyboard keys for the same action and always color coding sa that the same color docs not have different meanings in vifferent situations generally a complicated inconsistent model is difficult for a user to under stand and to work with in an effective way the objects and operations provided should be designed to farm a minimum and consistent set so that the svstent is easy to learn but not os ersimplified to the point where it is ditficult to apply  minimizing memarngaitien operations in an interface should also be structured so hat thev are easy to un derstand and to remem er obscure complicated incorsistent and abbreviated command formats lead confusion and reduction in the effeetiveness ol the use of the package one key or button used for ail delete operations for example is easier to remember than a number of different keys for different tvpes of delete operations  icons and window systems also aid in minimizing memorization different kinds of information can be separated into different windows so that we do nat have to rely on memorization when different information displays overlap we can simply retain the multiple information on the screen in different windows and switch back and forth between window areas  cons are used to reduce mem orizing by displaying casily recognizable shapes for various objects and actions to select a particular action we simply select the icon that resembles that action  bas kup and brot andi oe a mechanism tor backing up or aborting during a sequence of operations is an other common teature cl an interface often an operation can be canceled before execution is completed with the system restored to the state it was in before the operation was started with the ability to back up at any point we can confi dently explore the capabilities of the system knowing that the effects of a mis take can be erased  backup can be provided in many forms a standard undo key or command is used to cancel a single operation sometimes a system can be backed up through several operations allowing us to reset the system to some specified point in a system with extensive backup capabilities all inputs could be saved so that we can back up and replay any part of a session  sometimes operations cannot be undone once we have deleted the trash in the desktop wastebasket for instance we cannot recover the deleted files in this case the interface would ask us to verify the delete operation before proceeding  good diagnostics and error messages are designed to help determine the cause of an error additionally interfaces attempt to minimize error possibilities by anticipating certain actions that could lead to an error examples of this are not allowing us to transform an object position or to delete an object when no ob ject has been selected not allowing us to select a line attribute if the selected ob ject is not a line and not allowing us to select the paste operation if nothing is in the clipboard  feedback interfaces are designed to carry on a continual interactive dialogue so that we are informed uf actions in progress at each step this is particularly important when the response time is high without feedback we might begin to wonder what the system is doing and whether the input should be given again  as each input is received the system normally provides some type of re sponse an object is highlighted an icon appears or a message is displayed this not only informs us that the input has been received but it also tells us what the system is doing if processing cannot be completed within a few seconds several feedback messages might be displayed to keep us informed of the progress of the system in some cases this could be a flashing message indicating that the system is still working on the input request it may also be possible for the system to dis play partial results as they are completed so that the final display is built up a piece at a time the system might also allow us to input other commands or data while one instruction is being processed  feedback messages are normally given clearly enough so that they have lit tle chance of being overlooked but not so overpowering that our concentration is interrupted with function keys feedback can be given as an audible click or by lighting up the key that has been pressed audio feedback has the advantage that it does not use up screen space and we do not need to take attention from the work area to receive the message when messages are displayed on the screen a fixed message area can be used so that we always know where to look for mes sages in some cases it may be advantageous to place feedback messages in the work area near the cursor feedback can also be displayed in different colors to distinguish it from other displayed objects  to speed system response feedback techniques can be chosen to take ad vantage of the operating characteristics of the type of devices in use a typical raster feedback technique is to invert pixel intensities particularly when making menu selections other feedback methods include highlighting blinking and color changes  section the user dialogue no chapter  graphical user interfaces and interactive input methods special symbols are designed for different types of feedback for example a cross a frowning face or a thumbs down symbol is often used to indicate an error and a blinking at work sign is used to indicate that processing is in progress this type of feedback can be very effect ve with a more experienced user but the beginner may need more detailed feedback that not only clearly in dicates what the system is doing but also what the user should input next  with some types of input echo feedback is desirable typed characters can be displayed on the screen as they are input so that we can detect and correct er rors immediately button and dial input can be echoed in the same way scalar values that are selected with dials or from displayed scales are usually echoed on the screen to let us check input values for accuracy selection of coordinate points can be echoed with a cursor or other symbol that appears at the selected position for more precise echoing of selected positions the coordinate values can be dis played on the screen  graphics programs use several kinds of input data picture specifications need values for coordinate positions values for the character string parameters scalar values for the transformation parameters values specifying menu options and values for identification of picture parts any of the input devices discussed in chapter can be used to input the various graphical data types but some de vices are better suited fur certain data types than others to make graphics pack ages independent of the particular hardware devices used input functions can be structured according to the data description to be handjed by each function this approach provides a logical input device classification in terms of the kind of data to be input by the device  logical classitication of input dey ices the various kinds of input data are summarized in the following six logical de vice classifications used by ph gs and gks  locator a device for specifying a coordinate position x y stroke a device for specifying a series of coordinate positions string  a device for specifying text input valuator a device for specifying scalar value  choice a device for selecting menu options pick a device ter selecting picture components in some packages a single logical device is used tur both locator and stroke operations some other mechanism such as a switch can then be used to indicate whether one coordinate position or a stream of positions is to be input  each of the six logical input device classifications van be implemented with any of the hardware devices but some hardware devices are more convenient for certain kinds of data than others a device that can be pointed at a screen posi tion is more convenient for entering coordinate data than a kevboard for exam ple in the following sections we discuss how the vanous physical devices are used to provide input ithin each of the logical classifications locator devices a standard method for interactive selection of a coordinate point is by position ing the screen cursor we can do this with a mouse joystick trackball spaceball thumbwheels dials a digitizer stylus or hand cursor or some other cursor posi tioning device when the screen cursor is at the desired location a button is acti vated to store the coordinates of that screen point  keyboards can be used for locator input in several ways a general purpose keyboard usually has four cursor control keys that move the screen cursor up down left and right with an additional four keys we can move the cursor diag onally as well rapid cursor movement is accomplished by holding down the se lected cursor key alternatively a joystick joydisk trackball or thumbwheels can be mounted on the keyboard for relative cursor movement as a last resort we could actually type in coordinate values but this is a slower process that also re quires us to know exact coordinate values  light pens have also been used to input coordinate positions but some spe cial implementation considerations are necessary since light pens operate by de tecting light emitted from the screen phosphors some nonzero intensity level must be present at the coordinate position to be selected with a raster system we can paint a color background onto the screen as long as no black areas are present a light pen can be used to select any screen position when it is not pos sible to eliminate all black areas in a display such as on a vector system for ex ample  a light pen can be used as a locator by creating a small light pattern for the pen to detect the pattern is moved around the screen until it finds the light pen  stroke devices this class of logical devices is used to mput a sequence of coordinate positions stroke device input is equivalent to multiple calls to a locator device the set of input points is often used to display line sections  many of the physical devices used for generating locator input can be used as stroke devices continuous movement of a mouse trackball joystick or tablet hand cursor is translated into a series of input coordinate values the graphics tablet is one of the more common stroke devices button activation can be used to place the tablet into continuous mode as the cursor is moved across the tablet surface a stream of coordinate values is generated this process is used in pain  brush systems that allow artists to draw scenes on the screen and in engineering systems where layouts can be traced and digitized for storage  string devices the primary physical device used for string input is the keyboard input charac ter strings are typically used for picture or graph labels  other physical devices can be used for generating character patterns in a text writing mode for this input individual characters are drawn on the screen with a stroke or locator type device a pattern recognition program then interprets the characters using a stored dicticnary of predefined patterns  valuator devices this logical class of devices is employed in graphics systems to input scalar val ues valuators are used for setting various graphics parameters such as rotation section b input of graphical data chapter graphical user interfaces and  interactive input methods angle and scale factors and for setting physical parameters associated with a par ticular application temperature settings voltage levels stress factors etc   a typical physical device used to provide valuator input is a set of control dials floating point numbers within any predefined range are input by rotating the dials dial rotations in one direction increase the numeric input value and opposite rotations decrease the numeric value rotary potentiometers convert dial rotation into a corresponding voltage this voltage is then translated into a real ridinber within a defined scalar range such as to instead of dials slide potentiometers are sometimes used to convert linear movements into scalar values  any keyboard with a set of numeric keys can be used as a valuator device a user siriply types the numbers directly in floating point format although this is a slower iriethod than using dials or slide potentiometers  joysticks trackballs tablets and other interactive devices can be adapted for valuator input by interpreting pressure or movement of the device relative to a scalar range for one direction of movement say left to right increasing scalar values can be input movement in the opposite direction decreases the scalar input value  another technique for providing valuator input is to display sliders but tons rotating scales and menus on the video monitor  illustrates some possibilities for scale representations locator input from a mouse joystick spaceball or other device is used to select a coordinate position on the display and the screen coordinate position is then converted to a numeric input value as a feedback mechanism for the yser the selected position on a scale can be marked with some symbol numeric values may also be echoed somewhere on the screen to confirm the selections      scales displayed on a video monitor for interactive selection of parameter values in this display sliders are provided for selecting scalar values for superellipse parameters s1 and s2 and for individual r g and b color values in addition a small circle can be positioned on the color wheel for selection of a combined rgb color and buttons can be activated to make small changes in color values choice devices graphics packages use menus to select programming options parameter values and object shapes to be used in constructing a picture   a choice device is defined as one that enters a selection from a list menu of alternatives com monly used choice devices are a set of buttons a cursor positioning device such as a mouse trackball or keyboard cursor keys and a touch panel  a function keyboard or button box  designed as a stand alone unit is often used to enter menu selections usually each button is programmable so that its function can be altered to suit different applications single purpose but tons have fixed predefined functions programmable function keys and fixed function buttons are often included with other standard keys on a keyboard  for screen selection of listed menu options we can use cursor control de vices when a coordinate position x y is selected it is compared to the coordi nate extents of each listed menu item a menu item with vertical and horizontal boundaries at the coordinate values xpin xmax yminv and ymax is selected if the input coordinates x y satisfy the inequalities xmin  x s xmaxs ymin    ymax  for larger menus with a few options displayed at a time a touch panel is commonly used as with a cursor control device such as a mouse a selected screen position is compared to the area occupied by each menu choice  alternate methods for choice input include keyboard and voice entry a standard keyboard can be used to type in commands or menu options for this method of choice input some abbreviated format is useful menu listings can be numbered or given short identifying names similar codings can be used with voice input systems voice input is particularly useful when the number of op tions is small or less  pick devices graphical object selection is the function of this logical class of devices pick de vices are used to select parts of a scene that are to be transformed or edited in some way  typical devices used for object selection are the same as those for menu se lection the cursor positioning devices with a mouse or joystick we can position the cursor over the primitives in a displayed structure and press the selection button the position of the cursor is then recorded and several levels of search may be necessary to locate the particular object if any that is to be selected first the cursor position is compared to the coordinate extents of the various structures in the scene if the bounding rectangle of a structure contains the cur sor coordinates the picked structure has been identified but if two or more structure areas contain the cursor coordinates further checks are necessary the coordinate extents of individual lines in each structure can be checked next if the cursor coordinates are determined to be inside the coordinate extents of only one line for example we have identified the picked object otherwise we need addi tional checks to determine the closest line to the cursor position  one way to find the closest line to the cursor position is to calculate the dis tance squared from the cursor coordinates x y to each line segment whose bounding rectangle contains the cursor position   for a line with end points x  y  and x  y2  distance squared from x y to the line is calculated as section input of graphical data   distances to line segments from the pick position  _ axy y  aye p ax  ay  a where ax x x  and ay y y  various approximations can be used to speed up this distance calculation or other identification schemes can be used  another method for finding the closest line to the cursor position is to spec ify the size of a pick window the cursor coordinates are centered on this win dow and the candidate lines are dipped to the window as shown in  by making the pick window small enough we can ensure that a single line will cross the window the method for selecting the size of a pick window is de scribed in section where we consider the parameters associated with various input functions  a methed for avoiding the calculation of pick distances or window clipping intersections is to highlight the candidate structures and allow the user to resolve the pick ambiguity one way to do this is to highlight the structures that overlap the cursor position one by one the user then signals when the desired structure is highlighted  an alternative to cursor positioning is to use button input to highlight suc cessive structures a second button is used to stop the process when the desired structure is highlighted if very many structures are to be searched in this way the process can be speeded up and an additional button is used to help identify the structure the first button can initiate a rapid successive highlighting of struc tures a second button can again be used to stop the process and a third button can be used to back up more slowly if the desired structure passed before the op erator pressed the stop button  finally we could use a keyboard tu type in structure names this is a straightforward but less interactive pick selection method descriptive names can be used to help the user in the pick process but the method has several drawbacks it is generally slower than interactive picking on the screen and a user will probably need prompts to remember the various structure names in addition picking structure subparts from the keyboard can be more difficult than picking the subparts on the screen  w e   p   a pick window centered on pick tyra  coordinates x  y  used to resolve w _ i i pick object overlaps  graphical input functions  be set up to allow users to specify the following options   which physical devices are to provide input within a particular logical clas sification for example a tablet used as a stroke device   how the graphics program and devices are to interact input mode  either the program or the devices can initiate dat  entry or both can operate si multaneously   when the data are to be input and which device is to be used at that time to deliver a particular input type to the specified data variables  input modes functions to provide input can be structured to operate in various input modes which specify how the program and input devices interact input could be initi ated by the program or the program and input devices both could be operating simultaneously or data input could be initiated by the devices these three input modes are referred to as request mode sample mode and event mode  in request mode the application program initiates data entry input values are requested and processing is suspended until the required values are received this input mode corresponds to typical input operation in a general program ming language the program and the input devices operate alternately devices are put into a wait state until an input request is made then the program waits until the data are delivered  in sample mode the application program and input devices operate inde pendently input devices may be operating at the same time that the program is processing other data new input values from the input devices are stored re placing previously input data values when the program requires new data it samples the current values from the input devices  in event mode the input devices initiate data input to the application pro gram the program and the input devices again operate concurrently but now the input devices deliver data to an input queue all input data are saved when the program requires new data it goes to the data queue  any number of devices can be operating at the same time in sample and event modes some can be operating in sample mode while others are operating in event mode but only one device at a time can be providing input in request mode  an input mode within a logical class for a particular physical device operat ing on a specified workstation is declared with one of six input class functions of the form set   moce ws devicecode inputmode echoflaq  where devicecode is a positive integer inputmode is assigned one of the val ues request sampl2 or event and parameter echoflag is assigned either the value echo or the value noecho how input data will be echoed on the display de vice is deterrained by parameters set in othex input functions to be described later in this section  section input functions  chapter  table graphical user interfaces and assignment of input device interactive input methods codes  device code  physical device type keyboard graphics tablet mouse lovstick trackball button tu e wn device code assignment is installation dependent one possible assignment of device codes is shown in table using the assignments in this table we could make the following declarations  setlocatormode  sample noecho settextmode  request echo setpickmode  event echo  thus the graphics tablet is declared to be a locator device in sample mode on workstation with no input data feedback echo the keyboard is a text device in request mode on workstation with input echo and the mouse is declared to be a pick device in event mode on workstation with input echo  request mode input commands used in this mode correspond to standard input functions in a high level programming language when we ask for an input in request mode other processing is suspended until the input is received after a device has been assigned to request mode as discussed in the preceding section input requests can be made to that device using one of the six logical class functions represented by the following  request   ws devicecode status     values input with this function are the workstation code and the device code re turned values are assigned to parameter status and to the data parameters cor responding to the requested logical class  a value of ok or none is returned in parameter status according to the va lidity of the input data a value of none indicates that the input device was acti vated so as to produce invalid data for locator input this could mean that the coordinates were out of range for pick input the device could have been acti vated while not pointing at a structure or a break button on the input device could have been pressed a returned value of none can be used as an end of data signal to terminate a programming sequence  locator and stroke input in request mode the request functions for these two logical input classes are requestlocator ws devcode status viewindgex ot regqueststroke ws devccce nmax status viewlindex m prs for locator input pt is the world coordinate position selected for stroke input pts is a list of n coordinate positions where parameter nmax gives the maxi mum number of points that can go in the input list parameter viewindex is as signed the two dimensional view index number  determination of a world coordinate position is a two step process  the physical device selects a point in device coordinates usually from the video dis play screen and the inverse of the workstation transformation is performed to obtain the corresponding point in normalized device coordinates  then the inverse of the window to viewport mapping is carried out to get to viewing co ordinates then to world coordinates  since two cr more views may overlap on a device the correct viewing transformation is identified according to the view transformation input priority number by default this is the same as the view index number and the lower the number the higher the priority view index has the highest priority we can change the view priority relative to another reference viewing transformation with setviewtransformationinputpriority ws viewindex refviewindex prior ty  where viewindex identifies the viewing transformation whose priority is to be changed refviewindex identifies the reference viewing transformation and parameter priority is assigned either the value lower or the value higher for example we can alter the priority of the first four viewing transformations on workstation as shown in  with the sequence of functions  setviewtransformationinputpriority  higher set viewtransformationinputpriority   lower  string input in request mode here the request input function is regueststring ws devcode status nchars str  parameter str in this function is assigned an input string the number of charac ters in the string is given in parameter nchars      original final priority ordering priority ordering   rearranging viewing priorities  section input functions chapter graphical user interfaces and  inleractive input methods valuator input in request mode a numerical value is input in request mode with requestvaluator ws devcode status value  parameter value cai be assigned any real number value  choice input in request mode we make a menu selection with the following request function requestchoice ws devcode status itemnum  parameter itemnum is assigned a positive integer value corresponding to the menu item selected  pick input in request mode for this mode we obtain a structure identifier number with the function requestpick ws devcode maxpathdepth status pathdepth pickpath  parameter pickpath is a list of information identifying the primitive selected this list contains the structure name pick identifier for the primitive and the ele ment sequence number parameter pickdepth is the number of levels returned in pickpath and maxpathdepth is the specified maximum path depth that can be included in pickpath  subparts of a structure can be labeled for pick input with the following function  setpickidentifier pickid  an example of sublabeling during structure creation is given in the following programming sequence  openstructure 1d  for k  k  n k   setpickidentifier k    closestructure  picking of structures and subparts of structures is also controlled by some work station filters section objects cannot be picked if they are invisible also we can set the ability to pick objects independently of their visibility this is accom plished with the pick filter  setpickfilter ws devcode pickables nonp ckabes where the set pickabies contains the names of objects structures and primi tives that we may want to select with the specified pick device similarly the set nonpickables contains the names of objects that we do not want to be avail able for picking with this input device  sample mode once sample mode has been set for one or more physical devices data input be zins without waiting for program direction if a joystick has been designated as a ocator device in sample mode coordinate values for the current position of the activated joystick are immediately stored as the activated stick position changes the stored values are continually replaced with the coordinates of the current stick position  sampling of the current values from a physical device in this mode begins when a sample command is encountered in the application program a locator device is sampled with one of the six logical class functions represented by the following  sample   ws devicecode a  some device classes have a status parameter in sample mode and some do not other input parameters are the same as in request mode  as an example of sample input suppose we want to translate and rotate a selected object a final translation position for the object can be obtained with a locator and the rotation angle can be supplied by a valuator device as demon strated in the following statements  samplelocator wsl devl viewindex pr samplevaluator ws2 dev2 angle  event mode when an input device is placed in event mode the program and device operate simultaneously data input from the device is accumulated in an event queue or input queue all input devices active in event mode can enter data referred to as events  into this single event queue with each device entering data values as they are generated at any one time the event queue can contain a mixture of data types in the order they were input data entered into the queue are identi tied according to logical class workstation number and physical device code  an application program can be directed to check the event queue for any input with the function awaitevent time ws deviceclass dev cecode  parameter time is used to set a maximum waiting time for the application pro gram lf the queue happens to be empty processing is suspended until either the number of seconds specified in time has elapsed or an input arrives should the waiting time run out before data values are input the parameter aeviceclass is assigned the value none when time is given the value the program checks the queue and immediately returns to other processing if the queue is empty  section input functions chapter graphical user interfaces and  interactive input methods if processing is directed to the event queue with the awaitevent function and the queue is not empty the first event in the queue is transferred to a current event record the particular logical device class such as locator or stroke that made this input is stored in parameter deviceclass codes identifying the particular workstation and physical device that made the input are stored in pa rameters ws and devicecode respectively  to retrieve a data input from the current event record an event mode input function is used the functions in event mode are similar to those in request and sample modes however no workstation and device code parameters are neces sary in the commands since the values for these parameters are stored in the data record a user retrieves data with get       for example to ask for locator input we invoke the function getlocator viewindex pt  in the following program section we give an example of the use of the awaitevent and get functions a set of points from a tablet device code on workstation is input to plot a series of straight line segments connecting the input coordinates  setstrokemode  event noecho   do  awaitevent  ws deviceclass devicecode  while deviceclass  stroke  getstroke nmax viewindex n pts  polyline n pts  the repeat until loop bypasses any data from other devices that might be in the queue if the tablet is the only active input device in event mode this loop is not necessary  a number of devices can be used at the same time in event mode for rapid interactive processing of displays the following statements plot input lines from a tablet with attributes specified by a button box  setpolylineindex    set tablet to stroke device event mode  setstrokemode  evenz noecho     set buttons to choice device event mode  setchoicemode  event noecho  do  awaitevent  ws deviceclass devicecode  if deviceclass  choice   getchoice status option  setpolylineindex option   i else if deviceclass  stroke  getstroke nmax viewindex n pts  polyline n pts    while deviceclass  none  some additional housekeeping functions can be used in event mode func tions for clearing the event queue are useful when a process is terminated and a new application is to begin these functions can be set to clear the entire queue or to clear only data associated with specified input devices and workstations  concurrent use of input modes an example of the simultaneous use of input devices in different modes is given in the following procedure an object is dragged around the screen with a mouse when a final position has been selected a button is pressed to terminate any further movement of the sbject the mouse positions are obtained in sample mode and the button input is sent to the event queue   drags object in response to mouse input    terminate processing by button press  setlocatormode  sample echo  setchoicemode  event noecho  do  samplelocator  viewindex pt    trarslate object centroid to position pt and draw   awaitevent  ws class code   while class  choice    quite a number of parameters can be set for input devices using the nitial ize function for each logical class  initialize   ws devicecode    ps coordext datarec  parameter pe is the prompt and echo type parameter coordext is assigned a set of four coordinate values and parameter datarec is a record of various con trol parameters  for locator input some values that can be assigned to the prompt and echo parameter are pe  installation defined pe  crosshair cursor centered at current position pe  line from initial position to current position pe  rectangle defined by current and initial points several other options are also available for structure picking we have the following options  pe  highlight picked primitives pe  highlight all primitives with value of pick id pe  highlight entire structure as well as several others  section initial valves for input device parameters chapter  graphical user interfaces and  interactive input methods when an echo of the input data is requested it is displayed within the bounding rectangle specified by the four coordinates in parameter coordext additional options can also be set in parameter datarec for example we can set any of the following   size of the pick window  minimum pick distance  type and size of cursor display  type of structure highlighting during pick op rations  range min and max for valuator input  resolution scale for valuator input plus a number of other options   there are several techniques that are incorporated into graphics packages to aid the interactive construction of pictures various input options can be provided so that coordinate information entered with locator and stroke devices can be ad justed or interpreted according to a selected option for example we can restrict all lines to be either horizontal or vertical input coordinates can establish the po sition or boundaries for objects to be drawn or they can be used to rearrange pre viously displayed objects  basic positioning methods coordinate values supplied by locator input are often used with positioning methods to specify a location for displaying an object or a character string we in teractively select coordinate positions with a pointing device usually by posi tioning the screen cursor just how the object or text string positioning is pe formed depends on the selected options with a text string for example the scteen point could be taken as the center string position or the start or end posi tion of the string or any of the other string positioning options discussed in chapter for tines straight line segments can be displayed between two se lected screen positions  as an aid in positioning objects numeric values for selected positions can be echoed on the screen using the echoed coordinate values as a guide we can make adjustments in the selected location to obtain accurate positioning  constraints with some applications certain types of prescribed orientations or object align ments are useful a constraint is a rule for altering input coordinate values to produce a specified orientation or alignment of the displayed coordinates there are many kinds of constraint functions that can be specified but the most com mon constraint is a horizontal or vertical alignment of straight lines this type of constraint shown in figs and is useful in forming network layouts with this constraint we can create horizontal and vertical lines without worrying about precise specification of endpoint coordinates section interactive picture construction techniques  3e select first select endpoint position second endpoint position along approximate horizontal path   horizontal line constraint   i _ select first select endpoint position second endpoint position along approximate vartical path   vertical line constraint  a horizontal or vertical constraint is implemented by determining whether any two input coordinate endpoints are more nearly horizontal or more nearly vertical if the difference in the y values of the two endpoints is smaller than the difference in x values a horizontal line is displayed otherwise a vertical line is drawn other kinds of constraints can be applied to input coordinates to produce a variety of alignments lines could be constrained to have a particular slant such as  and input coordinates could be constrained to lie along predefined paths such as circular arcs  grids another kind of constraint is a grid of rectangular lines displayed in some part of the screen area when a grid is used any input coordinate position is rounded to the nearest intersecton of two grid lines  illustrates line drawing with a grid each of the two cursor positions is shifted to the nearest grid intersection point and the line is drawn between these grid points grids facilitate object con structions because a new line can be joined easily to a previously drawn line by selecting any position near the endpoint grid intersection of one end of the dis played line   seiect first endpoint position near a grid intersection  select a position near a second grid intersection   line drawing using a grid chapter graphical user interfaces and interactive input methods   gravity field around a line any selected point in the shaded area is shifted to a position on the line  spacing between grid lines is often an option that can be set by the user similarly grids can be turned on and off and it is sometimes possible to use par tial grids and grids of different sizes in different screen areas  gravity field in the construction of figures we sometimes need to connect lines at positions be tween endpoints since exact positioning of the screen cursor at the connecting point can be difficult graphics packages can be designed to convert any input position near a line to a position on the line  this conversion of input position is accomplished by creating a gravity field area around the line any selected position within the gravity field of a line is moved  gravitated  to the nearest position on the line a gravity field area around a line is illustrated with the shaded boundary shown in  areas around the endpoints are enlarged to make it easier for us to connect lines at their endpoints selected positions in one of the circular areas of the gravity field are attracted to the endpoint in that area the size of gravity fields is chosen large enough to aid positioning but small enough to reduce chances of overlap with other lines if many lines are displayed gravity areas can overlap and it may be difficult to specify points correctly normally the boundary for the gravity field is not displayed  rubber band methads straight lines can be constructed and positioned using rubber band methods which stretch out a line from a starting position as the screen cursor is moved  demonstrates the rubber band method we first select a screen posi tion for one endpoint of the line then as the cursor moves around the line is displayed from the start position to the current position of the cursor when we finally select a second screen position the other line endpoint is set  rubber band methods are used to construct and position other objects be sides straight lines  demonstrates rubber band construction of a rec tangle and  shows a rubber band circle construction   ao  ee   f i qo  sn   ee ne select as the cursor line follows first moves a line cursor position line stretches out until the second endpoint from the initial endpoint is point selected  rubber band method for drawing and positioning a straight line segment    select rectangle select final pasition stretches out position for for one corner as cursor moves opposite corner of the rectangle of the ractangle  rubber band method for constructing a rectangle  dragging a technique that is often used in interactive picture construction is to move ob jects into position by dragging them with the screen cursor we first select an ob ject then move the cursor in the direction we want the object to move and the se lected object follows the cursor path dragging objects to various positions in a scene is useful in applications where we might want to explore different possibil ities before selecting a final location  painting and drawing options for sketching drawing and painting come in a variety of forms straight lines polygons and circles can be generated with methods discussed in the pre vious sections curve drawing options can be provided using standard curve shapes such as circular arcs and splines or with freehand sketching procedures splines are interactively constructed by specifying a set of discrete screen points that give the general shape of the curve then the system fits the set of points with a polynomial curve in freehand drawing curves are generated by follow ing the path of a stylus on a graphics tablet or the path of the screen cursor on a video monitor once a curve is displayed the designer can alter the curve shape by adjusting the positions of selected points along the curve path  joo  select position circle stretches select the for the circle out as the final radius center cursor moves of the circle  constructing a circle using a rubber band method  chapter  graphical user interfaces and interactive input ss os et il cal nl   a screen layout showing one type of interface to an artist s painting package  courtesy of thomson digital image  line widths line styles and other attribute options are also commonly found in painting and drawing packages these options are implemented with the methods discussed in chapter various brush styles brush patterns color combinations object shapes and surface texture patterns are also available on many systems particularly those designed as artist s workstations some paint systems vary the line width and brush strokes according to the pressure of the artist s hand on the stylus  shows a window and menu system used with a painting package that allows an artist to select variations of a specified ob ject shape different surface textures and a variety of lighting conditions for a scene  a typical virtual reality environment is illustrated in  interactive input is accomplished in this environment with a data glove section  which is ca pable of grasping and moving objects displayed in a virtual scene the computer generated scene is displayed through a head mounted viewing system section as a stereoscopic projection tracking devices compute the pasition and ori entation of the headset and data glove relative to the object positions in the scene with this system a user can move through the scene and rearrange object posi tions with the data glove  another method for generating virtual scenes is to display stereoscopic pro jections on a raster monitor with the two stereoscopic views displayed on alter nate refresh cycles the scene is then viewed through stereoscopic glasses inter active object manipulations can again be accomplished with a data glove and a tracking device to monitor the glove position and orientation relative to the posi tion of objects in the scene    using a head tracking stereo display called the boom fake space labs inc  and a dataglove vpl inc  a researcher interactively manipulates exploratory probes in the unsteady flow around a harrier jet airplane software developed by steve bryson data from harrier  courtesy of sam uselton nasa ames research center   summary a dialogue for an applications package can be designed from the user s model which describes the furictions of the applications package all elements of the di alogue are presented in the language of the applications examples are electrical and architectural design packages  graphical interfaces are typically designed using windows and icons a window system provides a window manager interface with menus and icons that allows users to open close reposition and resize windows the window system then contains routines to carry out these operations as well as the various graphics operations general window systems are designed to support multiple window managers icons are graphical symbols that are designed for quick iden tification of application processes or control processes  considerations in user dialogue design are ease of use clarity and flexibil ity specifically graphical interfaces are designed to maintain consistency in user interaction and to provide for different user skill levels in addition interfaces are designed to minimize user memorization to provide sufficient feedback and to provide adequate backup and error handling capabilities  input to graphics programs can come from many different hardware de vices with more than one device providing the same general class of input data graphics input functions can be designed to be independent of the particular input hardware in use by adopting a logical classification for input devices that is devices are classified according to the type of graphics input rather than a summary  chapter graphical user interfaces and interactive input methods hardware designation such as mouse or tablet the six logical devices in com mon use are locator stroke string valuator choice and pick locator devices are any devices used by a program to inpul a single coordinate position stroke de vices input a stream of coordinates string devices are used to input text valuator devices are any input devices used to enter a scalar value choice devices enter menu selections and pick devices input a structure name  input functions available in a graphics package can be defined in three input modes request mode places input under the control of the application program sample mode allows the input devices and program to operate concur rently event mode allows input devices to initiate data entry and control pro cessing of data once a mode has been chosen for a logical device class and the particular physical device to be used to enter this class of data input functions in the program are used to enter data values into the program an application pro gram can make simultaneous use of several physical input devices operating in different modes  interaclive picture construction methods are commonly used in a variety of applications including design and painting packages these methods provide users with the capability to position objects to constrain figures to predefined orientations or alignments to sketch figures and to drag objects around the screen grids gravity fields and rubber band methods are used to aid in posi tioning and other picture construction operations  references guidelines for user interface design are presented in apple  bleser  digital  and osf motif  for information on the x window svstem see young  and cutler gilly and reilly  additional discussions of interface design can be found in phillips  goodman and spence  locdding  swezey and davis  carroll and  arrithers  foley wallace and chan  and good et al   the evolution of the concept of logical or virtual input devices is discussed in wallace  and in rosenthal et al   an early discussion of input device classifications is to be found in newman   input operations in phigs can be found in hopgood and buce  howard et al   gaskins  and blake  for iniormation on gks input functions see hopgood et al  ana enderle  ansy and pratt   exercises  select some graphics application witn which you are familiar and set up a user model that will serve as the basis for the design of a user interface tor yraphics applications in that area  list possible help facilines that can be provided in a user interface and discuss which types of help would be appropriate for different levels ef users  summarize the possible ways of handling backup and errors state which approaches are more suitable foy the beginner and which are better suited to the experienced user  list the possible iormats for presenting menus to a user ard explain under whal cir  cumstances each might be appropriate   discuss alternatives or feedback in terms of the various jevels of users  list the functions that must be performed by a window manager in handling screen layouts with multiple ovedapping windows  10  11  12   21  22  23  24 25 26 27  set up a design ior a window manager package  mesign a user interface for a painting program  design a user interface for a two level hierarchical modeling package  for any area with which you are familiar design ac umplete user interface to a graph ics package providing capabilities to any users in that area  develop a program that allows objects to be positioned on the screen using a locator device an object menu of geometric shapes is be presented to a user who is to se lect an object and a placement position the program should allow any number of ob jects to be positioned until a terminate signal ts given extend the program of the previous exercise so that selected objects can be scaled and rotated before positioning the transformation chcices and transformation parameters are to be presented to the user as menu options  write a program that allows a user to interactively sketch pictures using a stroke de vice   discuss the methods that could be employed in a pattern recognition procedure to match input characters against a stored library of shapes  write a routine that displays a linear scale and a slider on the screen and allows nu  meric values to be selected by positioning the slider along the scale line the number value selected is to be echoed in a box displayed near the linear scale   write a routine that displays a circular scale and pointer or a slider that can be moved around the circle to select angles in degrees  the angular value selected is ta be echoed in a box displayed near the circular scale  write a drawing program that allows users to create a picture as a set of line segments drawn between specified endpoints the coordinates of the individual line segments are to be selected with a locator device  write a drawing package that allows pictures to be created with straight line segments drawn between specified endpoints set up a gravity field around each line in a pic lure as an aid in connecting new lines to existing lines   modify the drawing package in the previous exercise that allows lines to be con  strained horizontally or vertically   develop a drawing package that can display an optional grid pattern so that selected screen positions are rounded to grid intersections the package is to provide line drawing capabilities with line endpoinis selected with a locator device   write a routine that allows a designer to create a picture by sketching straight lines with a rubber band method  write a drawing package that allows straight lines rectangles and circles to be con structed with rubber band methods  write a program that allows a user to design a picture from a menu of basic shapes by dragging each selected shape into position with a pick device  design an implementation of the input functions for request mode design an implementation of the sample mode input functions design an implementation of the input functions for event mode  set up a general implementation of the input functions for request sample and event modes  fxercises chapter  three dimensional concepts    ade  w hen we model and display a three dimensional scene there are many more considerations we must take into account besides just including coordinate values for the third dimension object boundaries can be constructed with various combinations of plane and curved surfaces and we sometimes need to specify information about object interiors graphics packages often provide routines for displaying internal components or cross sectional views of solid ob jects also some geometric transformations are more involved in three dimen sional space than in two dimensions for example we can rotate an object about an axis with any spatial orientation in three dimensional space two dimensional rotations on the other hand are always around an axis that is perpendicular to the xy plane viewing transformations in three dimensions are much more com plicated because we have many more parameters to select when specifying how a three dimensional scene is to be mapped to a display device the scene descrip tion must be processed through viewing coordinate transformations and projec tion routines that transform three diniensional viewing coordinates onto two di mensional device coordinates visible parts of a scene for a selected view must be identified and surface rendering algorithms must be applied if a realistic ren dering of the scene is required   to obtain a display of a three dimensional scene that has been modeled in world coordinates we must first set up a coordinate reference for the camera  this co ordinate reference defines the position and orientation for the plane of the cam era film   which is the plane we want to use to display a view of the ob jects in the scene object descriptions are then transferred to the camera reference coordinates and projected onto the selected display plane we can then display as aan display tt prone fogure dd ps coordinate reference for obta ning  particular view ofa _   three dimensional scene   the objects in wireframe outline form as in  or we can apply lighting and surface rendering techniques to shade the visible surfaces  parallel projection one method for generating a view of a solid object is to project points on the ob ject surface along parallel lines onto the display plane by selecting different viewing positions we can project visible points on the object onto the display plane to obtain different two dimensional views of the object as in  in a parallel projection parallel lines in the world coordinate scene project into parallel lines on the two dimensional display plane this technique is used in engineer ing and architectural drawings to represent an object with a set of views that maintain relative proportions of the object the appearance of the solid object can then be reconstructured from the major views    wireframe display of three objects with back lines removed from a commercial database of object shapes each object in the database is defined as a grid of coordinate points which can then be viewed in wireframe form or in a surface rendered form  courtesy of viewpoint  datalabs  tc top side frant  three parallel projection views of an object showing relative proportions from different viewing positions perspective projection another method for generating a view of a three dimensional scene is to project points to the display plane along converging paths this causes objects farther from the viewing position to be displayed smaller than objects of the same size that are nearer to the viewing position in a perspective projection parallel lines in a scene that are not parallel to the display plane are projected into converging lines scenes displayed using perspective projections appear more realistic since this is the way that our eyes and a camera lens form images in the perspective projection view shown in  parallel lines appear to converge to a distant point in the background and distant objects appear smaller than objects closer to the viewing position  depth cueing with few exceptions depth information is important so that we can easily iden tify for a particular viewing direction which is the front and which is the back of displayed objects  illustrates the ambiguity that can result when a wireframe object is displayed without depth information there are several ways in which we can include depth information in the two dimensional representa tion of solid objects  a simple method for indicating depth with wireframe displays is to vary the intensity of objects according to their distance from the viewing position fig ure shows a wireframe object displayed with depth cueing the lines closest to section three dimensional display methods   a perspective projection view of an airport scene  courtesy of evans  sutherland   a  b   the wireframe representation of the pyramid in a contains no depth information to indicate whether the viewing direction is b downward from a position above the apex or c upward from a position below the base    a wireframe object displayed with depth cueing so that the intensity of lines decreases from the front to the back of the object  the viewing position are displayed with the highest intensities and lines farther away are displayed with decreasing intensities depth cueing is applied by choosing maximum and minimum intensity or color values and a range of dis tances over which the intensities are to vary  another application of depth cueing is modeling the effect of the atmos phere on the perceived intensity of objects more distant objects appear dimmer to us than nearer objects due to light scattering by dust particles haze and smoke some atmospheric effects can change the perceived color of an object and we can model these effects with depth cueing  visible line and surface identification we can also clarify depth relationships in a wireframe display by identifying visi ble lines in some way the simplest method is to highlight the visible lines or to display them in a different color another technique commonly used for engi neering drawings is to display the nonvisible lines as dashed lines another ap proach is to simply remove the nonvisible lines as in figs b and c  but removing the hidden lines also removes information about the shape of the back surfaces of an object these visible line methods also identify the visible surfaces of objects  when objects are to be displayed with color or shaded surfaces we apply surface rendering procedures to the visible surfaces so that the hidden surfaces are obscured some visible surface algorithms establish visibility pixel by pixel across the viewing plane other algorithms determine visibility for object surfaces as a whole  surface rendering added realism is attained in displays by setting the surface intensity of objects according to the lighting conditions in the scene and according to assigned sur face characteristics lighting specifications include the intensity and positions of light sources and the general background illumination required for a scene sur face properties of objects include degree of transparency and how rough or smooth the surfaces are to be procedures can then be applied to generate the cor rect itumination and shadow regions for the scene in  surface rendering methods are combined with perspective and visible surface identification to gen erate a degree of realism in a displayed scene  exploded and cutaway views many graphics packages allow objects to be defined as hierarchical structures so that internal details can be stored exploded and cutaway views of such objects can then be used to show the internal structure and relationship of the object parts  shows several kinds of exploded displays for a mechanical de sign an alternative to exploding an object into its component parts is the cut away view   which removes part of the visible surfaces to show internal structure  three dimensional and stereascepic views another method for adding a sense of realism to a computer generated scene is to display objects using either three dimensional or stereoscopic views as we have seen in chapter three dimensional views can be obtained by reflecting a section three dimensional display methods   _a realistic room display achieved with stochastic ray tracing methods that apply a perspective projection surface texture mapping and illumination models  courtesy of john snyder jed lengyel devendra kalra and a barr california institute of technology copyright  caltech    a fully rendered and assembled turbine display a can also be viewed as b an exploded wireframe display  c a surface rendered exploded display or d a surface rendered color coded exploded display  courtesy of autodesk inc  raster image from a vibrating flexible mirror the vibrations of the mirror are syn chronized with the display of the scene on the crt as the mirror vibrates the focal length varies so that each point in the scene is projected to a position corre sponding to its depth  stereoscopic devices present two views of a scene one for the left eye and the other for the right eye the two views are generated by selecting viewing po sitions that correspond to the two eye positions of a single viewer these two views then can be displayed on alternate refresh cycles of a raster monitor and viewed through glasses that alternately darken first one lens then the other in synchronization with the monitor refresh cycles  chapter three dimensional concepts    color coded cutaway view of a lawn mower engine showing the structure and relationship of internal components  courtesy of autodesk inc   design of three dimensional packages requires some considerations that are not necessary with two dimensional packages a significant difference between the two packages is that a three dimensional package must include methods for mapping scene descriptions onto a flat viewing surface we need to consider im plementation procedures for selecting different views and for using different pro jection techniques we also need to consider how surfaces of solid objects are to be modeled how visible surfaces can be identified how transformations of ob jects are performed in space and how to describe the additional spatial proper ties introduced by three dimensions later chapters explore each of these consid erations in detail  other considerations for three dimensional packages are straightforward extensions from two dimensional methods world coordinate descriptions are extended to three dimensions and users are provided with output and input rou tines accessed with specifications such as polyline3 n wepoints  fillarea3 n wcpoints  text3 wepoint string  getlocator3 wcpoint translate3 translatevector matrixtranslate  where points and vectors are specified with three components and transforma tion matrices have four rows and four columns  two dimensional attribute functions that are independent of geometric con siderations can be applied in both two dimensional and three dimensional appli cations no new attribute functions need be defined for colors line styles marker modeling coordinates world coordinates projection coordinates   pipeline for transforming a view of a world coordinate scene to device coordinates  attributes or text fonts attribute procedures for orienting character strings how ever need to be extended to accommodate arbitrary spatial orientations text at tribute routines associated with the up vector require expansion to include z co ordinate data so that strings can be given any spatial orientation area filling routines such as those for positioning the pattern reference point and for map ping patterns onto a fill area need to be expanded to accommodate various ori entations of the fill area plane and the pattern plane also most of the two di mensional structure operations discussed in earlier chapters can be carried over to a three dimensional package   shows the general stages in a three dimensional transformation pipeline for displaying a world coordinate scene after object definitions have been converted to viewing coordinates and projected to the display plane scan conversion algorithms are applied to store the raster image  device coordinates chapter  three dimensional object representations      raphics scenes can contain many different kinds of objects trees flowers  clouds rocks water bricks wood paneling rubber paper marble steel glass plastic and cloth just to mention a few so itis probably not too surprising that there is no one method that we can use to describe objects that will include all characteristics of these different materials and to produce realistic displays of scenes we need to use representations that accurately model object characteris tics  polygon and quadric surfaces provide precise descriptions for simple eu clidean objects such as polyhedrons and ellipsoids spline surfaces and construc tion techniques are useful for designing aircraft wings gears and other engineer ing structures with curved surfaces procedural methods such as fractal constructions and particle systems allow us to give accurate representations for clouds clumps of grass and other natural objects physically based modeling methods using systems of interacting forces can be used to describe the nonrigid behavior of a piece of cloth or a glob of jello octree encodings are used to repre sent internal features of objects such as those obtained from medical ct images and isosurface displays volume renderings and other visualization techniques are applied to three dimensional discrete data sets to obtain visual representa tions of the data  representation schemes for solid objects are often divided into two broad categories although not all representations fall neatly into one or the other of these two categories boundary representations b reps describe a three dimen sional object as a set of surfaces that separate the object interior from the environ ment typical examples of boundary representations are polygon facets and spline patches space partitioning representations are used to describe interior properties by partitioning the spatial region containing an object into a set of small nonoverlapping contiguous solids usually cubes  a common space par titioning description for a three dimensional object is an octree representation in this chapter we consider the features of the various representation schemes and how they are used in applications   the most commonly used boundary representation for a three dimensional graphics object is a set of surface polygons that enclose the object interior many graphics systems store all object descriptions as sets of surface polygons this simplifies and speeds up the surface rendering and display of objects since all surfaces are described with linear equations for this reason polygon descrip     wireframe representation of a cylinder with back hidden lines removed  tions are often referred to as standard graphics objects  in some cases a polyg onal representation is the only one available but many packages allow objects to be described with other schemes such as spline surfaces that are then converted to polygonal representations for processing  a polygon representation for a polyhedron precisely defines the surface fea tures of the object but for other objects surfaces are tesselated or tiled to produce the polygon mesh approximation in  the surface of a cylinder is repre sented as a polygon mesh such representations are common in design and solid modeling applications since the wireframe outline can be displayed quickly to give a general indication of the surface structure realistic renderings are pro duced by interpolating shading patterns across the polygon surfaces to eliminate or reduce the presence of polygon edge boundaries and the polygon mesh ap proximation to a curved surface can be improved by dividing the surface into smaller polygon facets  polygon tables we specify a polygon surtace with a set of vertex coordinates and associated at tribute parameters as information for each polygon is input the data are placed into tables that are to be used in the subsequent processing display and manipu lation of the objects in a scene polygon data tables can be organized into two groups geometric tables and attribute tables geometric data tables contain ver tex coordinates and parameters to identify the spatial orientation of the polygon surfaces attribute information for an object includes parameters specifying the deyree of transparency of the object and its surface reflectivity and texture char acteristics  a convenient organization for storing geometric data is to create three lists a vertex table an edge table and a polygon table coordinate values for each ver tex in the object are stored in the vertex table the edge table contains pointers back into the vertex table to identify the vertices for each polygon edge and the polygon table contains pointers back into the edge table to identify the edges for each polygon this scheme is illustrated in  for two adjacent polygons on an object surface in addition individual objects and their component polygon faces can be assigned object and facet identifiers for easy reference  listing the geometric data in three tables as in  provides a conve nient reference to the individual components vertices edges and polygons of each object also the object can be displayed efficiently by using data from the edge table to draw the component lines an alternative arrangement is to use just two tables a vertex table and a polygon table but this scheme is less convenient and some edges could get drawn twice another possibility is to use only a poly gon table but this duplicates coordinate information since explicit coordinate values are listed for each vertex in each polygon also edge information would have to be reconstructed from the vertex listings in the polygon table  we can add extra information to the data tables ot  for faster infor mation extraction for instance we could expand the edge table to include for ward pointers into the polygon table so that common edges between polygons could be identified more rapidly   this is particularly useful for the ren dering procedures that must vary surface shading smoothly across the edges from one polygon to the next similarly the vertex table could be expanded so that vertices are cross referenced to corresponding edges  additional geometric information that is usually stored in the data tables includes the slope for each edge and the coordinate extents for each polygon as vertices are input we can calculate edge slopes and we can scan the coordinate     i e     vv p vy   vv my vertex table edge table polygon surface ver xe ey ey vy sy    ey vai xge vas 2a ey va v4 s  ey  8s ey vai xy  as ey v3 vy val nye var ze ey va vy vas ee vor ey va vs eg vue vy     geometric data table representation for two adjacent polygon surfaces formed with six edges and five vertices  values to identify the minimum and maximum x y and z values for individual polygons edge slopes and bounding box information for the polygons are needed in subsequent processing for example surface rendering coordinate ex tents are also used in some visible surface determination algorithms  since the geometric data tables may contain extensive listings of vertices and edges for complex objects it is important that the data be checked for consis tency and completeness when vertex edge and polygon definitions are speci fied it is possible particularly in interactive applications that certain input er rors could be made that would distort the display of the object the more information included in the data tables the easier it is to check for errors there fore error checking is easier when three data tables vertex edge and polygon are used since this scheme provides the most information some of the tests that could be performed by a graphics package are  that every vertex is listed as an endpoint for at least two edges  that every edge is part of at least one polygon  that every polygon is closed  that each polygon has at least one shared edge and  that if the edge table contains pointers to polygons every edge ref erenced by a polygon pointer has a reciprocal pointer back to the polygon  plane equations to produce a display of a three dimensional object we must process the input data representation for the object through several procedures these processing steps include transformation of the modeling and world coordinate descriptions to viewing coordinates then to device coordinates identification of visible sur faces and the application of surface rendering procedures for some of these processes we need information about the spatial orientation of the individual section polygon surfaces   ey vi ve sy ey vy vy sy e53 va vy sy se ey va vu s ey vys vee eg vs vy sz  edge table for the surfaces of  expanded to include pointers to the polygon table  chapter three mensional object representations  figitre the vector n normal to the surtace of a plane described by the equation ax  by  cz  d  has cartesian components g4 b cy  surface components ot the object this information 1s obtained from the vertex coordinate values and tne equations that describe the polygon planes the equation for a plane surface can be expressed in the form ay  by  cz d wie ly where   y  iy any point on the plane and the coetficients a b c and d are constants describing the spatial properties of the plane we can obtain the values of a b c and d by solving a set of three plane equations using the coordinate values for three noncollinear points in the plane for this purpose we can select three successive polygon vertices  xy  y    yo  and xs y3  and solve the following set of simultaneous linear plane equations for the ratios a d b d and c d  a d x   b dyy   c d z   k  uo the solution for this set of equations can be obtained in determinant form using cramer s rule as  an x a we b x  ys x3 i  regdest a how cz fy y d   ws   s v expanding the determinants we can write the calculations for the plane coeffi cients in the form am yey   yolea   yale  za b    29lx  xy  2x xe  lytdeg co xy yn  yay  x2 ya  wy  xag  yo  dis  xyqysts  yeo  x32  wizs  eslyze  as vertex values and other information are entered inte the polygon data struc ture values for a b c and d are computed for each polygon and stored with the other polygon data orientation of a plane surface in space can be described with the normal vector to the plane as shown in  this surface normal vector has carte sian components a b c  where parameters a b and c are the plane coeffi cients calculated in eqs  since we are usuaily dealing with polygon surfaces thal enclose an object interior we need o distinguish between the two sides of the surface the side of the plane that faces the object interior is called the inside face and the visible or outward side ts the outside face if polygon vertices are specified in a coun terclockwise direction when viewing the outer side of the plane in a right handed coordinate system the direction of the normal vecter will be from inside to out side this ts demonstrated for one plane of a unit cube in  to determine the components of the normal vector for the shaded surface shown in  we select three of the four vertices along the boundary of the polygon these points are selected in a counterclockwise direction as we view from outside the cube toward the origin coordinates for these vertices in the order selected can be used in eqs to obtain the plane coefficients a  b c d   thus the normal vector for this plane is in the direction of the positive x axis  the elements of the plane normal can also be obtained using a vector cross product calculation we again select three vertex positions v  vz and v3 taken in counterclockwise order when viewing the surface from outside to inside in a right handed cartesian system forming two vectors one from v to v and the other from v to v3 we calculate n as the vector cross product  n  v2  v   v5  vy   this generates values for the plane parameters a b and c we can then obtain the value for parameter d by substituting these values and the coordinates for one of the polygon vertices in plane equation and solving for d the plane equation can be expressed in vector form using the normal n and the position p of any point in the plane as n p d  plane equations are used also to identify the position of spatial points rela tive to the plane surfaces of an object for any point x y z not on a plane with parameters a b c d we have ax by cz d we can identify the point as either inside or outside the plane surface according to the sign negative or positive of ax  by  cz  d  if ax  by  cz  d  the point x y z is inside the surface if ax  by  cz  d  the point x y z is outside the surface these inequality tests are valid in a right handed cartesian system provided the plane parameters a b c and d were calculated using vertices selected in a counterclockwise order when viewing the surface in an outside to inside direc tion for example in  any point outside the shaded plane satisfies the in equality x   while any point inside the plane has an x coordinate value less than  polygon meshes some graphics packages for example phigs provide several polygon functions for modeling objects a single plane surface can be specified with a function such as illarea but when object surfaces are to be tiled it is more convenient to specify the surface facets with a mesh function one type of polygon mesh is the triangle strip this function produces m  connected triangles as shown in fig  given the coordinates for n vertices another similar function is the quadri lateral mesh which generates a mesh of n  by mn  quadrilaterals given   the shaded polygon surface of the unit cube has plane equation x  o and normal vector n     s    a triangle strip formed w triangles connecting vertices  ith ae   ay   a quadrilateral mesh containing quadrilaterals constructed from a by input vertex array  the coordinates for an n by m array of vertices  shows vertices forming a mesh of quadrilaterals  when polygons are specified with more than three vertices it is possible that the vertices may not all lie in one plane this can be due to numerical errors or errors in selecting coordinate positions for the vertices one way to handle this situation is simply to divide the polygons into triangles another approach that is sometimes taken is to approximate the plane parameters a b and c we can do this with averaging methods or we can project the polygon onto the coordinate planes using the projection method we take a proportional to the area of the polygon projection on the yz plane b proportional to the projection area on the xz plane and c proportional to the projection area on the xy plane  high quality graphics systems typically model objects with polygon meshes and set up a database of geometric and attribute information to facilitate processing of the polygon facets fast hardware implemented polygon renderers are incorporated into such systems with the capability for displaying hundreds of thousands to one million or more shaded polygons per second usually trian gles  including the application of surface texture and special lighting effects  displays of three dimensional curved lines and surfaces can be generated from an input set of mathematical functions defining the objects or from a set of user specified data points when functions are specified a package can project the defining equations for a curve to the display plane and plot pixel positions along the path of the projected function for surfaces a functional description is often tesselated to produce a polygon mesh approximation to the surface usually this is done with triangular polygon patches to ensure that all vertices of any polygon are in one plane polygons specified with four or more vertices may not have all vertices in a single plane examples of display surfaces generated from functional descriptions include the quadrics and the superquadrics  when a set of discrete coordinate points is used to specify an object shape a functional description is obtained that best fits the designated points according to the constraints of the application spline representations are examples of this class of curves and surfaces these methods are commonly used to design new object shapes to digitize drawings and to describe animation paths curve fit ting methods are also used to display graphs of data values by fitting specified curve functions to the discrete data set using regression techniques such as the least squares method  curve and surface equations can be expressed in either a parametric or a nonparametric form appendix a gives a summary and comparison of paramet ric and nonparametric equations for computer graphics applications parametric representations are generally more convenient  a frequently used class of objects are the quadric surfaces which are described with second degree equations quadratics  they include spheres ellipsoids tori paraboloids and hyperboloids quadric surfaces particularly spheres and ellip soids are common elements of graphics scenes and they are often available in graphics packages as primitives from which more complex objects can be con structed  sphere in cartesian coordinates a spherical surface with radius r centered on the coordi nate origin is defined as the set of points x y z that satisfy the equation tyra  we can also describe the spherical surface in parametric form using latitude and longitude angles    x rcos cos  a 2s os y rcos sin  ms sn  z rsing the parametric representation in eqs provides a symmetric range for the angular parameters and  alternatively we could write the parametric equations using standard spherical coordinates where angle  is specified as the colatitude   then  is defined over the range    and  is often taken in the range    we could also set up the representation using pa rameters u and v defined over the range from to by substituting   au and  2a  ellipsoid an ellipsoidal surface can be described as an extension of a spherical surface where the radii in three mutually perpendicular directions can have different val ues   the cartesian representation for points over the surface of an el lipsoid centered on the origin is ve ur  d and a parametric representation for the ellipsoid in terms of the latitude angle  and the longitude angle  in  is   x r cos cos  m 2ehs w y r cosd sin  mws9sq7 10 z r sing torus a torus is a doughnut shaped object as shown in  it can be generated by rotating a circle or other conic about a specified axis the cartesian represen  section quadric surfaces axia psixy  v axis x axis   parametric coordinate position r   on the surface of a sphere with radius r  x axis   spherical coordinate parameters r    using colatitude for angle     an ellipsoid with radii r  and r centered on the coordinate origin  zaxis a xy z  i xy plane  a torus with a circular cross section x axis centered on the coordinate origin   tation for points over the surface of a torus can be written in the form z r       11 ry yr  vay where r is any given offset value parametric representations for a torus are simi lar to those for an ellipse except that angle  extends over  using latitude and longitude angles  and we can describe the torus surface as the set of points that satisfy x rr  cos d cos  rshen y r r  cos sin  ns sa7 12 z r sing  this class of objects is a generalization of the quadric representations super quadrics are formed by incorporating additional parameters into the quadric equations to provide increased flexibility for adjusting object shapes the number of additional parameters used is equal to the dimension of the object one para meter for curves and two parameters for surfaces  superellipse we obtain a cartesian representation for a superellipse from the corresponding equation for an ellipse by allowirg the exponent on the x and y terms to be vari able one way to do this is to write the cartesian superellipse equation in the form qs s    se  13 ty ty where parameter s can be assigned any real value when s  we get an ordi nary ellipse corresponding parametric equations for the superellipse of eq 13 can be expressed as x  r cos  ms0s7 74 y rysin   illustrates supercircle shapes that can be generated using various values for parameter s  superellipsoid a cartesian representation for a superellipsoid is obtained from the equation for an ellipsoid by incorporating two exponent parameters           se 15 ry ry n for s    we have an ordinary ellipsoid we can then write the corresponding parametric representation for the superellipsoid of eq 15 as x  r cos cos26  n 2sosn y  r cos  sin  a s0s7 16  r sin id  illustrates supersphere shapes that can be generated using various values for parameters s and s  these and other superquadric shapes can be com bined to create more complex structures such as furniture threaded bolts and other hardware   e    superellipses plotted with different values for parameter  and with r  section s5uperquadrics representations 88s   molecular bonding as two molecules move away from each other the surface shapes stretch snap and finally contract into spheres  a  c2  b  blobby muscle shapes in a human arm  oto7  od  bqo dd a ee    superellipsoids plotted with different values for parameters  and s  and with r  r  r   some objects do not maintain a fixed shape but change their surface characteris tics in certain motions or when in proximity to other objects examples in this class of objects include molecular structures water droplets and other liquid ef fects melting objects and muscle shapes in the human body these objects can be described as exhibiting blobbiness and are often simply referred to as blobby objects since their shapes show a certain degree of fluidity  a molecular shape for example can be described as spherical in isolation but this shape changes when the molecule approaches another molecule this distortion of the shape of the electron density cloud is due to the bonding that occurs between the two molecules  illustrates the stretching snap ping and contracting effects on molecular shapes when two molecules move apart these characteristics cannot be adequately described simply with spherical or elliptical shapes similarly  shows muscle shapes in a human arm which exhibit similar characteristics in this case we want to model surface shapes so that the total volume remains constant  several models have been developed for representing blobby objects as dis tribution functions over a region of space one way to do this is to model objecis as combinations of gaussian density functions or bumps    a sur face function is then defined as fix yz  x be f t 17 i where rj  vx    zt parameter t is some specified threshold and parame ters  and b are used to adjust the amount of blobbiness of the individual objects negative values for parameter b can be used to produce dents instead of bumps  illustrates the surface structure of a composite object modeled with four gaussian density functions at the threshold level numerical root finding techniques are used to locate the coordinate intersection values the cross sec tions of the individual objects are then modeled as circles or ellipses if two cross sections aie near to each other they are merged to form one blobby shape as in  whose structure depends on the separation of the two objects  other methods for generating blobby objects use density functions that fall off to in a finite interval rather than exponentially the metaball model de scribes composite objects as combinations of quadratic density functions of the form b1 3r   if0 r d fry  5o ridy  ifa rsd 18  ifr d and the soft object model uses the function 22r 4r   o s coif0 r d fir    9d  od  19  ifr d some design and painting packages now provide blobby function modeling for handling applications that cannot be adequately modeled with polygon or spline functions alone  shows a user interface for a blobby object modeler using metaballs  in drafting terminology a spline is a flexible strip used to produce a smooth curve through a designated set of points several small weights are distributed along the length of the strip to hold it in position on the drafting table as the curve is drawn the term spline curve originally referred to a curve drawn in this manner we can mathematically describe such a curve with a piecewise cubic   a screen layout used in the blob modeler and the blob animator packages for modeling objects with metaballs  courtesy of thorson digital image   section spline representations a   a three dimensional gaussian bump centered at position with height b and standard deviation a    a composite blobby object formed with four gaussian bumps  chapter three dimensional object representations   a set of six contro points interpolated with piecewise continuous polynomial sections   a set of six control points approximated with piecewise continuous polynomial sections  polynomial function whose first and second derivatives are continuous across the various curve sections in computer graphics the term spline curve now refers to any composite curve farmed with polynomial sections satisfying speci fied continuity conditions at the boundary of the pieces a spline surface can be described with two sets of orthogonal spline curves there are several different kinds of spline specifications that are used in graphics applications each individ ual specification simply refers to a particular type of polynomial with certain specified boundary conditions  splines are used sn graphics applications to design curve acd surface shapes to digitize drawings for computer storage ard to specify animation paths for the objects or the camera in a scene typical cad applications for splines include the design of automobile bodies aircraft and spacecraft surfaces and ship hulls  interpolation and approximation splines we specify a spline curve by giving a set of coordinate positions called control points which indicates the general shape of the curve these control points are then fitted with piecewise continuous parametric polynomial functions in one of two ways when polynemual sections are fitted so that the curve passes through each control point as in  the resulting curve is said to interpolate the set of control points on the other hand when the polynomials are fitted to the general control point path without necessarily passing through any control point the resulting curve is said to approximate the set of control points    interpolation curves are commonly used to digitize drawings or to specify animation paths appreximation curves are primarily used as design tools to structure object surfaces  shows an approximation spline surface created for a design application straight lines connect the control point positions above the surface  a spline curve is defined modified and manipulated with operations on the control points by interactively selecting spatial positions for the control points a designer can set up an initial curve after the polynomial fit is displayed for a given set of control points the designer can then reposition some or all of the control points to restructure the shape of the curve in addition the curve can be translated rotated or scaled with transformations applied to the control points cad packages can also insert extra contro points to aid a designer in ad justing the curve shapes  the canvex polygon boundary that encloses a set of control points is called the convex hull one way to envision the shape of a convex hull is to imagine a rubber band stretched around the positions of the contro points so that each con trol point is either on the perimeter of the hull or inside it   convex hulls provide a measure for the deviation of a curve or surface from the region bounding the contro points some splines are bounded by the convex hull thus ensuring that the polynomials smoothly follow the control points without erratic oscillations also the polvgon region inside the convex hull is useful in some al gorithms asa clipping region  a polyline connecting the sequence of control points for an approximation spline is usually displaved to remind a designer of the control point ordering this set of connected line segments is often referred to as the control graph of the curve other names for the series of straight line sections connecting the control points in the order specified are control polygon and characteristic polygon fig ure 23 shows the shape of the control graph for the control point sequences in    an approximation spline surface for a cad application in automotive design surface contours are plotted with polynomial curve sections and the surface control points are connected with straight line segments  courtesy of evans  sutherland  parametric continuity conditions to ensure a smooth transition from one section of a piecewise parametric curve to the next we can impose various continuity conditions at the connection points if each section of a spline is described with a set of parametric coordinate functions of the form x  x u  y  yu  z u  w susu  20  pz   convex hull shapes dashed jines for two sets of control points section spline representations chapter thiee dumensional object representations fronre 24 piecewise construction of a curve by joining two curve segments using different orders of continuity  a zero  order continuily only  b first order continuity and   second order continuity  r g ws p rs a t      i  t  po  py    of p so b xn ae a  figure 23 control graph shapes dashed lines for two different sets of contro points  we set parametric continuity by matching the parametric derivatives of adjoin ing curve sections at their common boundary  zero order parametric continuity described as c continuity means simply that the curves meet that is the values of x y and z evaluated at uv for the first curve section are equal respectively to the values of x y and z evaluated at u for the next curve section first order parametric continuity referred to as c continuity means that the first parametric derivatives tangent lines of the coor dinate functions in eq 20 for two successive curve sections are equal at their joining point second order parametric continuity or c continuity means that both the first and second parametric derivatives of the two curve sections are the same at the intersection higher order parametric continuity conditions are de fined similarly  shows examples of cy c  and c continuity  with second order continuity the rates of change of the tangent vectors for connecting sections are equal at their intersection thus the tangent line transi tions smoothly from one section of the curve to the next fig  24 c  but with first order cor tinuity the rates of change of the tangent vectors for the two sec tiors can be quite different  b  so that the general shapes of the two adjacent sections can change abruptly first order continuity is often sufficient for digitizing drawings and some design applications while second order continuity is useful for setting up animation paths for camera motion and for many preci sion cad requirements a camera traveling along the curve path in  b with equal steps in parameter  would experience an abrupt change in accelera tion at the boundary of the two sections producing a discontinuity in the motion sequence but if the camera were traveling along the path in  c  the frame sequence for the motion would smoothly transition across the boundary  geometric continuity conditions an alternate method for joining two successive curve sections is to specify condi tions for geometric continuity  n this case we only require parametric deriva tives of the two sections te be proportional te each other at their common bound ary instead of equal to each other  zero order geometric continuity described as g continuity is the same as zero order parametric continuity that is the two curves sections must have the same coordinate position at the boundary point first order geometric continu ity or g continuity means that the parametric first derivatives are proportional at the intersection of two successive sections if we denote the parametric posi tion on the curve as p u  the direction of the tangent vector p u  but not neces sarily its magnitude will be the same for two successive curve sections at their joining point under g continuity second order geometric continuity or g con tinuity means that both the first and second parametric derivatives of the two curve sections are proportional at their boundary under g continuity curva tures of two curve sections will match at the joining position  a curve generated with geometric continuity conditions is similar to one generated with parametric continuity but with slight differences in curve shape  provides a comparison of geometric and parametric continuity with geometric continuity the curve is pulled toward the section with the greater tan gent vector  spline specifications there are three equivalent methods for specifying a particular spline representa tion  we can state the set of boundary conditions that are imposed on the spline or  we can state the matrix that characterizes the spline or  we can state the set of blending functions or basis functions that determine how spec ified geometric constraints on the curve are combined to calculate positions along the curve path  to illustrate these three equivalent specifications suppose we have the fol lowing parametric cubic polynomial representation for the x coordinate along the path of a spline section  xu  aw  bw  cu  dy osus  21  boundary conditions for this curve might be set for example on the endpoint co ordinates x and x and on the parametric first derivatives at the endpoints x  and   these four boundary conditions are sufficient to determine the values of the four coefficients a  b  c  and d  from the boundary conditions we can obtain the matrix that characterizes this spline curve by first rewriting eq 21 as the matrix product po a aa p po b  go cc ta  b   three control points fitted with two curve sections joined with  a parametric continuity and b geometric continuity where the tangent vector of curve c at point p has a greater magnitude than the tangent vector of curve c at p  section spline representations  chapter three dimensional object representations oe   x a   w3  22  ro of fr m4   u cc where u is the row matrix of powers of parameter u and c is the coefficient col umn matrix using eq 22 we can write the boundary conditions in matrix form and solve for the coefficient matrix c as c moypine  mgeom 23  where mygeom is a four element column matrix containing the geometric constraint values boundary conditions on the spline and mypine is the by matrix that transforms the geometric constraint values to the polynomial coefficients and provides a characterization for the spline curve matrix mgcom contains control point coordinate values and other geometric constraints that have been specified thus we can substitute the matrix representation for c into eq 22 to obtain x t  u mapiine  migeom 24  the matrix mypune characterizing a spline representation sometimes called the basis matrix is particularly useful for transforming from one spline representation to another  finally we can expand eq 24 to obtain a polynomial representation for coordinate x in terms of the geometric constraint parameters  aw    gy bf 23 k o where g are the constraint parameters such as the control point coordinates and slope of the curve at the control points and bf u are the polynomial blending functions in the following sections we discuss some commonly used splines and their matrix and blending function specifications  this class of splines is most often used to set up paths for object motions or to provide a representation for an existing object or drawing but interpolation splines are also used sometimes to design object shapes cubic polynomials offer a reasonable compromise between flexibility and speed of computation com pared to higher order polynomials cubic splines requ re less calculations and memory and they are more stable compared to lower order polynomials cubic splines are more flexible for modeling arbitrary curve shapes  given a set of control points cubic interpolation splines are obtained by fit ting the input points with a piecewise cubic polynomial curve that passes through every control point suppose we haven  contro points specified with coordinates pow oe ye ah k 02  a cubic interpolation fit of these points is illustrated in  we can de scribe the parametric cubic polynomial that is to be fitted between each pair of control points with the following set of equations  x u  aw  bu  cu  dy yu  aye  bye t ourd su  26  zlu  au  ba  cu  d  for each of these three equations we need to determine the values of the four co efficients b c and d in the polynomial representation for each of the curve sections between the n  control points we do this by setting enough bound ary conditions at the joints between curve sections so that we can obtain nu merical values for all the coefficients in the following sections we discuss com mon methods for setting the boundary conditions for cubic interpolation splines  natural cubic splines one of the first spline curves to be developed for graphics applications is the nat ural cubic spline this interpolation curve is a mathematical representation of the original drafting spline we formulate a natural cubic spline by requiring that two adjacent curve sections have the same first and second parametric deriva tives at their common boundary thus natural cubic splines have c continuity  if we have   control points to fit as in  then we have n curve sections with a total of polynomial coefficients to be determined at each of the n  interior control points we have four boundary conditions the two curve sections on either side of a control point must have the same first and sec ond parametric derivatives at that control point and each curve must pass through that control point this gives us 4n  equations to be satisfied by the 4n polynomial coefficients we get an additional equation from the first control point pp the position of the beginning of the curve and another condition from control point p  which must be the last point on the curve we still need two more conditions to be able to determine values for all coefficients one method for obtaining the two additional conditions is to set the second derivatives at pp and p  to another approach is to add two extra dummy control points one at each end of the original control point sequence that is we add a control point p  and a control point p   then all of the original control points are interior points and we have the necessary 4n boundary conditions  although natural cubic splines are a mathematical model for the drafting spline they have a major disadvantage if the position of any one control point is altered the entire curve is affected thus natural cubic splines allow for no local control  so that we cannot restructure part of the curve without specifying an entirely new set of control points    a piecewise continuous cubic spline interpolation of n  control points  section cubic spline interpolation methods chapter three dimensional object representations hermile interpolation a hermite spline named after the french mathematician charles hermite is an interpolating piecewise cubic polynomial with a specified tangent at cach control point unlike the natural cubic splines hermite splines can be adjusted locally because each curve section is only dependent on its endpoint constraints  if p u represents a parametric cubic point function for the curve section be tween control points py and p   a5 shown in  ther the boundary con ditions that define this hermite curve section are p o  py pod pay 27 po  dp  p t  dp  with dp and dp  specifying the values for the parametric derivatives slope of the curve at control points p and p  respectively  we can write the vector equivalent of eqs 26 for this hermite curve sec tion as poo  au  but  ecu d qfue1 28  where the x component of p is x u  a6  bu  cu  d  and similar y for the yand z components the matrix equivalent of eq 28 1s a  b  pu  fut wt dy   29 d and the derivative of the point function can be expressed as pra   2u q  30  aa oe substituting endpoint values and for parameter w into the previous two equa tions we can express the hermite boundary conditions 27 in the matrix form  pi 1 a  101 pro   b c30 dp c dpi  d pb ee we ee   ee plu  olu  youl  xn tal  gla yi 20a parametric point function p u for a bp hermite curve section between control points p and p  solving this equation for the polynomial coefficients we have px  part dp  dp  1 px   pao 0 dp  0 dpist ane ep wor oo w  32  pitt dp dpx  ih  where m  the hermite matrix is the inverse of the boundary constraint matrix equation 29 can thus be written in terms of the boundary conditions as px p u   we v2 uw my  pe  33 dp dp  finally we can determine expressions for the hermite blending functions by carrying out the matrix multiplications in eq 33 and collecting coefficients for the boundary constraints to obtain the polynomial form  pad  p28    py   3x7  dp    ue  dpy u   34  pou  pyr wi u  dp hu  dp hy  the polynomials h u for k   are referred to as blending functions be cause they blend the boundary constraint values endpoint coordinates and slopes to obtain each coordinate position along the curve  shows the shape of the four hermite blending functions  hermite polynomials can be useful for some digitizing applications where it may not he too difficult to specify or approximate the curve slopes but for most problems in computer graphics it is more useful to generate spline curves without requiring input values for curve slopes or other geometric information in addition to control point coordinates cardinal splines and kochanek bartels splines discussed in the following twa sections are variations on the hermite splines that do not require input values for the curve derivatives at the control points procedures for these splines compute parametric derivatives from the co ordinate positions of the control points  cardinal splines as with hermite splines cardinal splines are interpolating piecewise cubics with specified endpoint tangents at the boundary of each curve section the difference section cubic spline interpolation methods hla  4  h u   o e be e    hiya  4  h u  6 2 u eda a a out  d  the hermite blending functions   pee   parametric puint function p u  for a cardinal spline section between control points p and p    is that we do not have to give the values for the endpoint tangents for a cardinal spline the value for the slope at a control point is calculated from the coordinates of the two adjacent control points  a cardinal spline section is completely specified with four consecutive con tral points the middie two control points are the section endpoints and the other two points are used in the calculation of the endpoint slopes if we take p u as the representation for the parametric cubic point function for the curve section between contrel points p  and   as in  then the four control points from p _ to py  are used to set the boundary conditions for the cardinal spline section as p o  p  pias  35 po   depa  pe  pl    per  pod thus the slopes at control points p and p  are taken to be proportional respec  tively to the chords p  py  and py pxrz   parameter  is called the tension parameter since it controls how loosely or tightly the cardinal spline fits the input control points  illustrates the shape of a cardinal curve for very small and very large values of tension t when   this class of curves is referred to as catmull rom splines or overhauser splines  using methods similar to those for hermite splines we can convert the boundary conditions 35 into the matrix form p u   u2 ww me  pe 30  where the cardinal matrix is m   37  withs     expanding matrix equation 36 into polynomial form we have p u  py  su  28u su  pyl  su   s  u   proil s  u8 3b  2s u  sul pyaolsu  su  38  py 1car u  p car u  pyis car w  pyy2car u where the polynomials car u for k   are the cardinal blending func  tions  gives a plot of the basis functions for cardinal splines with   kochanek bartels splines these interpolating cubic polynomials are extensions of the cardinal splines two additional parameters are introduced into the constraint equations defining kochanek bartels splines to provide for further flexibility in adjusting the shape of curve sections  given four consecutive control points labeled p _1 pp pes1 and py we define the boundary conditions for a kochanek bartels curve section between p and px as p q  px pcd  piss po n   nig  ha  py  pr  349  b  cp ear  pd  pou   ug  ou  oper  pd    bml  ch pes  ped where t is the tension parameter b is the bias parameter and c is the continuity parameter in the kochanek bartels formulation parametric derivatives may not be continuous across section boundaries    tangent vectors at the endpoints of a cardinal spline section are proportional to the chords formed with neighboring control points dashed lines  ln aan  effect of the tension parameter on t t d the shape of a cardinal spline looser curve  tighter curve  _ section  tension parameter t has the same interpretation as in the cardinal spline formulation that is it controls the looseness or tightness of the curve sections bias b is used to adjust the amount that the curve bends at each end of a section so that curve sections can be skewed toward one end or the other   pa rameter  controls the continuity of the tangent vector across the boundaries of sections if c is assigned a nonzero value there is a discontinuity in the slope of the curve across section boundaries  kochanek bartel splines were designed to model animation paths in par ticular abrupt changes in motion of a object can be simulated with nonzero val ues for parameter c  carglu car u    4 st ee te ttt uv  4 1  ah b carau carsu 0 poi ditsirtiri liriitiiiit y uv 0 0  te id    the cardinal blending functions for t  oand s  p p2 yn  po wd py po ps po p oe po b o o b   effect of the bias parameter on the shape of a kochanek bartels spline section  this spline approximation method was developed by the french engineer pierre b zier for use in the design of renault automobile bodies b zier splines have a number of properties that make them highly useful and convenient for curve and surface design they are also easy to implement for these reasons b zier splines are widely available in various cad systems in general graphics packages such as gl on silicon graphics systems  and in assorted drawing and painting pack ages such as aldus superpaint and cricket draw  b zier curves in general a b zier curve section can be fitted to any number of control points the number of control points to be approximated and their relative position de termine the degree of the b zier polynomial as with the interpolation splines a b zier curve can be specified with boundary conditions with a characterizing matrix or with blending functions for general b zier curves the blending func tion specification is the most convenient  suppose we are given n  control point positions py    yy   with k varying from to these coordinate points can be blended to produce the fol lowing position vector p u  which describes the path of an approximating b zier polynomial function between p and p   pu  sp bez  uw  ofu 40 k  the b zier blending functions bez  u are the bernstein polynomials bez  u  cin ku  wet 41 where the c n k are the binomial coefficients  n  kg _ 42  c n k   equivalently we can define b zier blending functions with the recursive calcula tion bez  u    u bez    u  ubez _    a  h k 43  section b zier curves and surfaces chapler with bez   w  and bf z    wk vector equation 40 represents a set of three oimensional object three parametric equations for the individual curve coordinates representations  x    x bez  u  k yu  y bez  u  44 k u   z bez au k asa rule a b zier curve is a polynomial of degree cne less than the number of control points used three points generate a parabola four points a cubic curve and so forth  demonstrates the appearance of some bezier curves for various selections of control points in the xy plane z   with certain control point placements however we obtain degenerate b zier polynomials for example a b zier curve generated with three collinear contro points is a straight line segment and a set of control points that are all at the same coordi nate position produces a b zier curve that is a single point  b zier curves are commonly found in painting and drawing packages as well as cad systems since they are easy to implement and they are reasonably powerful in curve design efficient methods for determining coordinate positions along a b zier curve can be set up using recursive calculations for example suc cessive binomial coefficients can be calculated as   examples of two dimensional b zier curves generated trom three four  and five control points dashed lines connect the control point positions  k ci k a la k 45  for n  k the following example program illustrates a method for generating b zier curves  include math h  include graphics h  void computecoefficients int n int  c   int k i  for k ks n k     compute n  k i n k    e k   for isn c k   for i n k e k   i  i k l a   i  i     void computepoint    float u wopt3  pt int ncontrols wept  controls int    int k n  nfontrols   float blend i pt x  pt y  pt z2    add in influence of each control point  for k o k ncontrols k    blend  c k  powf u k  powf l u n k   pt x  controls k x  blend  pt y  controls k y  blend   controls k z  blend   pt z void bezier wept3  controls int ncontrols int m wept3  curve    allocate space for the coefficients  int    int  malloc ncontrols  sizeof int  int i computecoefficients ncontrols c  for  is m i  i computepoint i  float m  curveli  ncontrols controls c    free c   properties of b zier curves a very useful property of a b zier curve is that it always passes through the first and last contro points that is the boundary conditions at the two ends of the curve are p o  po  46 p t  p  section b zier curves and surfaces chapter  three dimensional ohyect representations p3 lf v4          on  poe i     l     pe o oe p bo px pp piguere e0 a closed bezier curve generated by specifying the first and last control points at the same location p b p  pe pe figtay 36 a bezier curse can be made to pass closer loa given coordinate pusition by assigning muluple control points to that positian  values of the parametric first derivatives of a b zier curve at the endpoints can be calculated from control point coordinates as p   np t poume 47 p   np   ap  thus the slope at the beginning of the curve is along the hne joining the first two control points and the slope at the end of the curve is along the line joining the last two endpoints similarly the parametric second derivatives of a b zier curve at the endpoints are calculated as p 0o  nt  dips  pd  pi  pol  45 p c1  gr  dip  poe  ae d pw  another important property of any b zier curve is that it lies within the convex hull convex polygon boundary of the control points this follows from the properties of b zier blending functions they are all positive and their sum is always  nbez  ub  49   kat so that any curve position is simply the weighted sum of the control point posi tions the convex hull property for a b zier curve ensures that the polynomial smoothly follows the control points without erratic oscillations  design techniques using bezier curves closed b zier curves are penerated by specifving the first and last control paints at the same position as in the example shown in  also specifying mul tiple control points at a single coordinate position gives more weight to that posi tion in  a single coordinate position is input as two centro points and the resulting curve is pulled nearer to this position  we can fit a b zier curve to any number of control points but this requires the calculation of polynonial functions of higher degree when complicated curves are to be generated they can be formed by piecing several b zier sections of lower degree together piecing together smaller sections also gives us better control over the shape of the curve in small regions since bezier curves pass through endpoints it 1s easy to match curve sections zero order continuity  alsu b zier curves have the invportant property that the tangent to the curve at an endpoint 1s along the line joining that endpoint to the adjacent control point therefore to obtain first order continuity between curve sections we can pick control points p  and p of a new section to be along the same straight line as control points p  and p of the previous section   when the two curve sections have the same number of contre points we obtain c continuity by choosing the first cantrol point of the new section as the last control point of the previous section and by positioning the second control point of the new sec tion at position pot py pe   piecewise approximation curve formed with two b zier sections zero order and first order continuity are attained between curve sections by setting po  p and by making points p  p  and p collinear  thus the three control points are collinear and equally spaced  we obtain c continuity between two b zier sections by calculating the po sition of the third control point of a new section in terms of the positions of the last three control points of the previous section as pn  pa  pra  requiring second order continuity of b zier curve sections can be unnecessarily restrictive this is especially true with cubic curves which have only four control points per section in this case second order continuity fixes the position of the first three control points and leaves us only one point that we can use to adjust the shape of the curve segment  cubic b zier curves many graphics packages provide only cubic spline functions this gives reason able design flexibility while avoiding the increased calculations needed with higher order polynomials cubic b zier curves are generated with four control points the four blending functions for cubic b zier curves obtained by substi tuting  into eq 41 are bezo u    wu  bez u  3u  wu  bez  u  3w1  w  bez  u   50  plots of the four cubic b zier blending functions are given in  the form of the blending functions determine how the control points influence the shape of the curve for values of parameter u over the range from to at u   section b zier curves and surfaces bez iu ie  bez ur   le q popuidrrrit l poi y 0 08 a bez u bez 6 o2t tot u 0 66   the four b zier blending functions for cubic curves     the only nonzero blending function is bez  which has the value atu  the only nonzero function is bez   with a value of j at that point thus the cubic b zier curve will always pass through control points p and p  the other func tions bez  and bez  influence the shape of the curve at intermediate values of parameter u so that the resulting curve tends toward points p and py  blend ing function bez  is maximum at wv  and bez  is maximum at    we note in  that each of the four blending functions is nonzero over the entire range of parameter u thus b zier curves do not allow for local control of the curve shape if we decide to reposition any one of the control points the entire curve will be affected  at the end positions of the cubic b zier curve the parametric first deriva tives slopes are po  sp  pod pc  p ps and the parametne second derivatives are p   p  2p  py  p   p 2p  pd we can use these expressions for the parametric derivatives te construct piece wise curves with c or c continuity between sections by expanding the polynomial expressions for the blending functions we section can write the cubic b zier point function in the matrix form be zier curves and surfaces po pi  plu  fe uw moe  p  51 p3 where the b zier matrix is   m3  52 me  30 co esa 0 we could also introduce additional parameters to allow adjustment of curve tension and bias  as we did with the interpolating splines but the more use ful b splines as well as splines provide this capability  bezier surfaces two sets of orthogonal b zier curves can be used to design an object surface by specifying by an input mesh of control points the parametric vector function for the b zier surface is formed as the cartesian product of b zier blending func tions  plu v sd py bez   bez  uy  53 pa0k with p  specifying the location of the gm  by n  control points   illustrates two b zier surface plots the control points are con nected by dashed lines and the solid lines show curves of constant u and con stant v each curve of constant u is plotted by varying v over the interval from to with u fixed at one of the values in this unit interval curves of constant v are plotted similarly       ae z  oe f v  t a  prs t   ps ft  y     o _s nno siz xn wie b  b zier surfaces constructed for a m    and b m    dashed lines connect the contro points chapter three dimensional object representations  boundary line   a composite b zier surface constructed with two b zier sections joined at the indicated boundary line the dashed lines connect specified control points first order continuity is established by making the ratio of length l to length l constant for each collinear line of control points across the boundary between the surface sections  b zier surfaces have the same properties as b zier curves and they provide a convenient method for interactive design applications for each surface patch we can select a mesh of control points in the xy ground plane then we choose elevations above the ground plane for the z coordinate values of the control points patches can then be pieced together using the boundary constraints   illustrates a surface formed with two b zier sections as with curves a smooth transition from one section to the other is assured by establish ing both zero order and first order continuity at the boundary line zero order continuity is obtained by matching control points at the boundary first order continuity is obtained by choosing control points along a straight jine across the boundary and by maintaining a constant ratio of col inear line segments for each set of specified contro points across section boundar cs  these are the most widely used class of approximating splines b splines have two advantages over b zier splines  the degree cf a b spline polynomial can be set independently of the number of control points with certain limitations  and  b splines allow local control over the shape of a spline curve or surface the trade off is that b splines are more complex than b zier splines b spline curves we can write a general expression for the calculation of coordinate positions along a b spline curve in a blending function formulation as plu    pp by uymin sus mg   2d eh d 54 k where the p are an input set of n  control points there are several differences between this b spline formulation and that for b zier splines the range of para meter u now depends on how we choose the b spline parameters and the b spline blending functions b  are polynomials of degree d  where parameter d can be chosen to be any integer value in the range from up to the number of control points   actually we can also set the value of d at but then our curve is just a point plot of the control points  local control for b splines is achieved by defining the blending functions over subintervals of the total range of u  blending functions for b spline curves are defined by the cox deboor re cursion formulas  ifuysu ua b  a   a otherwise  55 u u upeg bu   __t_ by g lu  sv bysia  uged   ux ugrg  heat where each blending function is defined over d subintervals of the total range of u the selected set of subinterval endpoints u is referred to as a knot vector we can choose any values for the subinterval endpoints satisfying the relation u  wy4  values for uy and ua then depend on the number of control points we select the value we choose for parameter d and how we set up the subinter vals knot vector  since it is possible to choose the elements of the knot vector so that the denominators in the previous calculations can have a value of this for mulation assumes that any terms evaluated as are to be assigned the value   demonstrates the local control characteristics of b splines in addition to jocal control b splines allow us to vary the number of control points used to design a curve without changing the degree of the polynomial also any number of control points can be added or modified to manipulate curve shapes similarly we can increase the number of values in the knot vector to aid in curve design when we do this however we also need to add control points since the size of the knot vector depends on parameter  b spline curves have the following properties   the polynomial curve has degree d  and c  continuity over the range of u   for  control points the curve is described with n  blending func tions  each blending function is defined over d subintervals of the total range of u starting at knot value   the range of parameter u is divided into n  d subintervals by the n  d values specified in the knot vector  section b spline curves and surfaces chapter three dimensional object representations   local modification of a b spline curve changing one of the control points in a produces curve b  which is modified only in the neighborhood of the altered control point   with knot values labeled as uo       the resulting b spline curve is defined only in the interval from knot value u   up to knot value u    each section of the spline curve between two successive knot values is in fluenced by d control points   any one control point can affect the shape of at most d curve sections  in addition a b spline curve lies within the convex hull of at most d  control points so that b splines are tightly bound to the input positions for any value of u in the interval from knot value u _ to u   the sum over all basis functions is  sb   56 k given the control point positions and the value of parameter d we then need to specify the knot values to obtain the blending functions using the recur rence relations 55 there ate three general classifications for knot vectors uni form open uniform and nonuniform b splines are commonly described accord ing to the selected knot vector class  uniform periodic b splines when the spacing between knot values is constant the resulting curve is called a uniform b spline for example we can set up a uniform knot vector as     0   often knot values are normalized to the range between and as in    it is convenient in many applications to set up uniform knot values with a sepa ration of and a starting value of  the following knot vector is an example of this specification scheme        by u b alu 8 6 o4 a2 footbag pti leto petririiy u 4 1 5 a  b   u  u 0 0 04 2 toda a cortirritiit lriit y poi tera isis batts ly 0g 4 c  d   periodic b spline blending functions for n  d  and a uniform integer knot vector  uniform b splines have periodic blending functions that is for given val ues of and d all blending functions have the same shape each successive blending function is simply a shifted version of the previous function  b g t  by  gut au  boy du  an  57  where aw is the interval between adjacent knot values  shows the quadratic uniform b spline blending functions generated in the following exam  ple for a curve with four control points  example uniform quadratic b splines to illustrate the calculation of b spline blending functions for a uniform integer knot vector we select parameter values d  n  the knot vector must then contain n  d   knot values     and the range of parameter u is from to with n  d  subintervals  chapter each of the four blending functions spans  subintervals of the total range of three dimensional object y using the recurrence relations 55 we obtain the first blending function as representations tw fordsu by  bul2  w  fe  gb  w forl u 43 for2 u we obtain the next periodic blending function using relationship 57 substitut ing u  for vin bg3 and shifting the starting positions up by  tu  forl u by    fu dg ww yu d4 yw  for2su  uy for3su similarly the remaining two periodic functions are obtained by successively shifting b  to the right  r  qlu  2y for  u boga  fle   w bqi 3ks 4h  fordsu a  uf for4su x a stu   for3eu by  dtu   wu   v    for4su l 2m  uy fors su  a plot of the four periodic quadratic blending functions is given in  which demonstrates the local feature of b solines the first control point is multi plied by blending function bo  u  therefore changing the position of the first control point only affects the shape of the curve up to u  similarly the last control point influences the shape of the spline curve in the interval where b  is defined   also illustrates the limits of the b spline curve for this example all blending functions are present in the interval from uy   to u    below 338 and above not all blending functions are present this is the range of the poly pp pz c ay  quadratic periodic b spline fitted   to four control points in the xy es ps plane  nomial curve and the interval in which eq 56 is valid thus the sum of all blending functions is within this interval outside this interval we cannot sum all blending functions since they are not all defined below and above  since the range of the resulting polynomial curve is from to we can deter mine the starting and ending positions of the curve by evaluating the blending functions at these paints to obtain poan   po  ppd pend   pr  py  thus the curve starts at the midposition between the first two control points and ends at the mid position between the last two control points  we can also determine the parametric derivatives at the starting and ending posi tions of the curve taking the derivatives of the blending functions and substitut ing the endpoint values for parameter u we find that pon  pi po  pend  p3  po the parametric slope of the curve at the start position is parallel to the line join ing the first two control points and the parametric slope at the end of the curve is parallel to the line joining the last two control points  an example plot of the quadratic periodic b spline curve is given in  for four control points selected in the xy plane  in the preceding example we noted that the quadratic curve starts between the first two control points and ends at a position between the last two control points this result is valid for a quadratic periodic b spline fitted to any number of distinct control points in general for higher order polynomials the start and end positions are each weighted averages of d  control points we can pull a spline curve closer to any control point position by specifying that position mul tiple times  general expressions for the boundary conditions for periodic b splines can oe obtained by reparameterizing the blending functions so that parameter u is mapped onto the unit interval from to beginning and ending conditions are then obtained at u  dandu  cubic periodic b splines since cubic periodic b splines are commonly used in graphics packages we con sider the formulation for this class of splines periodic splines are particularly useful for generating certain closed curves for example the closed curve in fig 44 can be generated in sections by cyclically specifying four of the six control  chapter three dimensiona object representations   a closed periodic piecewise cubic b spline constructed with cyclic specification of the six control points  points shown at each step if any three consecutive control points are identical the curve passes through that coordinate position  for cubics d  and each blending function spans four subintervals of the total range of u if we are to fit the cubic to four control points then we could use the integer knot vector      and recurrence relations 55 to obtain the periodic blending functions as we did in the last section for quadratic periodic b splines  in this section we consider an alternate formulation for periodic cubic b splines we start with the boundary conditions and obtain the blending functions normalized to the interval  u  using this formulation we can also easily obtain the characteristic matrix the boundary conditions for periodic cubic b splines with four consecutive control points labeled po p  pz and ps are po   po  4p  pad pc   py  4p2  ps  58 p o   p  po  p   p5 py  these boundary conditions are similar to those for cardinal splines curve sec tions are defined with four control points and parametric derivatives slopes at the beginning and end of each curve section are parallel to the chords joining ad jacent contro points the b spline curve section starts at a position near p and ends at a position near p  a matrix formulation for a cubic periodic b splines with four control points can then be written as p u   v2 m   59  where the b spline matrix for periodic cubic polynomials is 30 m  60 be  1 this matrix can be obtained by solving for the coefficients in a general cubic polynomial expression using the specified four boundary conditions  we can also modify the b spline equations to include a tension parameter  as in cardinal splines  the periodic cubic b spline with tension matrix then has the form  t 9r     a m   18  61    so t 21 t which reduces to mg when t   we obtain the periodic cubic b spline blending functions over the parame ter range from to by expanding the matrix representation into polynomial form for example for the tension value t  we have boat  ta u  osusl b  u      62 bz s u    3u8   bn   by u   open uniform b splines this class of b splines is a cross between uniform b splines and nonuniform b splines sometimes it is treated as a special type of uniform b spline and some times it is considered to be in the nonuniform b spline classification for the open uniform b splines or simply open b splines the knot spacing is uniform except at the ends where knot values are repeated d times  following are two examples of open uniform integer knot vectors each with a starting value of      ford  2andn      ford 4andn we can normalize these knot vectors to the unit interval from to   33 67   ford  2andn      ford  4andn section b spline curves and surfaces chapter three dimensional object representations for any values of parameters d and n we can generate an open uniform knot vector with integer values using the calculations  forosj d we qr od d ford y en 63  n d forj n for values of j ranging from to x  d with this assignment the first d knots are assigned the value and the last knots have the value n  d   open uniform b splines have characteristics that are very similar to b zier splines in fact when d    degree of the polynomial is open b splines re duce to b zier splines and all knot values are either or for example with a cubic open b spline d  and four control points the knot vector is  0 01  the polynomial curve jor an open b spline passes through the first and last con trol points also the slope of the parametric curves at the first control point is parallel to the line connecting the first two control points and the parametric slope at the last control point is parallel to the line connecting the last two control points so geometric constraints for matching curve sections are the same as for b zier curves  as with b zier curves specifying multiple control points at the same coor dinate position pulls any b spline curve closer to that position since open b splines start at the first control point and end at the last specified control point closed curves are genetated by specifying the first and last control points at the same position  example open uniform quadratic b splines from conditions 63 with d  and n  five control points  we obtain the following eight values for the knot vector  ing wy ws ma ug ws meg uz      the total range of u is divided into seven subintervals and each of the five blend ing functions b is defined over three subintervals starting at knot position thus bg is defined from up  to u3  by is defined from xu  to u   and b  is defined from u  to uw   explicit polynomial expressions zre ob tained for the blending functions from recurrence relations 55 as bo alt   wu  osu l   qsu t by lu   uy l u o u by wy  fu2 w t 4t dg w 1su  uy qsu tu  lsu by u    u bu   u by y u   u  2eu  shows the shape of the these five blending functions the local fea tures of b splines are again demonstrated blending function by is nonzero only in the subinterval from to so the first control point influences the curve only in this interval similarly function b  is zero outside the interval from to and the position of the last control point does not affect the shape of the beginning and middle parts of the curve  matrix formulations for open b splines are not as conveniently generated as they are for periodic uniform b splines this is due to the multiplicity of knot values at the beginning and end of the knot vector  nonuniform b splines for this class of splines we can specify any values and intervals for the knot vec tor with nonuniform b splines we can choose multiple internal knot values and unequal spacing between the knot values some examples are              nonuniform b splines provide increased flexibility in controlling a curve shape with unequally spaced intervals in the knot vector we obtain different shapes for the blending functions in different intervals which can be used to ad just spline shapes by increasing knot multiplicity we produce subtle variations in curve shape and even introduce discontinuities multiple knot values also re duce the continuity by for each repeat of a particular value  we obtain the blending functions for a nonuniform b spline using methods similar to those discussed for uniform and open b splines given a set of  control points we set the degree of the polynomial and select the knot values then using the recurrence relations we could either obtain the set of blending functions or evaluate curve positions directly for the display of the curve graph ics packages often restrict the knot intervals to be either or to reduce compu tations a set of characteristic matrices then can be stored and used to compute section spline curves and surfaces by ylub by alu t b  o4   u pee deri ivi vida pedi dt y 1 3    qo 2 a  b b lu b au 8 6 o4 2 pat tad u wititiiia it pe et pe u 1 3 q 18 3 c  d b  u 6 2 poirot irrirtririnr boos tut lol y 1 5 fe   open uniform b spline blending functions for n  andd  values along the spline curve without evaluating the recurrence relations for each curve point to be plotted  b spline suriaces formulation of a b spline surface is similar to that for b zier splines we can ob tain a vector point function over a b spline surface using the cartesian product of b spline blending functions in the form    a prototype helicopter designed and modeled by daniel langlois of softimage inc  montreal using 000 b spline surface patches the scene was then rendered using ray tracing bump mapping and reflection mapping  courtesy of silicon graphics inc  nl nz pu    pi epbeysty  biy ag  64 ky  ko o where the vector values for p   specify positions of the   by nm   con trol points  b spline surfaces exhibit the same properties as those of their component b spline curves a surface can be constructed from selected values for parameters d and d  which determine the polynomial degrees to be used and from the specified knot vector  shows an object modeled with b spline sur faces   a generalization of b splines are the beta splines also referred to as splines that are formulated by imposing geometric continuity conditions on the first and second parametric derivatives the continuity parameters for beta splines are called b parameters  beta spline continuity canditions for a specified knot vector we can designate the spline sections to the left and right of a particular knot  with the position vectors p _ u and p u    zero order continuity positional continuity  g  at u is obtained by requiring p_ u  pau  65  first order continuity unit tangent continuity  g  is obtained by requiring tangent vectors to be proportional  section 10 beta splines   position vectors along curve sections to the left and right of knot u   chapter three dimensional oaject representations bp uw  pu   b  up  here parametric first derivatives are proportional and the unit tangent vectors are continuous across the knot  second order continuity curvature vector continuily  g  is imposed with the condition bip  ua  bop cu  pu  67  where can be assigned any rea number and f   the curvature vector pro vides a measure of the amount of bending of the curve at position u  when  and f   beta splines reduce to b splines  parameter is called the vias parameter since it controls the skewness of the curve for pb   the curve tends to flatten to the right in the direction of the unit tangent vector at the knots for    the curve tends to flatten to the left the effect of on the shape of the spline curve is shown in   parameter  is called the tension parameter since it controls how tightly or loosely the spline fits the control graph as  increases the curve approaches the shape of the control graph as shown in   cubic periodic beta spline matrix representation applying the beta spline boundary conditions to a cubic polynomial with a uni form knot vector we obtain the following matrix representation for a periodic beta spline   a2      i i i  i i  s5   t t i i     rb v    effect of parameter on the shape of a beta spline curve        b by    effect of parameter b on the shape of a beta spline curve  ab  br br pb  wab be b  mg  i   b  2b  2b  3b   68   b  b 6b 2p by  b  b  where  b     4b   we obtain the b spline matrix m when  and    and we get the b spline with tension matrix mz when a b a   a rational function is simply the ratio of two polynomials thus a rational spline is the ratio of two spline functions for example a rational b spline curve can be described with the position vector  vv  sg pr by gu  pu   69   ayb y glu  ko where the p are a set of n  control point positions parameters  are weight factors for the control points the greater the value of a particular  the closer the curve is pulled toward the control point p weighted by that parameter when all weight factors are set to the value we have the standard b spline curve since the denominator in eq 69 is the sum of the blending functions  rational splines have two important advantages compared to nonrational splines first they provide an exact representation for quadric curves conics  such as circles and ellipses nonrational splines which are polynomials can only approximate conics this allows graphics packages to model all curve shapes with one representation rational splines without needing a library of curve functions to handle different design shapes another advantage of rational splines is that they are invariant with respect to a perspective viewing transfor mation section  this means that we can apply a perspective viewing trans formation to the control points of the rational curve and we will obtain the cor rect view of the curve nonrational splines on the other hand are not invariant with respect to a perspective viewing transformation typically graphics design packages use nonuniform knot vector representations for constructing rational b splines these splines are referred to as nurbs nonuniform rational b splines  homogeneous coordinate representations are used for rational splines since the denominator can be treated as the homogeneous factor in a four dimen sional representation of the control points thus a rational spline can be thought of as the projection of a four dimensional nonrational spline into three dimen sional space  constructing a rational b spline representation is carried out wilh the same procedures for constructing a nonrational representation given the set of contrel points the degree of the polynomial the weighting factors and the knot vector we apply the recurrence relations to obtain the blending functions  section 11 rationat splines chapter  three dimensional object  representations to plot conic sections with nurbs we use a quadratic spline function d  and three contro points we can do this with a b spline function defined with the open knot vector    which is the same as a quadratic b zier spline we then set the weighting func tions to the following values  g    r   and the rational b spline representation is p u   pobosty   p  rp by  pzbz sw  71 bo gu   r l  r b su by x u  we then obtain the various conics   with the following values for para meter r  r   hyperbola section r w   parabola section r w  ellipse section  r o  straight line segment  we can generate a one quarter arc of a unit circle in the first quadrant of the xy plane   by setting w  cos and by choosing the control points as nn hyperbola ir    po  _ straight line parabola r  w   r   ellipse r     conic sections generated with various values of the rational spline weighting factor w   tone tno pp    a circular arc in the first quadrant p   of the xy plane  po    pi  pp   other sections of a unit circle can be obtained with different control point posi tions a complete circle can be generated using geometric transformation in the xy plane for example we can reflect the one quarter circular arc about the x and y axes to produce the circular arcs in the other three quadrants  in some cad systems we construct a conic section by specifying three points on an arc a rational homogeneous coordinate spline representation is then determined by computing control point positions that would generate the selected conic type as an example a homogeneous representation for a unit cir cular arc in the first quadrant of the xy plane is x a t w yale  qu zu   h ttu  sometimes it is desirable to be able to switch from one spline representation to another for instance a b zier representation is the most convenient one for sub dividing a spline curve while a b spline representation offers greater design flex ibility so we might design a curve using b spline sections then we can convert to an equivalent bezier representation to display the object using a recursive sub division procedure to locate coordinate positions along the curve  suppose we have a spline description of an object that can be expressed with the following matrix product  plu  u myonne  maggot 72  where meaine i5 the matrix characterizing the spline representation and mgeom  s the column matrix of geometric constraints for example control point coordi nates  to transform to a second representation with spline matrix mpinez we need to determine the geometric constraint matrix mogeomz that produces the same vector point function for the object that is  charter  three dimenstonal object representations pq  g mopiyer m  geom p73  u  maoigw2  maeone  um  geam   spline  m vom so ving for mgcomz we have  m m yeom  moohine2  mypnet  meco  maa moacomi  ith and the required transformation matrix that converts from the first spline repre sentation to the second is then calculated as myo  my ne m ue  sphnel a nonuniform b spline cannot be characterized with a general spline ma trix but we can rearrange the knot sequence to change the nonuniform b spline to a b zier representation then the b zier matrix couid be converted to any other form  the following example calculates the transformation matrix for conversion from a periodic cubic b spline representation to a cubic b zier spline representa tion   31 030 3 i 3a mee  of 0 1 10 76 _ jo4a2  mla and the the transformation matrix for converting from a cubic bezier representa tion to a periodic cubic b spline representation is  2 6 moe   2 moet nn  on  2 6 aa  771 13 a displaying spline curves and surfaces  to display a spline curve or surface we must determine coordinate positions on the curve or surface that project to pixel positions on the display device this means that we must evaluate the parametric polynomial spline functions in cer tain increments over the range of the functions there are several methods we can use to calculate positions over the range of a spline curve or surface  horner s rule the simplest method for evaluating a polynomial other than a brute force calcu lation of each term in succession is horner s rule which performs the calculations by successive factoring this requires one multiplication and one addition at each step for a polynomial of degree n there are n steps  as an example suppose we have a cubic spline representation where coor dinate positions are expressed as x u  aye  bw  ou t dy 78  with similar expressions for the y and z coordinates for a particular value of pa rameter u we evaluate this polynomial in the following factored order  x u   cau  bu  clu d  79  the calculation of each x value requires three multiplications and three additions so that the determination of each coordinate position x y z along a cubic spline curve requires nine multiplications and nine additions  additional factoring tricks can be applied to reduce the number of compu tations required by horner s method especially for higher order polynomials degree greater than  but repeated determination of coordinate positions over the range of a spline function can be computed much faster using forward differ ence calculations or spline subdivision methods  forward difference calculations a fast method for evaluating polynomial functions is to generate successive val ues recursively by incrementing previously calculated values as for example  xeey  xe  an  80  thus once we know the increment and the value of x at any step we get the next value by adding the increment to the value at that step the increment ax at each step is called the forward difference  f we divide the total range of u into subintervals of fixed size then two successive x positions occur at x  x u  and xy   x u  where yay  uy  k   81  and us   section 13 displaying spline curves and surfaces chapter three dimensional object representations to illustrate the method suppose we have the linear spline representation x u  a u  b  two successive x coordinate positions are represented as x  ayy  by 82 xa  au   b  subtracting the two equations we obtain the forward difference ax   in this case the forward difference is a constant with higher order polynomials the forward difference is itself a polynomial function of parameter u with degree one less than the original polynomial for the cubic spline representation in eq 78 two successive x coordinate positions have the polynomial representations xy ue  bug  cy  dy ye  a uy  by  bay   cy    d  83 the forward difference now evaluates to ax  3a     854   69     84 which is a quadratic function of parameter u  since ax is a polynomial function of u we can use the same incremental procedure to obtain successive values of ax  that is  ax   ax  atx  85 where the second forward difference is the linear function a x  67m  53   86 repeating this process once more we can write a xy   atx  bay  87 with the third forward ditference as the constant bx   88 equations 80 85 87 and 88 provide an incremental forward differ ence calculation of points along the cubic curve starting at up  with a step size we obtain the initial values for the x coordinate and its tirst two forward differ  ences as xo  a axy  a8    89 a x  89  2b  once these initia values have been computed the calculation for each successive x coordinate position requires only three additions we can apply forward difference methods to determine positions along spline curves of any degree n each successive coordinate position x y  is evaluated with a series of 3n additions for surfaces the incremental calculations are applied to both parameter u and parameter v  subdivision methods recursive spline subdivision procedures are used to repeatedly divide a given curve section in half increasing the number of control points at each step subdi vision methods are useful for displaying approximation spline curves since we can continue the subdivision process until the control graph approximates the curve path control point coordinates then can be plotted as curve positions an other application of subdivision is to generate more control points for shaping the curve thus we could design a general curve shape with a few control points then we could apply a subdivision procedure to obtain additional control points with the added control points we can make fine adjustments to small sections of the curve  spline subdivision is most easily applied to a b zier curve section because the curve passes through the first and last control points the range of parameter u is always between and and it is easy to determine when the control points are near enough to the curve path b zier subdivision can be applied to other spline representations with the following sequence of operations  convert the spline representation in use to a bezier representation  apply the b zier subdivision algorithm  convert the b zier representation back to the original spline representation   shows the first step in a recursive subdivision of a cubic b zier curve section positions along the b zier curve are described with the parametric point function p u for o u at the first subdivision step we use the halfway point p to divide the original curve into two sections the first sec tion is then described with the point function p s  and the section is described with p t  where s  2u forosus05 99 t 2u for sus each of the two new curve sections has the same number of control points as the original curve section also the boundary conditions position and parametric    by prs pro pr as pp ty rg po py pro pr before after subdivision subdivision  subdividing a cubic b zier curve section into two sections each with four control points  section 13  displaying spline curves and surfaces chapter slope at the two ends of each new curve section must match the position and three dimensiona object slope values for the original curve p u  this gives us four conditions for each representations curve section that we can use to determine the control point positions for the first half of the curve the four new control points are pio  po pi  po  py  91 piz  po  2p  po pis  po  3p  3p2  ps  and for the second half of the curve we obtain the four control points pro  po  3p  3p2  ps p21  f pi  2p  ps  92  piz  p2  py p23  ps an efficient order for computing the new control points can be set up with only add and shift division by operations as pio  po pi  po  py t 5p  p  pi2  pin  t p2a  ps 93  po   py  ps po  r  poa  pan  4p  pr  pis  pro these steps can be repeated any number of times depenaing on whether we are subdividing the curve to gain more control points or whether we are try ing to locate approximate curve positions when we are subdividing to obtain a set of display points we can terminate the subdivision procedure when the curve sections are small enough one way to determine this is to check the distances between adjacent pairs of control points for each section if these distances are sufficiently small we can stop subdividing or we could stop subdividing when the set of control points for each section is nearly along a straight line path  subdivision methods can be applied to b zier curves of any degree for a b zier polynomial of degree n  the control points for each half of the curve at the first subdivision step are r  pur  ck dp k   n 94   pak  gt cn kin dp  where c k  and c n  k n  i are the binomial coefficients  we can apply subdivision methods directly to nonuniform b splines by adding values to the knot vector but in general these methods are not as effi cient as b zier subdivision  14  sweep representations  solid modeling packages often provide a number of construction techniques sweep representations are useful for constructing three dimensional objects that possess translational rotational or other symmetries we can represent such ob jects by specifying a two dimensional shape and a sweep that moves the shape through a region of space a set of two dimensional primitives such as circles and rectangles can be provided for sweep representations as menu options other methods for obtaining two dimensional figures include closed spline curve constructions and cross sectional slices of solid objects   illustrates a translational sweep the periodic spline curve in  a defines the object cross section we then perform a translational  pig    py t   i     i     pus pru v u pp     p  a  b   constructing a solid with a translational sweep translating the control paints of the periodic spline curve in a generates the solid shown in b  whose surface can be described with point function p u v  section 14 sweep representations  auda of rotation pe opa plu po  p  a   constructing a solid with a rotatianal sweep rotating the control points of the periodic spline curve in a about the given rotation axis generates the solid shown in b  whose surface can be described with point function p u v  sweep by moving the control points py through p a set distance along a straight line path perpendicular to the plane of the cross section at intervals along this path we replicate the cross sectional shape and draw a set of connecting lines in the direction of the sweep to obtain the wireframe representation shown in fig 53 b  an example of object design using a rotational sweep is given in  this time the periodic spline cross section is rotated about an axis of rotation specified in the plane of the cross section to produce the wireframe representa tion shown in  b  any axis can be chosen for a rotational sweep if we use a rotation axis perpendicular to the plane of the spline cross section in fig 54 a  we generate a two dimensional shape but if the cross section shown in this figure has depth then we are using one three dimensional object to generate another  in general we can specify sweep constrictions using any path for rota tional sweeps we can move along a circular path through any angular disfance from to  for noncircular paths we can specify the curve function describ ing the path and the distance of travel along the path in addition we can vary the shape or size of the cross section along the sweep path or we could vary the orientation of the cross section relative to the sweep path as we move the shape through a region of space  another technique for solid modeling is to combine the volumes occupied by overlapping three dimensional objects using set operations this modeling method called constructive solid geometry csg  creates a new volume by ap plying the union intersectian or difference operation to two specified volumes figures 55 and 56 show examples for forming new shapes using the set operations in  a  a block and pyramid are placed adjacent to each other specifying the union operation we obtain the combined object shown in  b   a shows a block and a cylinder with overlapping vol umes using the intersection operation we obtain the resulting solid in fig  b  with a difference operation we can get the solid shown in  c  a csg application starts with an initial set of three dimensional objects primitives  such as blocks pyramids cylinders cones spheres and closed spline surfaces the primitives can be provided by the csg package as menu se lections or the primitives themselves could be formed using sweep methods spline constructions or other modeling procedures to create a new three dimen sional shape using csg methods we first select two primitives and drag them into position in some region of space then we select an operation union inter section or difference for combining the volumes of the two primitives now we have a new object in addition to the primitives that we can use to form other ob jects we continue to construct new shapes using combinations of primitives and the objects created at each step until we have the final shape an object designed with this procedure is represented with a binary tree an example tree represen tation for a csg object is given in   ray casting methods are commonly used to implement constructive solid geometry operations when objects are described with boundary representations we apply ray casting by constructing composite objects in world coordinates with the xy plane corresponding to the pixel plane of a video monitor this plane is then referred to as the firing plane since we fire a ray from each pixel posi tion through the objects that are to be combined   we then determine surface intersections along each ray path and sort the intersection points accord ing to the distance from the firing plane the surface limits for the composite ob ject are then determined by the specified set operation an example of the ray casting determination of surface limits for a csg object is given in  which shows yz cross sections of two primitives and the path of a pixel ray per pendicular to the firing plane for the union operation the new volume is the combined interior regions occupied by either or both primitives for the intersec tion operation the new volume is the interior region common to both primitives   a  b  c    a two overlapping objects  b a wedge shaped csg object formed with the intersection operation  c a csg object formed with a difference operation by subtracting the overlapping volume of the cylinder from the block volume  section 15 constructive sofid geometry methods si   combining two objects  a with a union operation produces a single composite solid object b   firing plane   implementing csg operations using ray casting  firing plane   y  a  x ae  determining object volume along a ray path for a small area a  on the firing plane       csg object  a csg tree representation for an object     wy obj obj al d pixe ray cperation  surface limits a union a d ny intersection c firing difference b d plane  obj  obj  zz  fa  b   determining surface limits along a pixel ray  and a difference operation subtracts the volume of one primitive from the other  each primitive can be defined in its own local modeling coordinates then a composite shape can be formed by specifying the modeling transforma tion matrices that would place two primitives in an overlapping position in world coordinates the inverse of these modeling matrices can then be used to transform the pixel rays to modeling coordinates where the surface intersection calculations are carried out for the individual primitives then surface intersec tions for the two objects are sorted and used to determine the composite object limits according to the specified set operation this procedure is repeated for each pair of objects that are to be combined in the csg tree for a particular object  once a csg object has been designed ray casting is used to determine physica properties such as volume and mass to determine the volume of the object we can divide the firing plane into any number of small squares as shown in  we can then approximate the volume v  of the object for a crass sectional slice with area a along the path of a ray from the square at position i pas v  ay dz  95  where az is the depth of the object along the ray from position    f the object has internal holes az is the sum of the distances between pairs of intersection points along the ray the total volume of the csg object is then calculated as v s vv  96  given the density function p x y  for the object we can approximate the mass along the ray from position i j as m  a  px yy 2d2 97  where the one dimensional integral can often be approximated without actually carrying out the integration depending on the form of the density function the total mass of the csg object is then approximated as m m   98   em    other physical properties such as center of mass and moment of inertia can be obtained with similar calculations we can improve the approximate calculations for the values of the physical properties by taking finer subdivisions in the firing plane  if object shapes are represeined with octrees we can implement the set op erations in csg procedures by scanning the tree structure describing the contents of spatial octants this procedure described in the following section searches the octants and suboctants of a unit cube to locate the regions occupied by the two objects that are to be combined  hierarchical tree structures called octrees are used to represent solid objects in some graphics systems medical imaging and other applications that require dis plays of object cross sections commonly use octree representations the tree structure is organized so that each node corresponds to a region of three dimen sional space this representation for solids takes advantage of spatial coherence to reduce storage requirements for three dimensional objects it also provides a convenient representation for storing information about object interiors  the octree encoding procedure for a three dimensional space is an exten sion of an encoding scheme for two dimensional space called quadtree encod ing quadtrees are generated by successively dividing a two dimensional region usually a square into quadrants each node in the quadtree has four data ele ments one for each of the quadrants in the region   if all pixels within a quadrant have the same color a homogeneous quadrant  the corresponding data element in the node stores that color in addition a flag is set in the data ele ment to indicate that the quadrant is homogeneous suppose all pixels in quad rant of  are found to be red the color code for red is then placed in data element of the node otherwise the quadrant is said to be heterogeneous and that quadrant is itself divided into quadrants   the corresponding data element in the node now flags the quadrant as heterogeneous and stores the pointer to the next node in the quadtree  an algorithm for generating a quadtree tests pixel intensity values and sets up the quadtree nodes accordingly if each quadrant in the original space has a section 16 octrees chapter  three dimensional object representations        quadrant quadrant o  quadran quadrant _ data elements in the representative quadtree node region of a two dimensional space   region of a two dimensional space divided intu numbered quadrants and the associated quadtree node with four data elements  single color specification the quadtree has only one node for a heterogeneous region of space the successive subdivisions into quadrants continues until all quadrants are homogeneous  shows a quadtree representation for a region containing one area with a solid color that is different from the uniform color specified for all other areas in the region  quadtree encodings provide considerable savings in storage when large color areas exist in a region of space since each single color area can be repre sented with one node for an area containing by pixels a quadtree repre sentation contains at most levels each node in the quadtree has at most four immediate descendants an octree encoding scheme divides regions af three dimensional space usually cubes into octants and stores eight data elements in each node of the tree   individual elements of a three dimensional space are called vol ume elements or voxels when all voxels in an octant are of the same type this            t 1  t 3 quadtree representation region ot a two dimensional space   region of a two dimensional space with two levels of quadrant divisions and the associated quadtree representation           3           quadtree representation for a region containing one foreground color pixel on a solid background  type value is stored in the corresponding data element of the node empty re gions of space are represented by voxel type void  any heterogeneous octant is subdivided into octants and the corresponding data element in the node points to the next node in the octree procedures for generating octrees are similar to those for quadtrees voxels in each octant are tested and octant subdivisions con tinue until the region of space contains only homogeneous octants each node ir the octree can now have from zero to eight immediate descendants  algorithms for generating octrees can be strictured to accept definitions of objects in any form such as a polygon mesh curved surface patches or solid geometry constructions using the minimum and maximum coordinate values of the object we can define a box parallelepiped around the object this region of three dimensional space containing the object is then tested octant by octant to generate the octree representation  once an octree representation has been established for a solid object vari ous manipulation routines can be applied to the solid an algorithm for perform ing set operations can be applied to two octree representations for the same re gion of space for a union operation a new octree is constructed with the combined regions for each of the input objects similarly intersection or differ  are   sss he dhbboeoe  data elements in the representative octree node aegion of a three dimensional space   region of a three dimensional space divided into numbered octants and the associated octree node with eight data elements  section 16 octrees w nn chapter three dimensional object representations ence operations are perforined by looking for regions of overlap in the two oc trees the new octree is then formed by either storing the octants where the two objects overlap or the region occupied by one object but not the other  three dimensonal octree rotations are accomplished by applying the trans formations to the occupied octants visible surface identification is carried out by searching the octants from front to back the first object detected is visible so that information can be transferred to a quadtree representation for display   this representation scheme is similar to octree encoding except we now divide space into two partitions instead of eight at each step with a binary space parti tioning bsp tree we subdivide a scene into two sections at each step with a plane that can be at any position and orientation in an octree encoding the scene is subdivided at each step with three mutually perpendicular planes aligned with the cartesian coordinate planes  for adaptive subdivision of space bsp trees can provide a more efficient partitioning since we can position and orient the cutting planes to suit the spatial distribution of the objects this can reduce the depth of the tree representation for a scene compared to an octree and thus reduce the time to search the tree in ad dition bsp trees are useful for identifying visible surfaces and for space parti tioning in ray tracing algorithms  all the object representations we have considered in the previous sections used euclidean geometry methods that is object shapes were described with equa tions these methods are adequate for describing manufactured objects those that have smooth surfaces and regular shapes but natural objects such as moun tains and clouds have irregular or fragmented features and euclidean methods do not realistically model these objects natural objects can be realistically de scribed with fractal geometry methods where procedures rather than equations are used to model objects as we might expect procedurally defined objects have characteristics quite different from objects described with equations fractal geometry representations for objects are commonly applied in many fields to de scribe and explain the features of natural phenomena in computer graphics we use fractal methods to generate displays of natural objects and visualizations of various mathematical and physical systems  a fractal object has two basic characteristics infinite detail at every point and a certain self similarity between the object parts and the overall features of the object the self similarity properties of an object can take different forms de pending on the choice of fractal representation we describe a fractal object witha procedure that specifies a repeated operation for producing the detail in the ob ject subparts natural objects are represented with procedures that theoretically repeat an infinite number of times graphics displays of natural objects are of course generated witha finite number af steps  if we zoom in on a continuous euclidean shape no matter how campli cated we can eventually get the zoomed in view to smoath out but if we zoom on  distant mountain closer view do closer yat   the ragged appearance of a mountain outline at different levels of magnification  in on a fractal object we continue to see as much detail in the magnification as we did in the original view a mountain outlined against the sky continues to have the same jagged shape as we view it from a closer and closer position fig 65  as we near the mountain the smaller detail in the individual ledges and boulders becomes apparent moving even closer we see the outlines of rocks then stones and then grains of sand at each step the outline reveals more twists and turns if we took the grains of sand and put them under a microscope we would again see the same detail repeated down through the molecular level similar shapes describe coastlines and the edges of plants and clouds  zooming in on a graphics display of a fractal object is obtained by selecting a smaller window and repeating the fractal procedures to generate the detail in the new window a consequence of the infinite detail of a fractal object is that i has no definite size as we consider more and more detail the size of an objec tends to infinity but the coordinate extents of the object remain bound within a finite region of space  we can describe the amount of variation in the object detail with a number called the fractal dimension unlike the euclidean dimension this number is not necessarily an integer the fractal dimension of an object is sometimes referred to as the fractional dimension which is the basis for the name fractal  fractal methods have proven useful for modeling a very wide variety of natural phenomena in graphics applications fractal representations are used to model terrain clouds water trees and other plants feathers fur and various surface textures and just to make pretty patterns in other disciplines fractal pat terns have been found in the distribution of stars river islands and moon craters in rain fields in stock market variations in music in traffic flow in urban prop erty utilization and in the boundaries of convergence regions for numerical analysis techniques  fractal generation procedures a fractal object is generated by repeatedly applying a specified transformation function to points within a region of space if py  xg yo  i8 a selected initial point each iteration of a transformation function f generates successive levels of detail with the calculations p  fcp  p  f p  p f p     99  section 18 fractal geometry methods  chapter three dimensional obyect representations in general the transformation function can be applied to a specified point set or we could apply the transformation function to an initial set of primitives such as straight lines curves color areas surfaces and solid objects also we can use either deterministic or random generation procedures at each iteration the transformation function may be defined in terms of geometric transformations scaling translation rotation  or it can be set up with nonlinear coordinate trans formations and decision parameters  although fractal objects by definition contain infinite detail we apply the transformation function a finite number cf times therefore the objects we dis play actually have finite dimensions a procedural representation approaches a true fractal as the number of transformations is increased to produce more and more detail the amount of detail included in the final graphical display of an ob ject depends on the number of iterations performed and the resolution of the dis play system we cannot display detail variations that are smaller than the size of a pixel to see more of the object detail we zoom in on selected sections and re peat the transformation function iterations  classification of fractals self similar fractals have parts that are scaled down versions of the entire object starting with an initial shape we construct the object subparts by apply a scaling parameter s to the overall shape we can use the same scaling factor s for all sub parts or we can use different scaling factors for different scaled down parts of the object if we also apply random variations to the scaled down subparts the fractal is said to be statistically self similar the parts then have the same statistical properties statistically self similar fractals are commonly used to mode trees shrubs and other plants  self affine fractals have parts that are formed with different scaling para meters  sy   different coordinate directions and we can also include ran dom variations to obtain statistically self affine fractals terrain water and clouds are typically modeled with statistically self affine fractal construction methods  invariant fractal sets are formed with nonlinear transformations this class of fractals includes selj squaring fractals such as the mandelbrot set which are formed with squaring functions in complex space and_ self inverse fractals formed with inversion procedures  fractal dimension the detail variation in a fractal object can be described with a number d called the fractal dimension which is a measure of the roughness or fragmentation of the object more jagged looking objects have larger fractal dimensions we can set up some iterative procedures to generate fractal objects using a given value for the fractal dimension d with other procedures we may be able to determine the fractal dimension from the properties of the constructed object although in gen eral the fractal dimension is difficult to calculate  an expression for the fractal dimension of a self similar fractal constructed with a single scalar factor s is obtained by analogy with the subdivision of a eu clidean object  shows the relationships between the scaling factor s and the number of subparts n for subdivision of a unit straight line segment a square and a cube with s  the unit line segment  a  is divided into two equal length subparts similarly the square in  b is divided into four equal area subparts and the cube  c  is divided into eight equal volume subparts for each of these objects the relationship between the             k  hi    j    de  n  e s ns  a la ales a     f oo aga agen b on b fern vv  o  s vy n ns3 i  subdividing objects with euclidean dimensions a dp   b dy  and c de  using scaling factor s   number of subparts and the scaling factor is m s f  in analogy with euclid ean objects the fractal dimension d for self similar objects can be obtained from ns   709  solving this expression for d the fractal similarity dimension we have _ inn in s   udy for a self similar fractal constructed with different scaling factors for the different parts the fractal similarity dimension is obtained from the implicit relationship qs  1012  on where is the scaling factor for subpart number k  in  we considered subdivision of simple shapes straight line rec tangle box  if we have more complicated shapes including curved lines and ob jects with nonplanar surfaces determining the structure and properties of the subparts is more difficult for general abject shapes we can use topological cover  section 18 fractal geometry methods chapter three dimensional object representations   box covering of an irregularly shaped object  ing methods that approximate object subparts with simple shapes a subdivided curve for example can be approximated with straight line sections and a subdi vided polygon could be approximated with small squares or rectangles other covering shapes such as circles spheres and cylinders can also be used to ap proximate the features of an object divided into a number of smaller parts cov ering methods are commonly used in mathematics to determine geometric prop erties such as length area or volume of an object by summing the properties of a set of smaller covering objects we can also use covering methods to determine the fractal dimension d of some objects  topological covering concepts were originally used to extend the meaning of geometric properties to nonstandard shapes an extension of covering meth ods using circles or spheres led to the notion of a hausdorff besicovitch dimension or fractional dimension the hausdorff besicovitch dimension can be used as the fractal dimension of some objects but in general it is difficult to evaluate more commonly the fractal dimension of an object is estimated with box covering meth ods using rectangles or parallelepipeds  illustrates the notion of a box covering here the area inside the large irregular boundary can be approxi mated by the sum of the areas of the small covering rectangles  we apply box covering methods by first determining the coordinate extents of an object then we subdivide the object into a number of small boxes using the given scaling factors the number of boxes that it takes to cover an object is called the box dimension and n is related to the fractal dimension d of the object for statistically self similar objects with a single scaling factor s we can cover the object with squares or cubes we then count the number of covering boxes and use eq 101 to estimate the fractal dimension for self affine objects we cover the object with rectangular boxes since different directions are scaled differently in this case the number of boxes is used with the affine transformation para meters to estimate the fractal dimension  the fractal dimension of an object is always greater than the corresponding euclidean dimension or topological dimension  which is simply the least num ber of parameters needed to specify the object a euclidean curve is one dimen sional a euclidean surface is two dimensional and a euclidean solid is three di mensional  for a fractal curve that lies completely within a two dimensional plane the fractal dimension d is greater than the euclidean dimension of a curve  the closer d is to the smoother the fractal curve if d  we have a peano curve that is the curve completely fills a finite region of two dimensional space for d the curve self intersects and the area could be covered an infinite number of times fractal curves can be used to model natural object boundaries such as shorelines  spatial fractal curves those that do not lie completely within a single plane also have fractal dimension d greater than but d can be greater than without self intersecting a curve that fills a volume of space has dimension d  and a self intersecting space curve has fractal dimension d   fractal surfaces typically have a dimension within the range  d  if d  the surface fills a volume of space and if d  there is an overlapping coverage of the volume terrain clouds and water are typically modeled with fractal surfaces  the dimension of a fractal solid is usually in the range  d  again if d  we have a self overlapping object fractal solids can be used for example to model cloud properties such as water vapor density or temperature within a region of space sectian 18 a   fractal geomerry methods  fo    _   generator ny initiator   initiator and generator for the koch curve  geometric construction of deterministic self similar fractals to geometrically construct a deterministic nonrandom self similar fractal we start with a given geometric shape called the initiatar subparts of the initiator are then replaced with a pattern called the generator  as an example if we use the initiator and generator shown in  we can construct the snowflake pattern or koch curve shown in  each straight line segment in the initiator is replaced with four equal length line seg ments at each step the scaling factor is so the fractal dimension is d  in in  2619 also the length of each line segment in the initiator increases by aye  a  or e  di  first three iterations in the generation of the koch curve  a snowflake filling peano curve   segment length  segment length   segment length     a     va yp  length  length  length   length of each side of the koch curve increases by a factor of at each step while the line segment lengths are reduced by a factor of segment segment segment length  f length  length  d 129 d  500 d  a  b  c  vigure 717 self similar curve constructions and associated fractal dimensions  oe tnd of ee o  e e o oe e           segment segment segment length  length  length  o  631 o  333 o 333  generators wit multiple disjoint parts  a factor of at each step so that the length of the fractal curve tends to infinity as more detail is added tu the curve   examples of other self similar fractal curve constructions are shown in  these examples illustrate the more jagged appearance of objects with higher fractal dimensions  we can also use generators with multiple disjoint components some exam ples of compound generators are shown in  using random variations with compound generators we can model various natural objects that have com pound parts such as island distributions along coastlines   shows an example of a self similar construction using multi ple scaling factors the fractal dimension of this object is determined from eq 102  as an example of self similar fractal construction tor a surface we scale the regular tetrahedron shown in  by a factor of then place the scaled section 18 fractal geometry methods front face scated copy of tetrahedron  a  b    scaling the tetrahedron in a by a factor of and positioning the scaled version on one face of the original tetrahedron produces the fractal surface b  object on each of the original four surfaces of the tetrahedron each face of the original tetrahedron is converted to smaller faces and the original face area is increased by a factor of the fractal dimension of this surface is in6    d in  which indicates a fairly fragmented surface  another way to create self similar fractal objects is to punch holes in a given initiator instead of adding more surface area  shows some examples of fractal objects created in this way  geometric construction of statistically self similar fractals one way we can introduce some randomness into the geometric construction of a self similar fractal is to choose a generator randomly at each step from a set of predefined shapes another way to generate random self similar objects is to compute coordinate displacements randomly for example in  we cre ate a random snowflake pattern by selecting a random midpoint displacement distance at each step   self similar tiree dimensional fractals formed with generators that subtract subparts from an initiator  courtesy of john c hart washington state university   a modified snowflake pattern using random midpoint displacement  displays of trees and other plants can be constructed with similar geometric methods  shows a self similar construction for a fern in a of this figure each branch is a scaled version of the total object and b shows a fully rendered fern with a twist applied to each branch another example of this method is shown in  here random scaling parameters and branching directions are used to model the vein patterns in a leaf  once a set of fractal objects has been created we can model a scene by plac ing several transformed instances of the fractal objects together  il lustrates instancing with a simple fractal tree in  a fractal forest is dis  layed to model the gnarled and contorted shapes of some trees we can apply twisting functions as well as scaling to create the random self similar branches   b   self similar constructions for a fern  courtesy of peter oppenheimer computer ha graphics lab new york institute of technology   fighre 78 random self similar construction of vein branching in a fall leaf boundary of the leaf is the limit of the vein growth  courtesy of peter oppenheimer computer graphics lab new york institute of technology     modeling a scene using multiple object instancing fractal leaves are attached to a tree and several instances of the tree are used to form a grove the grass is modeled with multiple instances of green cones  courtesy of john c hart washington state university  this technique is illustrated in  starting with the tapered cylinder on the left of this figure we can apply transformations to produce in succession from left to right a spiral a helix and a random twisting pattern a tree modeled with random twists is shown in  the tree bark in this display is mod eled using bump mapping and fractal brownian variations on the bump patterns as discussed in the following section  a fractal forest created with multiple instances of leaves pine needles grass and tree bark  courtesy of john c hart washington state university   modeling tree branches with spiral helical and random twists  courtesy of peter oppentteimer computer graphics lab new york institute of technology   an example of brownian motion random walk in the xy plane    tree branches modeled with random squiggles  courtesy of peter oppenheimer computer graphics lab new york institute of technology  affine fractal construction methods we can obtain highly realistic representations for terrain and other natural objects using affine fractal methods that model object features as fractional brownian mo tion this is an extension of standard brownian motion a form of random walk  that describes the erratic zigzag movement of particles in a gas or otner fluid  illustrates a random walk path in the xy plane starting from a given position we generate a straight line segment in a random direction and with a random length we then move to the endpoint of the first line segment and repeat the process this procedure is repeated for any number of line seg ments and we can calculate the statistical properties of the line path over any time interval  fractional brownian motion is obtained by adding an additional parameter to the statistical distribution describing brownian motion this addi tional parameter sets the fractal dimension for the motion path  a single fractional brownian path can be used to model a fractal curve with a two dimensional array of random fractional brownian elevations over a    a brownian motion planet observed from the surface of a fractional brownian motion pianet with added craters in the foreground  courtesy of r v voss and b b  mandelbrot adapted from the fractal geometry of nature by benoit b mandelbrot new york w h freeman and co   ground plane grid we can model the surface of a mountain by connecting the el evations to form a set of polygon patches if random elevations are generated on the surface of a sphere we can model the mountains valleys and oceans of a planet in  brownian motion was used to create the elevation variations on the planet surface the elevations were then color coded so that lowest eleva tions were painted blue the oceans and the highest elevations white snow on the mountains  fractional brownian motion was used to create the terrain fea tures in the foreground craters were created with random diameters and ran dom positions using affine fractal prc cedures that closely describe the distribu tion of observed craters river islands rain patterns and other similar systems of objects  by adjusting the fractal dimension in the fractional brownian motion calcu lations we can vary the ruggedness of terrain features values for the fractal di mension in the neighborhood of d  15 produce realistic mountain features while higher values close to can be used to create unusual looking extrater restrial landscapes we can also scale the calculated elevations to deepen the val leys and to increase the height of mountain peaks some examples of terrain fea tures that can be modeled with fractal procedures are given in  a scene modeled with fractal clouds over a fractal mountain is shown in   random midpoint displacement methods fractional brownian motion calculations are time consuming because the eleva tion coordinates of the terrain above a ground plane are calculated with fourier series which are sums of cosine and sine terms fast fourier transform fft  methods are typically used but it is still a slow process to generate fractal moun   tain scenes therefore faster random midpoint displacement methods similar to the random displacement methods used in geometric constructions have been developed to approximate fractional brownian motion representations for terrain and other natural phenomena these methods were originally used to generate animation frames for science fiction films involving unusual terrain and planet features midpoint displacement methods are now commonly used in many ap plications including television advertising animations  although random midpoint displacement methods are faster than frac tional brownian motion calculations they produce less realistic looking terrain features  illustrates the midpoint displacement method for generat ing a random walk path in the xy plane starting with a straight line segment we calculate a displaced y value for the midposition of the line as the average of the endpoint y values plus a random offset  yet   lua  y b  r 103  to approximate fractional brownian motion we choose a value for r from a gaussian distribution with a mean of and a variance proportional to lb al  where h  d and d  is the fractal dimension another way to obtain a tandom offset is to take r  sr b  a  with parameter s as a selected surface toughness factor and r asa gaussian random value with mean and variance table lookups can be used to obtain the gaussian values the process is then repeated by calculating a displaced y value for the midposition of each half of the subdivided line and we continue the subdivision until the subdivided line sec tions are less than some preset value at each step the value of the random vari  section 18  fractal geometry methods  cj   variations in terrain features modeled with fractional brownian motion  courtesy of a r v voss and b b mandelbrot adapted from the fractal geometry of nature by benoit b mandelbrot new york w h freeman and co   and b and c ken musgrave and benoit b mandelbrot mathematics and computer science yale university    a scene modeled with fractal clouds and mountains  courtesy of ken musgrave and benoit b mandelbrot mathematics and computer science yale university   y  y b a  vib yta yta   ymid a b x a a b b x  random midpoint displacement of a straight line segment  able r decreases since it is proportional to the width b  a of the line section to be subdivided  shows a fractal curve obtained with this method terrain features are generated by applying the random midpoint displace ment procedures to a rectangular ground plane   we begin by assign ing an elevation z value to each of the four corners a b c and d in  of the ground plane then we divide the ground plane at the midpoint of each edge to obtain the five new grid positions e f gh and m elevations at midpositions      y  a b a  b i   ground m plane hpoenne wee f  f  d cy d a cy a tb   a rectangular ground plane a is subdivided into four equal grid sections b for the first step in a random midpoint displacement procedure to calculate terrain elevations  section 18 fractal geometry methods   x  a     b   a random walk path generated from a straight line segment with four iterations of the random midpoint displacement procedure  chapter three dimensiona object representations      eight surface patches formed over a ground plane at the first step of a random midpoint displacement procedure for generating terrain features  e f g and h of the ground plane edges can be calculated as the average eleva tion of the nearest two vertices plus a random offset for example elevation z at midposition e is cal ulated using vertices a and b and the elevation at midposi tion f is calculated using vertices b and c  z        yp   random values r and can be obtained from a gaussian distribution with mean and variance proportional to the grid separation raised to the 2h power with h   d and where d  is the fractal dimension for the surface we could also calculate random offsets as the product of a surface roughness factor times the grid separation times a table lookup value for a gaussian value with mean and variance the elevation z  of the ground plane midposition m can be calculated using positions e and g or positions f and h alternatively we could calculate z  using the assigned elevations of the four ground plane corners  zm   by   2p  this process is repeated for each of the four new grid sections at each step until the grid separation becomes smaller than a selected value  triangular surface patches can be formed as the elevations are generated  shows the eight surface patches formed at the first subdivision step at each level of recursion the triangles are successively subdivided into smaller planar patches when the subdivision process is completed the patches are ren dered according to the position of the light sources the values for other illumina tion parameters and the selected color and surface texture for the terrain  the random midpoint displacement method can be applied to generate other components of a scene besides the terrain for instance we could use the same methods to obtain surface features for water waves or cloud patterns above a ground plane  controlling terrain topography one way to control the placement of peaks and valleys in a fractal terrain scene modeled with a midpoint displacement method is to constrain the calculated ele vations to certain intervals over different regions of the ground plane we can ac complish this by setting up a set of control surfaces over the ground plane as illus trated in  then we calculate a random elevation at each midpoint grid position on the ground plane that depends on the difference between the control elevation and the average elevation calculated for that position this procedure constrains elevations to be within a preset interval about the control surface ele vations   control surfaces over a ground plane control surfaces can be used to model existing terrain features in the rocky mountains or some other region by constructing the plane facets using the ele vations in a contour plot for a particular region or we could set the elevations for the vertices of the control polygons to design our own terrain features also control surfaces can have any shape planes are easiest to deal with but we could use spherical surfaces or other curve shaj we use the random midpoint displacement method to calculate grid eleva tions but now we select random values from a gaussian distribution where the mean  and standard deviation o are functions of the control elevations one way to set the values for  and o is to make them both proportional to the differ ence between the calculated average elevation and the predefined control eleva tion at each grid position for example for grid position e in  we set the mean and standard deviation as me  2p    oe  s land where zc is the control elevation for ground plane position e and s 1isa preset scaling factor small values for s say s  produce tighter conformity to the terrain envelope and larger values of s allow greater fluctuations in terrain height  to determine the values of the control elevations over a plane control sur face we first calculate the plane parameters a b c and d for any ground plane position x y  the elevation in the plane containing that control polygon is then calculated as zc   ax by d c incremental methods can then be used to calculate control elevations over posi tions in the ground plane grid to efficiently carry out these calculations we first subdivide the ground plane into a mesh of xy positions as shown in  then each polygon control surface is projected onto the ground plane we can then determine which grid positions are within the projection of the control poly gon using procedures similar to those in scan line area filling that is for each y scan line in the ground plane mesh that crosses the polygon edges we calcu late scan line intersections and determine which grid positions are in the interior of the projection of the control polygon calculations for the control elevations at those grid positions can then be performed incrementally as inj   axca c     ayb c  104   projection of a triangular control x surface onto the ground plane grid  section 18 fractal geometry methods  representations    a composite scene modeled with a random midpoint displacement method and planar control surfaces over a ground plane surface features for the terrain water and clouds were modeled and rendered separately then combined to form the composite picture  courtesy of eng kiat koh information technology institute republic of singapore  with ax and ay as the grid spacing in the x and y directions this procedure is particularly fast when parallel vector methods are applied to process the control plane grid positions   shows a scene constructed using control plar es to structure the surfaces for the terrain water and clouds above a ground plane surface render ing algorithms were then applied to smooth out the polygon edges and to pro vide the appropriate surface colors  self squaring fractals another method for generating fractal objects is to repeatedly apply a transfor mation function to points in complex space in two dimensions a complex num ber can be represented as z  x  iy where x and y are real numbers and i   in three dimensional and four dimensional space points are represented with quatemnions a complex squaring function f z is one that involves the calcu lation of z  and we can use some self squaring functions to generate fractal shapes  p depending on the initial position selected for the iteration repeated appli cation of a self squaring function will produce one of three possible results fig 94   the transformed position can diverge to infinity   the transformed position can converge to a finite limit point called an at tractor   the transformed position remains on the boundary of some object  as an example the nonfractal squaring operation f z  z in the complex plane transforms points according to their relation to the unit circle   any   possible outcomes of a self squaring transformation f z in the complex plane depending on the position of the selected initial position   e attractor  julia set point z whose magnitude  zi is greater than is transformed through a sequence of positions that tend to infinity a point with z  is transformed toward the coordinate origin points on the circle  z   remain on the circle for some functions the boundary between those points that move toward infinity and those that tend toward a finite limit is a fractal the boundary of the fracta object is called the julia set  in general we can locate the fractal boundaries by testing the behavior of selected positions if a selected position either diverges to infinity or converges to an attractor point we can try another nearby position we repeat this process until we eventually locate a position on the fractal boundary then iteration of the squaring transformation generates the fractal shape for simple transforma tions in the complex plane a quicker method for locating positions on the fractal curve is to use the inverse of the transformation function an initial point chosen on the inside or outside of the curve will then converge to a position on the frac tal curve    a function that is rich in fractals is the squaring transformation z f z  az  z  103 where a is assigned any constant complex value for this function we can use the inverse method to locate the fractal curve we first rearrange terms to obtain the quadratic equation  zt27 aa 106  the inverse transformation is then the quadratic formula     z fl  sft  vi 47a  107  using complex arithmetic operations we solve this equation for the real and imaginary parts of z as   locating the fractal boundary with the inverse self squaring function      a unit circle in the complex plane the nonfractal  complex squaring function f z   moves points that are inside the circle toward the origin while points outside the circle are moved farther away from the circle any initia point on the circle remains on the circle  chapter three dimensional object x  re z  x  v representations  im    yo im   a idiser re discr   diser  retain  108  with the discriminant of the quadratic formula as discr   a a few initial values for x and y say  can be calculated and discarded before we begin to plot the fractal curve also since this function yields two possible transformed x y positions we can randomly choose either the plus or the minus sign at each step of the iteration as long as im discr   whenever im discr  the two possible positions are in the second and fourth quadrants in this case x and y must have opposite signs the following procedure gives an implementation of this self squaring function and two example curves are plotted in    include math h  include values h  include graphics h  typedef struct  float x y  complex   float lambdamagsq discrmag complex discr  static firstpoint  true  if arstpoint    compute divided by lambda    ry ry pet aren a a     ma wo ra rt   e met  a4 il af x  x  ow roe i ve me l f  a  f dp  eres nur ek i ns   two fractal curves generated with the inverse of the function f z  az z by procedure sel fsquare  a a  3and b a   each curve is plotted with 000 points static complex fouroverlambda     void calculatepoint complex lambda complex   lamodamagsq  lambda x  lamb a x  lambda y   ambda fouroverlambda x   lambda x  lambdamagsq  yi fouroverlambda y   lambda y  lambdamagsq firstpoin  false  discr x   z x  fouroverlambda x  z y  fourover lambda y  diser y  z x  fouroverlambda y  z y  fouroverlambda x discrmag  sqrt discr x  discr x  diser y  discr y    update z checking to avoid the sqrt of a negative number  if discrmag  discr x   z x  else zz x  sqrt  discrmag  discr x   if discrmag  discr x  g y  qo else z y   sqrt  discrmag  discr x     por half the points use negative root placing point in quad rant  if random   maxint  z k   k z y  z y    when imaginary part of discriminant is negative point should lie in quadrant or so reverse sign of x   if discr y  z x  z x   pinish up calculation for the real part of z   ze x     x    void selfsquare complex lambda complex z int count  int k   skip the first few points  fcr k k l0 k  calculatepoint lambda  z  for k k count k   calculatepoint lambda  z   scale point to fit window and draw  i ppoint z x window_width window_height z y wwindow_height     _i a three dimensional plot in variables x y and a of the self squaring func tion f z  az z  with al  is given in  each cross sectional slice of this plot is a fractal curve in the complex plane  a very famous fractal shape is obtained from the mandelbrot set which is the set of complex values z that do not diverge under the squaring transforma tion  m  109    k   that is we first select a point z in the complex plane then we compute the trans formed position z  z at the next step we square this transformed position and add the original z value we repeat this procedure until we can determine    the function f z  az plotted in three dimensions with normalized a values plotted as the vertical axis  courtesy of alan norton 1bm research  whether or not the transformation is diverging the boundary of the convergence region in the complex plane is a fractal  to implement transformation 109 we first choose a window in the com plex plane positions in this window are then mapped to color coded pixel posi tions in a selected screen viewport   the pixel colors are chosen ac cording to the rate of divergence of the corresponding point in the complex plane under transformation 109 if the magnitude of a complex number is greater than then it will quickly diverge under this self squaring operation therefore we can set up a loop to repeat the squaring operations until either the magnitude of the complex number exceeds or we have reached a preset number of itera tions the maximum number of iterations is usually set to some value between and although lower values can be used to speed up the calculations with lower settings for the iteration limit however we do tend to lose some de tail along the boundary julia set of the convergence region at the end of the loop we select a color value according to the number of iterations executed by the loop for example we can color the pixel black if the iteration count is at the viewport imaginary  window  n        mapping positions in the complex plane to color coded pixel positions ona video monitor maximum value and we can color the pixel red if the iteration count is near other color values can then be chosen according to the value of the iteration count within the interval from to the maximum value by choosing different color mappings we can generate a variety of dramatic displays for the mandel brot set one choice of color coding for the set is shown in  a  an algorithm for displaying the mandelbrot set is given in the following procedure the major part of the set is contained within the following region of the complex plane  25  re z  75  25  im   25 we can explore the details along the boundary of the set by choosing successively smaller window regions so that we can zoom in on selected areas of the display   shows a color coded display of the mandelbrot set and a series of zooms that illustrate some of the features of this remarkable set  section 18 fractat geometry methods   zooming in on the mandelbrot set starting with a display of the mandelbrot set a  we zoom in on selected regions b through f  the white box outline shows the window area selected for each successive zoom  courtesy of brian evans vanderbilt university   include graphics h  typedef struct  flcat  y  yomplex j comp ex complexsquare lomplex c   complex csq  csq x  esq y   return  csq   q xo  int iterate complex cinit int maxiteri  complex z  int cnt  quit when z z 77 wnile  z x  x  ty  z y     ent  maxiter    complexsquare zz  z x zinit x z y  zinit y  ontt   return cnt   void mandelbrot int nx int ny int maxiter float realmin float realmax float im gmin float imagmax  float realinc  realmax  realmin  nx float imaginc  imagmax  imagmin  ny complex z  int x yi int cont  for x c x realmin x nx x  z x realinc for y z ysimagmin y ry yt  z y simagiinc  ent  iterate z maxiter af cnt  maxiter setcolor black  else setcolor cnt  ppoint x y    complex function transformations such as eq 105 can be extended to produce fractal surfaces and fractal solids methods for generating these objects use quaternion representations appendix a for transforming points in three dimensional and four dimensional space a quaternion has four components one real part and three imaginary parts and can be represented as an extension of the concept of a number in the complex plane  q stiat jb ke 710  wherei  j  k   the real partsisalsoreferred toas the scalar part of the quater nion and the imaginary terms are called the quaternion vector part v  a b c  using the rules for quaternion multiplication and addition discussed in ap pendix a we can apply self squaring functions and other iteration methods to generate surfaces of fractal objects instead of fractal curves a basic procedure is to start with a position inside a fractal object and generate successive points from that position until an exterior diverging point is identified the previous inte rior point is then retained as a surface point neighbors of this surface point are then tested to determine whether they are inside converging or outside diver rging  any inside point that connects to an outside point is a surface point in this way the procedure threads its way along the fractal boundary without gen erating points that are too far from the surface when four dimensional fractals are generated three dimensional slices are projected onto the two dimensional surface of the video monitor  procedures for generating self squaring fractals in four dimensional space require considerable computation time for evaluating the iteration function and for testing points each point on a surface can be represented as a small cube giv ing the inner and outer limits of the surface output from such programs for the three dimensional projections of the fractal typically contain over a million ver tices for the surface cubes display of the fractal objects is performed by applying illumination models that determine the lighting and color for each surface cube hidden surface methods are then applied so that only visible surfaces of the ob jects are displayed figures 101 and 102 show examples of self squaring four dimensional fractals with projections into three dimensions  self inverse fractals various geometric inversion transformations can be used to create fractal shapes again we start with an initial set of points and we repeatedly apply nonlinear inversion operations to transform the initial points into a fractal  as an example we consider a two dimensiona inversion transformation with respect to a circle with radius r and center at position py  x5 yo  any point p outside the circle will be inverted to a position p inside the circle fig 103 with the transformation  p pxp p   111  section 18 fractal geometry methods    three dimensional projections of four dimensional fractals generated with the self squaring quaternion function f q  aq q  a a  475  9061i and b a  57   courtesy of alan norton ibm research   chapter three dimensional object representations    a three dimensional surface projection of a four dimensional object generated with the self squaring quaternion function f q  q   courtesy of alan norton ibm research   inverting point p to a position p inside a circle with radius r  reciprocally this trasformation inverts any point inside the circle to a point out side the circle both p and p lie on a straight line passing through the circle cen ter po  if the coordinates of the two points are p  x y and p     y  we can write eq 111 as  ce xp  yp     yp   pf also since the two points lie along a line passing through the circle center we have y  y x  x9   y    x  x9  therefore the transformed coordi nate values are px  xx ry  yo   x   _  y  o x  xp  y  h    mo x  xo  y   112   illustrates the inversion of points along another circle bound ary as long as the circle to be inverted does not pass through p it will transform to another circle but if the circle circumference passes through pp the circle _ originat circle inverted a circle     inversion of a circle with respect to another circle  transforms to a straight line conversely points along a straight line not passing through p invert to a circle thus straight lines are invariant under the inversion transformation also invariant under this transformation are circles that are or thogonal to the reference circle that is the tangents of the two circles are perpen dicular at the intersection points  we can create various fractal shapes with this inversion transformation by starting with a set of circles and repeatedly applying the transformation using different reference circles similarly we can apply circle inversion to a set of straight lines similar inversion methods can be developed for other objects and  we can generalize the procedure to spheres planes or other shapes in three di mensional space  a number of other procedural methads have been developed for generating ob ject details shape grammars are sets of production rules that can be applied to an initial object to add layers of detail that are harmonious with the original shape transformations can be applied to alter the geometry shape of the object or the transformation rules can be applied to add surface color or surface texture detail  given a set of production rules a shape designer can then experiment by applying different rules at each step of the transformation from a given initial ob ject to the final structure  shows four geometric substitution rules for altering triangle shapes the geometry transformations for these rules can be b he rule rule    four geometric substitution mules for subdividing and altering the shape of an equilateral triangle  chapter10 written algorithmically by the system based on an input picture drawn with a three dimensional object production rule editor that is each rule can be described graphically by show representations ing the initial and final shapes implementations can then be set up in mathemat  ica or some other programming language with graphics capability an application of the geometric substitutions in  is given in fig 106 where  d is obtained by applying the four rules in succession starting with the initial triangle in  a   shows another shape created with triangle substitution rules   b  c   an equilateral triangle a is converted to shape b using substitution mules and in fig 105 rule is then used to convert b into shape c  which in  turn is transformed to d using tule  copyright  andrew glassner xerox parc palo alto research center    a design created with geometric substitution rules for altering triangle shapes  copyright  andrew glassner xerox parc palo alto research center   ts   a design created with geometric substitution rules for altering prism shapes the initial shape for this design was a representation of rubik s snake  copyright  andrew glassner xerox parc palo alto research center   three dimensional shape and surface features are transformed with similar operations  shows the results of geometric substitutions applied to polyhedra the initial shape for the objects shown in  is an icosahe dron a polyhedron with faces geometric substitutions were applied to the plane faces of the icosahedron and the resulting polygon vertices were projected to the surface of an enclosing sphere  another example of using production rules to describe the shape of objects is l grammars or graftals these rules provide a method for describing plants for _ instance the topology of a tree can be described as a trunk with some attached branches and leaves a tree can then be modeled with rules to provide a particu lar connection of the branches and the leaves on the individual branches the geometrical description is then given by placing the object structures at particular coordinate positions   shows a scene containing various plants and trees con structed with a commercial plant generator package procedures in the software for constructing the plants are based on botanical laws   designs created on the surface of a sphere using triangle substitution tules applied to the plane faces of an icosahedron followed by projections to the sphere surface  copyright  andrew classner xerox parc palo alto research center     realistic scenery generated with the tdi amap software package which can generate over varieties of plants and trees using procedures based on botanical laws  courtesy of thomson digital image  20  particle systems a method for modeling natural objects or other irregularly shaped objects that exhibit fluid like properties is particle systems this method is particularly good for describing objects that change over time by flowing billowing spatter ing or expanding objects with these characteristics include clouds smoke fire fireworks waterfalls water spray and clumps of grass for example particle sys tems were used to model the planet explosion and expanding wall of fire due to the genesis bomb in the motion picture star trek i the wrath of khan  random processes are used to generate objects within some defined region of space and to vary their parameters over time af some random time each ob ject is deleted during the lifetime of a particle its path and surface characteris tics may be color coded and displayed  particle shapes can be small spheres ellipsoids boxes or other shapes the size and shape of particles may vary randomly over time also other properties such as particle transparency color and movement all can vary randomly in some applications particle motion may be controlled by specified forces such as a gravity field  as each particle moves its path is plotted and displayed in a particular color for example a fireworks pattern can be displayed by randomly generating particles within a spherical region of space and allowing them to move radially section 21 partical systems   modeling fireworks as a particle system with particles traveling radially outward from the center of the sphere  outward as in  the particle paths can be color coded from red to yel low for instance to simulate the temperature of the exploding particles simi larly realistic displays of grass clumps have been modeled with trajectory par ticles   that are shot up from the ground and fall back to earth under gravity in this case the particle paths can originate within a tapered cylinder and might be color coded from green to yellow   illustrates a particle system simulation of a waterfall the water particles fall from a fixed elevation are deflected by an obstacle and then splash up from the ground different colors are used to distinguish the particle   modeling a clump of grass by firing particles upward within a tapered cylinder the particle paths are parabolas due to the downward force of gravity     simulation of the behavior of a waterfall hitting a stone circle  the water particles are deflected by the stone and then splash up from the ground  courtesy of m brooks and t l   howard department of computer scrence university of manchester   chapter three dimensional object representations paths at each stage an example of an animation simulating the disintegration of an object is shown in  the object on the left disintegrates into the par ticle distribution on the right a composite scene formed with a variety of repre sentations is given in  the scene is modeled using particle system grass fractal mountains and texture mapping and other surface rendering pro cedures   an object disintegrating into a cloud of particles  courtesy of autodesk inc    a scene entitled road to point reyes showing particle system grass  fractal mountains and texture mapped surfaces  courtesy of pixar copyright  pixar   a nonrigid object such as a rope a piece of cloth or a soft rubber ball can be represented with physically based modeling methods that describe the behavior of the object in terms of the interaction of external and internal forces an accu rate discription of the shape of a terry cloth towel drapped over the back of a chair is obtained by considering the effect of the chair on the fabric loops in the cloth and the interaction between the cloth threads a common method for modeling a nonrigid object is to approximate the ob ject with a network of point nodes with flexible connections between the nodes one simple type of connection is a spring  shows a section of a two dimensional spring network that could be used to approximate the behavior of a sheet of rubber similar spring networks can be set up in three dimensions to model a rubber ball or a block of jello for a homogeneous object we can use identical springs throughout the network if we want the object to have different properties in different directions we can use different spring properties in differ ent directions when external forces are applied tc a spring network the amount of stretching or compression of the individual springs depends on the value set for the spring constant k also called the force constant for the spring  horizontal displacement x of a node position under the influence of a force f is illustrated in  if the spring is not overstretched we can closely approximate the amount of displacement x from the equilibrium position using hooke s law  fo  f  kx ifo t73  where f is the equal and opposite restoring force of the spring on the stretched node this relationship holds also for horizontal compression of a spring by an amount x and we have similar relationships for displacements and force compo nents in the y and z directions  if objects are completely flexible they return to their original configuration when the external forces are removed but if we want to model putty or some other deformable object we need to modify the spring characteristics so that the springs do not return to their original shape when the external forces are re moved another set of applied forces then can deform the object ir some other way    k   i  unstretched pagsiton  f  an external force f pulling on ore end of a spring with the other end rigidly fixed   figure hed lo a two dimensional spring network constructed with identical spring constants k  chapter three dimensional object representations  instead of using springs we can also model the connections between nodes with elastic materials then we minimize strain energy functions to determine ob ject shape under the influence of external forces this method provides a better model for cloth and various energy functions have been devised to describe the behavior of different cloth materials  to model a nonrigid object we first set up the external forces acting on the object then we consider the propagation of the forces throughout the network representing the object this leads to a set of simultaneous equations that we must solve to determine the displacement of the nodes throughout the network   shows a banana peel modeled with a spring network and the scene in  shows examples of cloth modeling using energy functions with a texture mapped pattern on one cloth by adjusting the parameters in a network using energy function calculations different kinds of cloth can be mod eled  illustrates models for cotton wool and polyester cotton mate rials draped over a table  physically based modeling methods are also applied in animations to more accurately describe motion paths in the past animations were often specified using spline paths and kinematics where motion parameters are based only on  modeling the flexible behavior of a banana peel with a spring network  copyright  david laidlaw john snyder adam woodbury and alan barr computer graphics lab california institute of technology    modeling the flexible behavior of cloth draped over furniture using energy function minimization  copyright  gene greger and david e breen design research center rensselaer polytechnic institute  iba ud   modeling the characteristics of a cotton  b wool and c polyester cotton using energy function minimization  copyright  david e breen and donald h house design research center rensselaer polytechnic institute  position and velocity physically based modeling describes motion using dynam ical equations involving forces and accelerations animation descriptions based on the equations of dynamics produce more realistic motions than those based on the equations of kinematics  the use of graphical methods as an aid in scientific and engineering analysis is commonly referred to as scientific visualization this involves the visualization of data sets and processes that may be difficult or impossible to analyze without graphical methods for example visualization techniques are needed to deal with the output of high volume data sources such as supercomputers satellite and spacecraft scanners radio astronomy telescopes and medical scanners mil lions of data points are often generated from numerical solutions of computer simulations and from observational equipment and it is difficult to determine trends and relationships by simply scanning the raw data similarly visualization techniques are useful for analyzing processes that occur over a long time period or that cannot be observed directly such as quantum mechanical phenomena and special relativity effects produced by objects traveling near the speed of light scientific visualization uses methods from computer graphics image pro cessing computer vision and other areas to visually display enhance and ma nipulate information to allow better understanding of the data similar methods employed by commerce industry and other nonscientific areas are sometimes re ferred to as business visualization  data sets are classified according to their spatial distribution and according to data type two dimensional data sets have values distributed over a surface and three dimensional data sets have values distributed over the interior of a cube a sphere or some other region of space data types include scalars vectors tensors and multivariate data  visual representations for scalar fields a scalar quantity is one that has a single value scalar data sets contain values that may be distributed in time as well as over spatial positions also the data section 22 visuatization of data sets  chapter three dimensional object representations  values may be functions of other scalar parameters some examples of physical scalar quantities are energy density mass temperature pressure charge resis tance reflectivity frequency and water content  a common method for visualizing a scalar data set is to use graphs or charts that show the distribution of data values as a function of other parameters such as position and time if the data are distributed over a surface we could plot the data values as vertical bars rising up from the surface or we can interpolate the data values to display a smooth surface pseudo color methods are also used to distinguish different values in a scalar data set and color coding techniques can be combined with graph and chart methods to color code a scalar data set we choose a range of colors and map the range of data values to the color range for example blue could be assigned to the lowest scalar value and red could be assigned to the highest value  gives an example of a color coded surface plot color coding a data set can be tricky because some color combina tions can lead to misinterpretations of the data  contour plots are used to display isolines lines of constant scalar value for a data set distributed over a surface the isolines are spaced at some convenient interval to show the range and variation of the data values over the region of space a typical application is a contour plot of elevations over a ground plane usually contouring methods are applied to a set of data values that is distributed over a regular grid as in  regular grids have equally spaced grid lines and data values are known at the grid intersections numerical solutions of computer simulations are usually set up to produce data distributions on a regu lar grid while observed data sets are often irregularly spaced contouring meth ods have been devised for various kinds of nonregular grids but often nonregu lar data distributions are converted to regular grids a two dimensional contouring algorithm traces the isolines from cell to cell within the grid by check ing the four corners of grid cells to determine which cell edges are crossed by a   a financial surface plot showing stock growth potential during the october stock market crash red indicates high returrs and the plot shows that low growth stocks performed better in the crash  courtesy of eng kiat koh information technology institute republic of singapore  i rn nn nn ee ee  _  re rt  i a regular two dimensional grid yt a with data values at the intersection ee _ wa of the grid lines the x grid lines have a constant ax spacing and the y grid lines have a constant ay vo ett ea mettre ne nee spacing where the spacing in the x c wee  co a and y directions may not be the ax same particular isoline the isolines are usually plotted as straight line sections across each cell as illustrated in  sometimes isolines are plotted with spline curves but spline fitting can lead to inconsistencies and misinterpretation of a data set for example two spline isolines could cross or curved isoline paths might not be a true indicator of the data trends since data values are known only at the cell corners contouring packages can allow interactive adjustment of iso lines by a researcher to correct any inconsistencies an example of three overlap ping color coded contour plots in the xy plane is given in  and fig 125 shows contour lines and color coding for an irregularly shaped space  for three dimensional scalar data fields we can take cross sectional slices and display the two dimensional data distributions over the slices we could ei ther color code the data values over a slice or we could display isolines visual ization packages typically provide a slicer routine that allows cross sections to be   color coded contour plots for three data sets within the same region of the xy plane  courtesy of the national center for supercomputing applications university of mlinois at urbana champaign     color coded contour plots over the surface of an apple core shaped region of space  courtesy of greg nielson department of computer science and engineering arizona state university  section 22 visualization of data sets   e     the path of an isoline across five grid cells   cross sectional slices of a three  dimensional data set  courtesy of spyglass inc  b ve ebar  taken at any angle  shows a display generated by a commercial slicer dicer package  instead of looking at two dimensional cross sections we can plot one or more isesurfaces which are simply three dimensional contour plots fig   when two overlapping isosurfaces are displayed the outer surface is made transparent so that we can view the shape of both isosurfaces constructing an isosurface is similar to plotting isolines except now we have three dimensional grid cells and we need to check the values of the eight corners of a cell to locate sections of an isosurface  shows some examples of isosurface inter sections with grid cells isosurfaces are modeled with triangle meshes then sur face rendering algorithms are applied to display the final shape   an isosurface generated from a set of watet content values obtained from a numerical model of a thunderstorm  courtesy of bob withelmson department of atmospheric sciences and national center for supercomputing applications university of hlinois at urbana champaign    isosurface intersections with grid cells modeled with triangle patches  volume rendering which is often somewhat like an x ray picture is an other method for visualizing a three dimensional data set the interior informa tion about a data set is projected to a display screen using the ray casting meth ods introduced in section 15 along the ray path from each screen pixel fig 129  interior data values are examined and encoded for display often data values at the grid positions are averaged so that one value is stored for each voxel of the data space how the data are encoded for display depends on the ap plication seismic data for example is often examined to find the maximum and minimum values along each ray the values can then be color coded to give in formation about the width of the interval and the minimum value in medical ap plications the data values are opacity factors in the range from to for the tis sue and bone layers bone layers are completely opaque while tissue is somewhat transparent low opacity  along each ray the opacity factors are accu mulated until either the total is greater than or equal to or until the ray exits at the back of the three dimensional data grid the accumulated opacity value is then displayed as a pixel intensity level which can be gray scale or color figure 130 shows a volume visualization of a medical data set describing the struc ture of a dog heart for this volume visualization a color coded plot of the dis tance to the maximum voxel value along each pixel ray was displayed  data volume   volume visualization of a regular cartesian data grid using ray casting to examine interior data values  volume visualization of a data set for a dog heart obtained by      eeee   plotting the color coded distance to the maximum voxel value for each pixel  courtesy of patrick moran and clinton potter national center for supercomputing applications university of himois at urbana champaign   section 22 visualization of data sets three dimensional object  chapter representations visual representations for vector fields a vector quantity v in three dimensional space has three scalar values v  v  v  one for each coordinate direction and a two dimensional vector has two components v  v  another way to describe a vector quantity is by giving its magnitude v  and its direction as a unit vector u as with scalars vector quan tities may be functions of position time and other parameters some examples of physical vector quantities are velocity acceleration force electric fields magnetic fields gravitational fields and electric current  one way to visualize a vector field is to plot each data point as a small arrow that shows the magnitude and direction of the vector this method is most often used with cross sectional slices as in  since it can be difficult to see the data trends in a three dimensional region cluttered with overlapping ar rows magnitudes for the vector values can be shown by varying the lengths of the arrows or we can make all arrows the same size but make the arrows differ ent colors according to a selected color coding for the vector magnitudes   arrow representation for a vector field over cross sectional slices  courtesy of the national center for supercomputing applications university of illinois at urbana champaign  we can also represent vector values by plotting field lines or streamlines field lines are commonly used for electric magnetic and gravitational fields the magnitude of the vector values is indicated by the spacing between field lines and the direction is the tangent to the field as shown in  an example of a streamline plot of a vector field is shown in  streamlines can be displayed as wide arrows particularly when a whirlpool or vortex effect is pre sent an example of this is given in  which displays swirling airflow patterns inside a thunderstorm for animations of fluid flow the behavior of the vector field can be visualized by tracking particles along the flow direction an ee hi i  t ther field line representation for a lower vector data set  section 22  visualization of data sets   visualizing airflow around a cylinder with a hemispherical cap that is tilted slightly relative to the incoming direction of the airflow  courtesy of m gerald yamasaki j huiltquist and sam uselton nasa ames research center    twisting airflow patterns visualized with wide streamlines inside a transparent isosurface plot of a thunderstorm  courtesy of bob withelmson department of atmospheric sciences and nafional center far supercomputing applications university of hlinois at urbana champaign    airflow patterns visualized with both streamlines and particle  motion inside a transparent isosurface plot of a thunderstorm rising sphere particles are colored orange and falling sphere particles are blue  courtesy of bob wilhelmson department of atmospheric sciences and national center for supercomputing applications university of llinots at urbana champaign   example of a vector field visualization using both streamlines and particles is shown in   sometimes only the magnitudes of the vector quantities are displayed this is often done when multiple quantities are to be visualized at a single position or when the directions do not vary much in some region of space or when vector directions are of less interest  visual representations for tensor fields a tensor quantity in three dimensional space has nine components and can be represented with a by matrix actually this representation is used for a sec ond order tensor and higher order tensors do occur in some applications particu larly general relativity some examples of physical second order tensors are chapter three dimensional object representations stress and strain in a material subjected to external forces conductivity or resis tivity of an electrical conductor and the metric tensor which gives the proper ties of a particular coordinate space the stress tensor in cartesian coordinates for example can be represented as  gy ow oy op 114 ox ty oo  tensor quantities are frequently encountered in anisotropic materials which have different properties in different directions the x xy and xz elements of the conductivity tensor for example describe the contributions of electric field components in the x y and z directions to the current in the x direction usually physical tensor quantities are symmetric so that the tensor has only six distinct values for instance the xy and yx components of the stress tensor are the same  visualization schemes for representing all six components of a second order tensor quantity are based on devising shapes that have six parameters one graphical representation for a tensor is shown in  the three diagonal elements of the tensor are used to construct the magnitude and direction of the arrow and the three off diagonal terms are used to set the shape and color of the elliptical disk  instead of trying to visualize all six components of a tensor quantity we can reduce the tensor to a vector or a scalar using a vector representation we can simply display a vector representation for the diagonal elements of the tensor and by applying tensor contraction operations we can obtain a scalar representa tion for example stress and strain tensors can be contracted to generate a scalar strain energy density that can be plotted at points in a material subject to external forces    visual representations for multivariate data fields in some applications at each grid position over some region of space we may have multiple data values which can be a mixture of scalar vector and even ten    representing stress and strain tensors with an elliptical disk and a rod over the surface of a stressed material  courtesy of bob haber national center for supercomputing applications untversity of ulinais at urbana champaign     representing stress and strain tensors with a strain energy density plot in a visualization of crack propagation on the surface of a stressed material  courtesy of bob haber national center for supercomputing applications university of illinois at urbana champaign  sor values as an example for a fluid flow problem we may have fluid velocity temperature and density values at each three dimensional position thus we have five scalar values to display at each position and the situation is similar to displaying a tensor field  a method for displaying multivariate data fields is to construct graphical objects sometimes referred to as glyphs with multiple parts each part of a glyph represents a physical quantity the size and color of each part can be used to display information about scalar magnitudes to give directional information for a vector field we can use a wedge a cone or some other pointing shape for the glyph part representing the vector an example of the visualization of a mul tivariate data field using a glyph structure at selected grid positions is shown in   ligure 138 one frame from an animated visualization of a multivariate data field using glyphs the wedge shaped part of the glyph indicates the direction of a vector quantity at each point  courtesy of the natranal center for supercomputing applications university of hiunais at lirbana champaign  visualization of data sets   chapter three dimenstanal object representations  summary many representations have been developed for modeling the wide variety of ob jects that might be displayed in a graphics scene  standard graphics objects are those represented with a surface mesh of polygon facets polygon mesh represen tations are tvpically derived from other representations  surface functions such as the quadrics are used to describe spheres and other smooth surfaces for design applications we can use superquadrics splines or blobby objects to represent smooth surface shapes in addition can struction techniques such as csg and sweep representations are useful for de signing compound object shapes that are built up from a set of simpler shapes and interior as well as surface information can be stored in octree representa tions descriptions for natural objects such as trees and clouds and other irregu larly shaped objects can be specified with fractals shape grammars and particle systems finally visualization techniques use graphic represcntations to display numerical or other types of data sets the various types of numerical data in clude sealar vector and tensor values also many scientific visualizations require methods for representing multivariate data sets that contain a combination of the various data types  references a detailed discuss on of superquadrics is contained in barr  for more information on blobby object niodeling see blinn  the metaball mode is discussed in nishimura  and the soft object model is discussed in wyville ww lle and mcpheeters  sources of information on parametric curve and surface representations include bezie  burt and adelsor  barsky   kochanek and bartels  farouki and hinds  huitric and nahas  mortenson  farin  and ravers and adams  octrees and quadtrees cre discussed bys doctor  yamaguchi kuni and fujimura  and bs carlbom chakravarty and vanderschel  solic modeling references include casate and staten and requicha and rassizrac  for further information on iractal representations see mandellrot 1982  fournier fussel and carpenter  noston  peitgen and richter  peitgen and saupe  koh and hearn  and barnsley  skape grammars are disc ussed in glassner  and particle systems are discussed in reeves  a discussion at physically based modeling is given in barzel   a general introduction to visualization methods is given ir hearn and baker  addi tonal intormation on specific v sualization methods can be found in sabin  lorensen and cline  drebin carpenter and hanrahan  sabella lipson and keeler  frenkel  nielson shriver and rosenblum and ntelson  guidelines tor visual displays of information are given in tute   exercises hov set ap geomuetac data tables asin fig for aun cube  setup weanmetre data tables tora unit cube using only cas vertex and polygon tables and bia single poivgon table compare the two methods for representing the unit cube with a representation using three data tables and esamate storage requirenrents tor gach 10  11  12  13  14  15  16  17  18  19 20 21 22  23  24  25  26  27  28   define an efficient polygon representation for a cylinder justify your choice of repre  sentation   set up a procedure for establishing polygon tables for any input set of data points defining an object  devise routines for checking the data tables in  for consistency and com  pleteness   write a program that calculates parameters a b c and bd for any set of three di  mensional plane surfaces defining an object   given the plane parameters a b c and d for all surfaces of an object devise an al  gorithm to determine whether any specified point is inside or outside the object   how would the values for parameters a 8b c and d in the equation of a plane sur  face have to be altered if the coordinate reference is changed from a right handed system to a lefi handed system   sel up an algorithm for converting any specified sphere ellipsoid or cylinder to a polygon mesh representation  set up an algorithm for converting a specified superellipsoid to a polygon mesh rep resentation  set up an algorithm for converting a metaball representation to a palygon mesh rep resentation write a routine to display a two dimensional cardinal spline curve given an input set of contro points in the xy plane  write a routine to display a two dimensional kochanek bartels curve given an input set of control points in the xy plane  determine the quadratic b zier blending functions for three contro points plot each function and label the maximum and minimum values  determine the b zier blending functions for five control points plot each function and label the maximum and minimum values   write an efficient routine to display two dimensional cubic b zier curves given a set of four control points in the xy plane  write a routine to design two dimensional cubic b zier curve shapes that have first order piecewise continuity use an interactive technique for selecting control point positions in the xy plane for each section of the curve  write a routine to design two dimensional cubic b zier curve shapes that have sec and order piecewise continuity use an interactive technique for selecting control point positions in the xy plane for each section of the curve  write a routine to display a cubic b zier curve using a subdivision method determine the blending functions for uniform periodic b spline curves for d  determine the blending functions for uniform periodic b spline curves for d  write a program using forward differences to calculate points along a two dimen sional uniform periodic cubic b spline curve given an input set of control points write a routine to display any specified conic in the xy plane using a rational b zier spline representation  write a routine to display any specified conic in the xy plane using a rational b spline representation  develop an algorithm for calculating the normal vector to a bezier surface at the point p u vv  write a program to display any specified quadratic curve using forward differences to calculate points along the curve path  write a program to display any specified cubic curve using forward differences lo calculate points along the curve path  derive expressions for calculating the forward differences for any specified quadratic curve exercises chaater  three dimensianal object represertations 31  32  33 34 35  36  38  39  40  41 42 43  44  45  46 47  48  49  50 5t 52  derive expressions tor calculaung the forward differences for any specified cubic curve  set up procedures ter generating the description of a three dimensional object from input parameters thai define the object in terms of a translational sweep  develop procedures for generating the description of a three dimensiona object using input parameters that define the object in terms of a rotational sweep devise an algorithm tar generating solid objects as cornbinations of three dimen sional primitive shapes each defined as a set of surfaces using cunstructive solid geometsy methods  develop an algorithm for performing constructive solid geametry modeling using a primitive set of solids defined in octree structures develop an algorithm for encoding a two dimensional scene as a quadiree represen tation  set up an algorithm for loading a quadtree representation of a scene into a frame buffer for display of tne scene  write a routine to convert the polygon definition of a three dimensional object into an octree representation   using the random midpoint displacement method write a routine to create a moun  tain outline starting with a horizontal fine in the xy plane write a routine to calculate elevations above a ground plane using the random mid point cisplacement method  write a program for 2enerating a iractal snowtlake koch curve for any given num ber of iteratians write a program to generate a fractal curve far a specified number af iterations using one of the generators in  of 72 what is the fractal dimension of vour curve  write a program to generate fractal curves using the self squaring function mz   a where vis any selected complex constant write a program a generate fractal curves using the self squaring tunction fqx  kz  ti where ro w t  write a routine to interactively select diflerent color combinatians for displaying the mandelbrot set  write program to interactively select ary rectangular egion of the mandelbrot set and to 200m in on the selected region  write a routine to implement point inversion eq 112 tor any specified circle and any given point position  devise a set of geometric substitution rules for altering the shape of an equilateral tri  angle  write a program to display the stages in the conversion of an equilateral triangle into another shape given a set of geometric substitulion rules write a program to model an exploding firecracker in the xy plane using a particle system  devise an algorithm for modeling a rectangle as a nonrigid body using identical springs for the four sides of the rectangle  write routine to visualize a two dimensional scalar data set using pseudo color methods write a routine to visualize a two dimensional scalar data set using contour lines write a routine to visualize a two dimensional vecto data set using an arrow repre sentation for the vector values make a arrows the same length but display the ar rows with different cclors to represent the different vector magnitudes chapter  three dimensional geometric and modeling transformations  bie sce e coli thymidytate synthase wm jfm rms  tren hg a ered     m ethods for geometric transformations and object modeling in three di mensions are extended from two dimensional methods by including considerations for the z coordinate we now translate an object by specifying a three dimensional translation vector which determines how much the object is to be moved in each of the three coordinate directions similarly we scale an object with three coordinate scaling factors the extension for three dimensional rota tion is less straightforward when we discussed two dimensional rotations in the xy plane we needed to consider only rotations about axes that were perpendicu lar to the xy plane in three dimensional space we can now select any spatial ori entation for the rotation axis most graphics packages handle three dimensional rotation as a composite of three rotations one for each of the three cartesian axes alternatively a user can easily set up a general rotation matrix given the orienta tion of the axis and the required rotation angle as in the two dimensional case we express geometric transformations in matrix form any sequence of transfor mations is then represented as a single matrix formed by concatenating the ma trices for the individual transformations in the sequence  in a three dimensional homogeneous coordinate representation a point is trans  lated   from position p   y z to position p   x  y  z  with the ma trix operation x x efrfoor e   ae 000 or p t p  parameters t  f  and t  specifying translation distances for the coordinate direc tions x y and z are assigned any real values the matrix representation in eq is equivalent to the three equations xosut t yorytth  th nn   t   axis etx yz     te ltt tl  a xaxis translating a point with translation axis vector t  t  ty t   y axis ei yi z tait t t   translating an object with z axis translation vector t  an object is translated in three dimensions by transforming each of the defining points of the object for an object represented as a set of polygon sur faces we translate each vertex of each surface   and redraw the polygon facets in the new position  we obtain the inverse of the translation matrix in eq by negating the translaticn distances t  ty and t  this produces a translation in the opposite di rection and the product of a translation matrix and its inverse produces the iden tity matrix   to generate a rotation transformation for an object we must designate an axis of rotation about which the object is to be rotated and the amount of angular rota tion unlike two dimensional applications where all transformations are carried out in the xy plane a three dimensional rotation can be specified around any line in space the easiest rotation axes to handle are those that are parallel to the coor dinate axes also we can use combinations of coordinate axis rotations along with appropriate translations to specify any general rotation  by convention positive rotation angles produce counterclockwise rotations about a coordinate axis if we are looking along the positive half of the axis to ward the coordinate origin   this agrees with our earlier discussion of rotation in two dimensions where positive rotations in the xy plane are counter clockwise about axes parallel to the z axis  coordinate axes rotations the two dimensional z axis rotation equations are easily extended to three di mensions  section rotation chapter b three dimensional geometric and modeling transformatons   b    positive rotation directions a about the coordinate axes are counterc ockwise when looking toward the origin from a positive io coordinate position on each axis  x  xcos  ysin  xsin ycos uil d    ze parameter specifies the rotation angle in homogeneous coordinate form the three dimensional z axis rotation equations are expressed as x cos sing o x   sa wey _  sin  cos oy  y es z 0 zz  section   pection ire rotation x   rotation of an object about the z zz axis which we can write more compactly as p r  p   illustrates rotation of an object about the z axis  transformation equations for rotations about the other two coordinate axes can be obtained with a cyclic permutation of the coordinate parameters x y and z in eqs  that is we use the replacements kayla   as illustrated in  substituting permutations in eqs  we get the equations for an x axis rotation y  ycos  zsin e z ysind  z cost  v x which can be written in the homogeneous coordinate form  x 0 x yo _ cos sine y aren sin cos z  0 y x    sx x fy y z  a a figure  cyclic permutation of the cartesian coordinate axes to produce the three sets of coordinate axis rotation equations chapter ye three dimensional geometric  and modeling transtormations   rotation of an object about the x x axis or p  r   p 10  rotation of an object around the x axis is demonstrated in fig  cyclically permuting coordinates in eqs give us the transformation equations for a y axis rotation   zc0s  x sing x zsin xcos gt yr  the matrix representation for y axis rotation is    x cos qo sin o x   _  y eld z sind cosd z 0 or p r   p iyfet3  an example of y axis rotation is shown in   yy ba a ae x  axis   rotation of an object about the  a an inverse rotation matrix is formed by replacing the rotation angle  by  negative values for rotation angles generate rotations in a clockwise direc tion so the identity matrix is produced when any rotation matrix is multiplied by its inverse since anly the sine function is affected by the change in sign of the ro tation angle the inverse matrix can also be obtained by interchanging rows and columns that is we can calculate the inverse of any rotation matrix r by evalu ating its transpose r7  r  this method for obtaining an inverse matrix holds also for any composite rotation matrix  general three dimensional rotations a rotation matrix for any axis that does not coincide with a coordinate axis can be set up as a composite transformation involving combinations of translations and the coordinate axes rotations we obtain the required composite matrix by first setting up the transformation sequence that moves the selected rotation axis onto one of the coordinate axes then we set up the rotation matrix about that co ordinate axis for the specified rotation angle the last step is to obtain the inverse transformation sequence that returns the rotation axis to its original position  in the special case where an object is to be rotated about an axis that is par allel to one of the coordinate axes we can attain the desired rotation with the fol lowing transformation sequence  translate the object so that the rotation axis coincides with the parallel coor dinate axis  perform the specified rotation about that axis  translate the object so that the rotation axis is moved back to its original po sition  the steps in this sequence are illustrated in  any coordinate position p on the object in this figure is transformed with the sequence shown as p t r   t p where the composite matrix for the transformation is r  t r t which is of the same form as the two dimensional transformation sequence for rotation about an arbitrary pivot point  when an object is to be rotated about an axis that is not parallel to one of the coordinate axes we need to perform some additional transformations in this case ve also need rotations to align the axis with a selected coordinate axis and to bring the axis back to its original orientation given the specifications for the rotation axis and the rotation angle we can accomplish the required rotation in five steps   translate the object so that the rotation axis passes through the coordinate origin no  rotate the object so that the axis of rotation coincides with one of the caor dinate axes  perform the specified rotation about that coordinate axis  section ratation chaper three dimensianal geometric and modeling transformations   a qriginal position o object tc rotate object through angle    l0lgz  ilion  axis  r may be z x n  b translate rotation axis onto x axis id translate rotation axis to original position  sequence of transformations for rotating an object about an axis that is parallel to the x axis  apply inverse rotations to bring the rotation axis back to ts original orien tation  apply the inverse translation to bring the rotation axis back to its original position  we can transform the rotation axis onto any of the three coordinate axes the z axis is a reasonable choice and the following discussion shows how to set up the transformation matrices for getting the rotation axis onto the z axis and returning the rotation axis to its original position    a rotation axis can be defined with two coordinate positions as in fig  or with one coordinate point and direction angles er direction cosines be tween the rotation axis and two of the coordinate axes we will assume that the rotation axis is defined by two points as illustrated and that the direction of ro tation is to be counterclockwise when looking along the axis from p to p  an axis vector is then defined by the two points as v p p  phd    xy y2 ty   a unit vector u is then defined along the rotation axis as vv u ti  a b c  13 i  pie   p f  a a  x initial step positron translate step p to the origin rotate p onto the axis x step step step ratate the axis translate the rotate the to the original rotation axis object around the orientation to the original z axis position   five transformation steps for obtaining a composite matrix for rotation about an arbitrary axis with the rotation axis projected onto the z axis where the components a b and c of unut vector u are the direction cosines for the rotation axis  a bo p22 ce bor 16 iv iv  v  if the rotation is to be in the opposite direction clockwise when viewing from p  to p  then we would reverse axis vector v and unit vector u so that they point from p to p  the first step in the transformation sequence for the desired rotation is to set up the translation matrix that repositions the rotation axis so that it passes through the coordinate origin for the desired direction of rotation   we accomplish this by moving point p to the origin  if the rotation direction had been specified in the opposite direction we would move p to the crigin  this translation matrix is  x   y t 91  which repositions the rotation axis and the object as shown in    section rotation   an axis of rotation dashed line defined with points p and p  the direction for the unit axis vector u is determined by the specified rotation direction   translation of the rotation axis to the coordinate ongin    rotation of u around the x axis into the xz plane is accomplished by rotating u  the projection of u in the yz plane through angle a onto the axis   a tb   unit vector u is rotated about the x axis to bring it into the xz plane a  then it is rotated around the y axis to align it with the z axis b  now we need the transformations that will put the rotation axis on the z axis we can use the coordinate axis rotations to accomplish this alignment in two steps there are a number of ways to perform the two steps we will first ro tate about the x axis to transform vector u into the xz plane then we swing u around to the z axis using a y axis rotation these two rotations are illustrated in  for one possible orientation of vector u  since rotation calculations involve sine and cosine functions we can use standard vector operations appendix a to obtain elements of the two rotation matrices dot product operations allow us to determine the cosine terms and vector cross products provide a means for obtaining the sine terms  we establish the transformation matrix for rotation around the x axis by de termining the values for the sine and cosine of the rotation angle necessary to get u into the xz plane this rotation angle is the angle between the projection of u in the yz plane and the positive z axis   lf we designate the projection of u in the yz plane as the vector u   b c  then the cgsine of the rotation angle a can be determined from the dot product of u and the unit vector u along the z axls  cosa  ee lu fu d thi gs where d is the magnitude vf u  d vb   iff similarly we can determine the sine of a from the cross product of w and u  the coordinate independent form of this cross product is w xu  u lu ju sine 269 and the cartesian form for the cross product gives us wxu u wie 2k equating the right sides of eqs  20 and 21 and noting that lu   and lu  d we have dsina h or section rotation sing  22  ri now that we have determined the values for cosa and sina in terms of the com ponents of vector u we can set up the matrix for rotation of u about the x axis  0 _ c d b d a2 rl  ya cfd 0 this matrix rotates unit vector u about the x axis into the xz plane  next we need to determine the form of the transformation matrix that will swing the unit vector in the xz plane counterclockwise around the y axis onto the positive axis the orientation of the unit vector in the xz plane after rotation about the x axis is shown in  this vector labeled u  has the value a for its x component since rotation about the x axis leaves the x component un changed its z component is d the magnitude of u  because vector u has been rotated onto the z axis and the y component of u is because it now lies in the xz plane again we can determine the cosine of rotation angle from expres sions for the dot product of unit vectors u and u   uw u cosb   24   fu  lu   rotation of unit vector u since lu   lu   comparing the coordinate independent form of the cross vector u after rotation into product the xz plane about the y axis positive rotation angle b wu xu  uly lu sing 1f aligns u with vector u  with the cartesian form u xu  uy  a if 26 we find that sing  a 27  thus the transformation matrix for rotation af u about the y axis is d a qo _ r a a ad i t 2e 1 with transformation matrices 17 23 and 28 we have aligned the rotation axis with the positive axis the specified rotation angle  can now be applied as a rotation about the z axis al chapter three dimensianal geometric and modeling transformations   q  wosu uw a   local coordinate system for a rotation axis defined by unit vector u  al8 cos  sind sind cos   rc   29  1 to complete the required rotation abou the given axis we need to trans form the rotation axis back to its original position this is done by applying the inverse of transformations 17 23 and 28 the transformation matrix for ratation about an arbitrary axis then can be expressed as the composition of these seven individual transformations  r  tr mab ry 4a rlc8 rb ra  t 30 a somewhat quicker but perhaps less intuitive method for obtaining the composite rotation matrix r  r a is to take advantage of the form of the composite matrix for any sequence of three dimensional rotations  thoth ma r my tm tm o 31 tr tm 0 the upper left by submatrix of this matrix is orthogonal this means that the tows or the columns of this submatrix form a set of orthogonal unit vectors that are rotated by matrix r onto the x y and z axes respectively  ry ry ry r     r  fa i  r   ia  farsa na ra pay 1 i therefore we can consider a local coordinate system defined by the rotation axis and simply form a matrix whose columns are the loca unit coordinate vec tors assuming that the rotation axis is not parallel to any coordinate axis we can form the following local set of unit vectors    uj u ux uy 33  u xu u  uy x uz if we express the elements of the local unit vectors for the rotation axis as uy  jy ua uys uy  ty wyay kya  ur  uy wap hea  then the required composite matrix equal to the product r   r a  is uy uy may x2 uy win hy  r  se me 35 wy uy wy 0  this matrix transforms the unit vectors uz u  and u onto the x y and z axes re spectively thus the rotation axis is aligned with the z axis since uy  u  rotations with quaternions a more efficient method for obtaining rotation about a specified axis is to use a quaternion representation for the rotation transformation in chapter we dis cussed the usefulness of quaternions for generating three dirnensional fractals using self squaring procedures quaternions are useful also in a number of other computer graphics procedures including three dimensional rotation calcula tions they require less storage space than by matrices and it is simpler to write quaternion procedures for transformation sequences this is particularly important in animations that require complicated motion sequences and motion interpolations between two given positions of an object  one way to characterize a quatemion appendix a is as an ordered pair consisting of a scalar part and a vector part  q  s v we can also think of a quaternion as a higher order complex number with one real part the scalar part and three complex parts the elements of vector v  a rotation about any axis passing through the coordinate origin is performed by first setting up a unit quaternion with the following scalar and vector parts   co85 v usin  36  where u is a unit vector along the selected rotation axis and  is the specified ro  tation angle about this axis   any point position p to be rotated by this quaternion can be represented in quaternion notation as p w p  with the coordinates of the point as the vector part p  x y z  the rotation of the point is then carried out with the quaternion operation p qpq  37 where q   s v is the inverse of the unit quaternion q with the scalar and vec  tor parts given in eqs 36 this transformation produces the new quaternion with scalar part equal to  p  p  38  and the vector part is calculated with dot and cross products as section rotation  ge  a x fa   unit quaternion parameters and u for rotation about a specified axis  chapter three dimensional geametnc and madeling transformations  po spt vip ey  2slv xp  v  vy x pl 39  parameters s and v have the rotation values given in eqs 36 many computer graphics systems use ethcient hardware implementations of these vector calcula tions to perform rapid three dimensional object rotations transformation 37 is equivalent to rotation about an axis that passes through the coordinate origin this is the same as the sequence of rotation trans formations in eq 30 that aligns the rotation axis with the z axis rotates about z and then returns the rotation axis to its original position  using the definition for quaternion multiplication given in appendix a and designating the components of the vector part of g as v   b c  we can evaluate the terms in eg 39 to obtain the elemen s for the composite rotation matrix r  a ri  r    r   r a in a by form as  2b 2ab  2s 2ac  2sh mp9  2ab  2se  2a  2c 2hc  2sa 40 2ac  2sb 2he  2sa  2a  2b  to obtain the complete general rotation equation 30 we need to include the translations that move the rotation axis to the coordinate axis and back to ils orig inal position that is  ri   t  m  t 14n  as an example we can perform a rotation about the axis by setting the unit quaternion parameters as 2s g   sine  cos v   sin  where the quaternion vector elements are a  b  q and c  sin   substitut ing these values into matrix 40 and using the following trigonometric identi ties ee a   sings   2sin  cos sin  sing we get the by version of the z axis rotation matrix r   in transformation equation similarly substituting the unit quaternion rotation values into the transformation equation 37 produces the rotated coordinate values in eqs   the matrix expression tor the scaling transformation of a position p  x y z rel ative to the coordinate urigin can de written as ae ee le  doubling the size of an object with transformation 42 also moves the x a object farther from the origin x s x yyap   ody 42 z 8s o zz  o 1 or p s p 43  where scaling parameters s  s  and s are assigned any positive values explicit expressions for the coordinate transformations for scaling relative to the origin are xx  xs yy y sy z  44  scaling an object with transformation 42 changes the size of the object and repositions the object relative to the coordinate origin also if the transfor mation parameters are not all equal relative dimensions in the object are changed we preserve the original shape of an object with a uniform scaling s   s     the result of scaling an object uniformly with each scaling parameter set to is shown in   scaling with respect to a selected fixed position x y z  can be represented with the following sransformation sequence  translate the fixed point to the origin  scale the object relative to the coordinate origin using eq 42 translate the fixed point back to its original position  this sequence of transformations is demonstrated in  the matrix repre sentation for an arbitrary fixed point scaling can then be expressed as the con catenation of these translate scale translatc transformations as s o u sy x o s o u sy y o s ga s z   to yu sgy sy ta xe yp   451 we form the inverse scaling matrix for either eq 42 or eq 45 by re placing the scaling parameters  and s with their reciprocals the inverse ma  xp yer zp  fa  e xp  e ze  ic     xp ver ze x  d   figure 1t scaling an object relative to a selected fixed point is equivalent to the sequence of transformations shown chapter three dinensional geometric and modeling transformations  trix generates an opposite scaling transformation so the concatenation of any scaling matrix and its inverse produces the identity matrix  in addition to translation rotation and scaling there are various additional transformations that are often useful in three dimensional graphics appiications two of these are reflection and shear  reflections a three dimensional reflection can be performed relative to a selected reflection axis or with respect to a selected reflection plane in general three dimensional re flection matrices are set up similarly to those for two dimensions reflections rel ative to a given axis are equivalent to rotations about that axis reflections with respect to a plane are equivalent to rotations in four dimensional space when the reflection plane is a coordinate plane either xy xz or yz  we can think of the transformation as a conversion between left handed and right handed sys tems  an example of a reflection that converts coordinate specifications from a right handed system to a left handed system or vice versa is shown in fig 19 this transformation changes the sign of the z coordinates leaving the x and y coordinate values unchanged the matrix representation for this reflection of points relative to the xy plane is 0 rf   46   0 qo  transformation matrices for inverting x and y values are defined similarly as reflections relative to the yz plane and xz plane respectively reflections about other planes can be obtained as a combination of rotations and cvordinate plane reflections  reflection y relative to the  xy plane woe a x x   conversion of coordinate specifications from a right handed to a left handed system can be carried out with the reflection transformation 46 shears section     omposite transformations shearing transformations can be used to modify object shapes they are also use  ful in three dimensional viewing for obtaining general projection transforma tions in two dimensions we discussed tranformations relative to the x or y axes to produce distortions in the shapes of objects in three dimensions we can also generate shears relative to the z axis  asan example of three dimensional shearing the following transformation produces a z axis shear  hi 4o  clo co co  oo parameters a and b can be assigned any real values the effect of this transforma tion matrix is to alter x and y coordinate values by an amount that is propor tional to the z value while leaving the z coordinate unchanged boundaries of planes that are perpendicular to the z axis are thus shifted by an amount propor tional to z an example of the effect of this shearing matrix on a unit cube is shown in  for shearing values a    shearing matrices for the  axis and y axis are defined similarly   b woe  composite transformations igure f120 unit cube a is sheared      b by transformation matrix as with two dimensional transformations we form a composite three dimen  47 witha b  sional transformation by multiplying the matrix representations for the individ ual operations in the transformation sequence  his concatenation is carried out from right to left where the rightmost matrix is the first transformation to be ap plied to an object and the leftmost matrix is the las transformation the follow ing program provides an example for implementing a composite transformation a sequence of basic three dimensional geometric transformations are combined to produce a single composite transformation which is then applied to the coor dinate definition of an object  include math h  include ygraph ics h  define pf  typedef fioat matrixdxd 4a   matrix4xd themmatrix  void matrixdx4seridentity matirixdx4 m  mirj c   r       multiplies matrix a times b putting result in b  void matrix4x4premultiply matrix4x4 a matrix4x4 b   int r   matrix4 tmp  for r r r  for c c c  cmp rjlc  alr  o bid ci  alr  iitb t te  alr   b c  alr   b c  for r r r  for c eva crt blrife  tmelri ct    veic translate3 float tx float ty float tz   matrix4x4d m  matrix4xdsetidertity m  mf   tx m   ty ml2   tz matrix4x4premultiply m thematrix  void scale3 float sx float sy float sz wcept center   matrix4x4 m  matrix4xdsetidentity m  m o   sx  m    sx  center x m   sy  mfl    sy  center y  m z   sz  m    sz  center z matrix4x4premultiply m thematrix    void rotace jwept3 pl wept3 p2 float radianangle  float lenatn  sqrt  p2 x  pl x   pz x  pl x   p2 y  pl y   p2 y  pl y   p2 z  pl 2z   p z  pl z  float cosazz  cosf radianangle   float sinaz  sinf radianangle   float a  sinaz  p2 x  pl x  length float b  simaz  p2 y  pl y  length float c  sina2  p2 z  pl z  length matrix4x4 m  translate3  pl x  pl y  pl z  matrix4x4setidentity im  m o   b b  ctc  m o l  atb  cosa2 c m q   ate  cosa2 b m i jol  a b  casa2 c m j  ll  l  ata  e te m l   b e  cosa2 a m    atc  cosa2 b  m   btc  cosa2 a m    a a  b b matrix4xdpremultiply m thematrix  translate3 pl x pl y pl z    void transformpsints3 int npts wcpt3  pts   int k jj  float tmp  for ik k npts k   for j j j   thematrix j   pts k  thematrix j   setwept3  pts k  tmp  tmp  tmpiz    void main int argc char  argv   wept3 pts    10 10 50 50 10  wept3 pl   10  p2   10  wept3 refpt   0   long windowid  opengraphics  argv   setbackground white  setcolor blue  ppolyline3  pts  matrix4x4setidentity thematrix  rotate3 pl p2 pi  scale3 75 75  refpt  translate    transformpoints3  pts  setcolor red  ppolyline3  pts   sleep   closegraphics windowid    we set up matrices for modeling and other transformations with functions sim  lar to those given in chapter for two dimensional transformations the major difference is that we can now specify rotations around any coordinate axis these functions are translate  translatevector matrixtranslate rotatex ithetax xmatrixrotate  rotateyy ithetay ymatrixrotate  rotatezz thetaz zmatrixrotate  scale3 scalevector matrixscale  tmp i  thematrix j   pts k  x  thematrix j   pts k y  chapter three dimensianal geometric and modeling transformations each of these functions produces a by transformation matrix that can then be used to transform coordinate positions expressed as homogeneous column vec tors parameter translatevector is a pointer to the list of translation distances t  and   similarly parameter scalevector specifies the three scaling para meters s  sy and s  rotate and scale matrices transform objects with respect to the coordinate origin and we can constrict composite transformations with the functions composematrix3 buildtransformarionmatrix3 composetransformrat 1onmatrix3 which have parameters similar to two dimensional transformation functions for setting up composite matrices except we can now specify three rotation angles the order of the transformation sequence for the buildtransformationma trix3 and composetransformationmatrix3 functions is the same as in two dimensions  scale  rotate and  translate  once we have specified a transformation matrix we can apply the matrix to specified points with transformfoint  inpoint matrix outpo nt  in addition we can set the transformations for hierarchical constructions using structures with the function setlocaltranstormation3 matrix type  where parameter matrix specifies the elements of a by transformation ma trix and parameter type can be assigned one of the following three values pre concatenate postconcatenaty or replace  so far we have discussed three dimensignal transformations as operations that move objects from one position to another within a single reference frame there are many tines however when we are interested in switching coordinates from one system to anc ther general three dimensional viewing procedures for exam ple involve an initial transformation of world coordinate descriptions to a view ing oordinate system then viewing coordinates are transformed to device coor dinates and in modeung objects are often described in a local modeling coordinate reference frame then the objects are repositioned into a wortd coordi nate scene for example tables chairs and other furniture each defined in a local modeling coordinate system can be placed into the description of a room defined in another reference frame by transforming the furniture coordinates to roam coordinates then the room might be transformed into a larger scene con structed in world coordinates  an example of the use of multiple coordinate systems and hierarchical modeling with three dimensional objects is given in  this figure illus trates simulation of tractey movement as the tractor moves the tractor coordi nate svstem and front wheel coordinate system move in the world coordinate tractor yow zz world xe  zz xt  eront wheel system   possible coordinate systems used in simulating tractor movement wheel rotations are described in the front wheel system turning of the tractor is described by a rotation of the front wheel system in the tractor system both the wheel and tractor reference frames move in the world coordinate system  system the front wheels rotate in the wheel system and the wheel system ro tates in the tractor system when the tractor turns  three dimensiona objects and scenes are constructed using structure or segment operations similar to those discussed in chapter modeling transfor mation functions can be applied to create hierarchical representation for three di mensional objects we can define three dimensional object shapes in local mod eling coordinates then we construct a scene or a hierarchical representation with instances of the individual objects that is we transform object descriptions from modeling coordinates to world coordinates or tu another system in the hierarchy an example of a phigs structure hierarchy is shown in  this display was generated by the phigs toolkit software developed at the university of a upper _tody ee  sees esa   pin ns  ef displaying an object hierarchy chin met using the phigs toolkit package a i developed at the university of manchester the displayed object tree is itself a phigs structure  courtesy of t l   howard j g williams and w t hewitt department of computer science university of manchester united kingdom   right leer _aren gt_em en  section modcling and coordinate transformations    three dimensional modeling  a a ball and stick representation for key amino acid residues interacting with the natural substrate of thymidylate synthase modeled and rendered by julie newdull ucsf computer graphics lab  b a cad model showing individual engine components rendered by ted malone fti 3d magic  courtesy of silican graphics inc  manchester to provide an editor windows menus and other interface tools for phigs applications  shows two example applications of three dimensional modeling  coordinate descriptions of objects are transferred from one system to an other with the same procedures used to obtain two dimensional coordinate transformations we need to set up the transformation matrix that brings the two coordinate systems into alignment first we set up a translation that brings the new coordinate origin to the position of the other coordinate origin this is fol lowed by a sequence of rotations that corresponding coordinate axes if different scales are used in the two coordinate systems a scaling transformation may also be necessary to compensate or the differences in coordinate intervals  if a second coordinate system is defined with origin x9 yo zp arid unit axis vectors as shown in  relative to an existing cartesian reference frame we first construct the translation matrix t  x9  o   next we can use the unit axis vectors to form the coordinate rotation matrix   transformation of an object description from one coordinate system to another    ur a my  r  me 48 uy up wy 01 which transforms unit vectors u  uy and u onto the x y and z axes respec tively the complete coordinate transformation sequence is then given by the composite matrix r  t this matrix correctly transforms coordinate descriptions from one cartesian system to another even if one system is left handed and the other is right handed  summary three dimensional transformations useful in computer graphics applications in clude geometric transformations within a single coordinate system and tranfor mations between different coordinate systems the basic geometric transforma tions are translation rotation and scaling two additional object transformations are reflections and shears transformations between different coordinate systems are common elements of modeling and viewing routines in three dimensions transformation operations are represented with by matrices as in two di mensional graphics methods a composite transformation in three dimensions is obtained by concatenating the matrix representations for the individual compo nents of the overall transformation  representations for translation and scaling are straightforward extensions of two dimensional transformation representations for rotations however we need more general representations since objects can be rotated about any speci fied axis in space any three dimensional rotation can be represented as a combi nation of basic rotations around the x y and axes and many graphics pack ages provide functions for these three rotations in general however it is more efficient to set up a three dimensional rotation using either a local rotation axis teference frame or a quaternion representation quaternions are particularly use ful for fast generation of repeated rotations that are often required in animation sequences  reflections and shears in three dimensions can be carried out relative to any teference axis in space thus these transformations are also more involved than the corresponding transformations in two dimensions transforming object de scriptions from one coordinate system to another is equivalent to a transforma tion that brings the two reference frames into coincidence finally object model ing often requires a hierarchical transformation structure that ensures that the individual components of an object move in harmony with the overall structure  references for additional techniques involving matrices modeling and three dimensional transforma tions see glassner  arvo  and kirk  a detailed discussion of quater nion rotations is given in shoemake  three dimensional phigs and phigs  trans formation functions are discussed in howard et al   gaskins  and blake   summary chapter three dimensional geometric and modeling transformations  exercises    10 14  12 13 14 15  it  prove that the muitiplication of three dimensional transformation matrices for each of the follawing sequence of operations is commutative  a any two successive translations  b any two successive scaling operations  c any two successive rotations about any one of the coordinate axes   using either eq 30 or q 41 prove that any two successive rotations about a given rotation axis js commutative   by evaluating the terms in eq 39 derive the e ements for general rotation matrix given in eq 1t   show that rotation matrix 35 is equal to the composite matrix r g8  rta  prove that the quaternion rotation matrix eq 40 reduces to the matrix representa  tion in eg when the rotation axis is the coordinate axis   prove that fy 41 i6 equivalent to the general rotation transformation given in eq 30   write a procedure to implement general rotation transformations using the rotation matix  write a routine ta implement quaternion rotations fg 41 for any specified axis derive the transturmation matrix for scaling an object by a sca ing factor sin a direc tion defined by the direction angles a b and y  develop an alganthm for scaling an object defined in an octree representation develop a procedure for animating an object by incrementally rotating it about any specified axis js2 appropriate approximations to the uigonometric equations to speed up the calculations and reset the object to ts initial position after each com plete revolution about the axis devise a procedure for rotating an object that is represented in an octree structure develop a routine reflect an object about an arbitrarily selected plane write a program to shear an object with respect to any of the three coordinate axes using input yalues for the shearing parameters  develop a procedure for coaverting an object definitior in one coordinate reference to any other coordinate system defined elative to the lirst system  develop a complete algorithm for implementing the procecures for constructive sohd modeling by combining three dimensional primitives to generate new shapes initially the prim tives can be combined to form subassemblies then the subassem blies can be comb ned with each other and with primil ve shapes to form the final assembly interactive input of translation and rotation parameters can be used to po sition the objects output of the algorithm is to he ihe sequence af operatians needed to produce the final csg object chapter  three dimensional viewing     i n two dimensional graphics applications viewing operations transfer posi tions from the world coordinate plane to pixel positions in the plane of the output device using the rectangular boundaries for the world coordinate win dow and the device viewport a two dimensional package maps the world scene to device coordinates and clips the scene against the four boundaries of the view port for three dimensional graphics applications the situation is a bit more in volved since we now have more choices as to how views are to be generated first of all we can view an object from any spatial position from the front from above or from the back or we could generate a view of what we would see if we were standing in the middle of a group of objects or inside a single object such as a building additionally three dimensional descriptions of objects must be pro jected onto the flat viewing surface of the output device and the clipping boundaries now enclose a volume of space whose shape depends on the type of projection we select in this chapter we explore the general operations needed to produce views of a three dimensional scene and we also discuss specific viewing procedures provided in packages such as phigs and gl  the steps for computer generation of a view of a three dimensional scene are somewhat analogous to the processes involved in taking a photograph to take a snapshot we first need to position the camera at a particular point in space then we need to decide on the camera orientation   which way do we point the camera and how should we rotate it around the line of sight to set the up di rection for the picture finally when we snap the shutter the scene is cropped to the size of the window  aperture of the camera and light from the visible sur   photographing a scene involves selection of a camera position and zz orientation  modeling    coordinates cocrdinates transtormation  world viewing  viewing  coordinates   projection workstation   coordinates transformation device coordinates  general three dimensional transformation pipeline from modeling coordinates to final device coordinates  faces is projected onto the camera film we need to keep in mind however that the camera analogy can be carried only so far since we have more flexibility and many more options for generating views of a scene with a graphics package than we do with a camera   shows the general processing steps for modeling and convert ing a world coordinate description of a scene to device coordinates once the scene has been modeled world coordinate positions are converted to viewing co ordinates the viewing coordinate system is used in graphics packages as a refer ence for specifying the observer viewing position and the position of the projec tion plane which we can think of in analogy with the camera film plane next projection operations are performed to convert the viewing coordinate descrip tion of the scene to coordinate positions on the projection plane which will then be mapped to the output device objects outside the specified viewing limits are clipped from further consideration and the remaining objects are processed through visible surface identification and surface rendering procedures to pro duce the display within the device viewport   generating a view of an object in three dimensions is similar to photographing the object we can walk around and take its picture from any angle at various distances and with varying camera orientations whatever appears in the viewfinder is projected onto the flat film surface the type and size of the camera lens determines which parts of the scene appear in the final picture these ideas are incorporated into three dimensional graphics packages so that views of a scene can be generated given the spatial position orientation and aperture size of the camera  specifying the view plane we choose a particular view for a scene by first establishing the viewing coordi nate system also called the view reference coordinate system as shown in  a view plane or projection plane is then set up perpendicular to the ww yn my z py  xp  pr zo    a right handed viewing coordinate system with axes x  yp and  relative toa warld coordinate scene  view plane n  a  view plane  b    orientations of the view plane for specified norma vector coordinates relative to the world origin position   orients the view plane as in a  while   gives the orientation in b    specifying the view up vector with a twist angle   viewing z axis we can think of the view plane as the film plane in a camera that has been positioned and onented for a particular shot of the scene world coordi nate positions in the scene are transformed to viewing coordinates then viewing coordinates are projected onto the view plane  to establish the viewing coordinate reference frame we first pick a world coordinate position called the view reference point this point ts the origin of our viewing coordinate system the view reference point is often chosen to be close to or on the surface of some object in a scene but we could also choose a point that is at the center of an object or at the center of a group of objects or somewhere out in front of the scene to be displayed if we choose a point that is near to or on some object we can think of this point as the position where we might want to aim a camera to take a picture of the object alternatively if we choose a point that is at same distance from a scene we could think of this as the camera position  next we select the positive direction for the viewing z axis and the orien tation of the view plane by specifying the view plane normal vector n we choose a world coordinate position and this point establishes the direction for n relative either to the world origin or to the viewing coordinate origin graphics packages such as gks and phigs for example orient n relative to the world coordinate origin as shown in  the view plane normal n is then the di rected line segment from the world origin to the selected coordinate position in other words n is simply specified as a world coordinate vector some other packages gl from silicon graphics for instance establish the direction for n using the selected coordinate position as a look at point relative to the view refer ence point viewing courdinate origin   illustrates this method for defining the direction of n which is from the look at point to the view reference point another possibility is to set up a left handed viewing system and take n and the positive  axis trom the viewing origin to the look at point only the di rection of n is nveded to establish the z direction the magnitude is irrelevant because n will be normalized tu a unit vector by the viewing calculations  finally we choose the up direction for the view bv specifying a vector v called the view up vector this vector is used to establish the positive direction for the y axis vector v also can be defined as a world coordinate vector or in some packages it is specified with a fis angle  about the z axis as shown in  for a general crientation of the normal vector it can be difficult or at least time consuming to deternune the direction for v that is precisely perpen dicular to n therefore viewing procedures typically adjust the user defined ori entation of vector v as shown in  so that v is projected into a plane that is perpendicular to the normal vector we can choose the view up vector v to be in any convenient direction as long as it is not parallel to n as an example con mee orientation of the view plane tora specified look at poin p relative ta the viewing coordinate origin py  p ee  ee   a sider an interactive specification of viewing reference coordinates using phigs where the view reference point is often set at the center of an object to be viewed if we then want to view the object at the angled direction shown in  we can simply choose v as the world vector   and this vector will be projected into the plane perpendicular to n to establish the y axis this is much easier than trying to input a vector that is exactly perpendicular to n  using vectors n and v the graphics package can compute a third vector u perpendicular to both n and v to define the direction for the x axis then the di rection of v can be adjusted so that it is perpendicular to both n and u to estab lish the viewing y direction as we will see in the next section transformation from world to viewing coordinates  these computations are conveniently car tied out with unit axis vectors which are also used to obtain the elements of the world to viewing coordinate transformation matrix the viewing system is then often described as a uvn system    generally graphics packages allow users to choose the position of the view plane with some restrictions along the z axis by specifying the view plane dis tance from the viewing origin the view plane is always parallel to the x y plane and the projection of objects to the view plane correspond to the view of the scene that will be displayed on the output device  gives examples of view plane positioning if we set the view plane distance to the value the x y plane or uv plane af viewing coordinates becomes the view plane for the projec tion transformation occasionally the term uv plane is used in reference to the viewing plane no matter where it is positioned in relation to the x y plane but we will only use the term uv plane to mean the x y plane which is not neces sarily the view plane  left handed viewing coordinates are sometimes used in graphics packages so that the viewing direction is in the positive z direction but right handed viewing systems are more common because they have the same orientation as the world reference frame this allows graphics systems to deal with only one coordinate orientation for both world and viewing references we will follow the convention of phigs and gl and use a right handed viewing system for all al gorithm development  to obtain a series of views of a scene we can keep the view reference point fixed and change the direction of n as shown in  this corresponds to generating views as we move around the viewing coordinate origin in interac     fiyure 10 view plane positioning along the z  axis  na adjusted vote p n   adjusting the input position of the view up vector v toa position perpendicular to the normal vector n  desired  yup direction   choosing v along the y  axis sets the up orientation for the view plane in the desired direction    a right handed viewing system defined with unit vectors u v and n  chapter v three dimensiona viewing    viewing a scene from different directions with a fixed view reference point  tive applications the normal vector n is the viewing parameter that is most often changed by changing only the direction of n we can view a scene from any di rection except along the line of v to obtain either of the two possible views along the line of v we would need to change the direction of v if we want to simulate camera motion through a scene we can keep n fixed and move the view reference point around    yo   re  po    py  n    moving around in a scerie by n  vo changing the position of the view reference point  transtormation trom world to viewing coordinates before object descriptions can be projected to the view plane they must be trans ferred to viewing coordinates conversion of object descriptions from world to viewing coordinates is equivalent to a transformation that superimposes the viewing reference frame onto the world frame using the basic geometric trans late rotate operations discussed in section this transformation sequence is j translate the view reference point to the origin of the world coordinate sys tem  apply rotations to align the x  y  and z axes with the world x  y  and z  axes respectively  hf the view reference point is specified at world position x yy zo  this point is translated to the world origin with the matrix transformation  x  t   z 1 the rotation sequence can require up to three coordinate axis rotations de pending on the direction we choose for n in general if n is not aligned with any world coordinate axis we can superimpose the viewing and world systems with the transformation sequence r  r  r  that is we first rotate around the world x axis to bring z into the x z  plane then we rotate around the world y  axis to align the z  and z axes the final rotation is about the z  axis to align the y  and y axes further if the view reference system is left handed a reflection of one of the viewing axes for example the z axis is also necessary  illus trates the general sequence of translate rotate transformations the composite transformation matrix is then applied to world coordinate descriptions to trans fer them to viewing coordinates  another method for generating the rotation transformation matrix is to cal culate unit uum vectors and form the composite rotation matrix directly as dis   aligning a viewing system with the world coordinate axes using a sequence of translate rotate transformations  section viewmg coordinales chapter cussed in section given vectors n and v these unit vectors are calculated three dimensional viewing as n tnt  ny mg m3 vxxn  u tv xn  iy a u   ven x u  vy   this method also automatically adjusts the direction for v so that v is perpendic ular to n the composite rotation matrix for the viewing transformation is then uy my iy dv u9 d4 a my my ny oo foc fc which transforms u onto the world x axis v onto the y  axis and n onto the axis in addition this matrix automatically performs the reflection necessary to transform a left handed viewing svstem onto the right handed world system  the complete world to viewing coordinate transformation matrix is ob tained as the matrix product mwycye  r t this transformation is then applied to coordinate descriptions of objects in the scene to transfer them to the viewing reference frame  once world coordinate descriptions of the objects in a scene are converted to viewing coordinates we can project the three dimensional objects onto the two dimensional view plane there are two basic projection methods in parallel projection coordinate positions are transformed to the view plane along parallel lines as shown in the example of  for a perspective projection fig 15  object positions are transformed to the view plane along lines that con verge to a point called the projection reference point or center of projection  the projected view of an object is determined bv calculating the intersection of the projection lines with the view plane  view plane  parallel projectian cf an abject to the view plane view p plane   projection reference point   perspective projection of an object to the view plane  a parallel projection preserves relative proportions of objects and this is the method used in drafting to produce scale drawings of three dimensional ob jects accurate views of the various sides of an object are obtained with a parallel projection but this does not give us a realistic representation of the appearance of a three dimensiona object a perspective projection on the other hand produces realistic views but does not preserve relative proportions projections of distant objects are smaller than the projections of objects of the same size that are closer to the projection plane    parallel projections we can specify a parallel projection with a projection vector that defines the di rection for the projection lines when the projection is perpendicular to the view plane we have an orthographic parallel projection otherwise we have an oblique parallel projection  illustraces the two types of parallel pro jections some graphics packages such as gl on silicon graphics workstations do not provide for oblique projections in this package for example a parallel projection is specified by simply giving the boundary edges of a rectangular par allelepiped  projection reference point view plane tigure 16 perspective projection of equal sized objects at different distances from the view plane  section projections vhapier  hree pimens caal wew ing ortnographie proyction ablique projection fas th  figure 17 orientation of the projection vector v to produce an orthographic projection a and an oblique projection b  orthographic projections are most often used to produce the front side and top views of an object as shown in  front side and rear orthographic projections of an object are called elevations and a top orthographic projection is called a plan view engineering and architectural drawings commonly employ these orthographic projections because lengths anc angles are accurately de picted and can be measured from the drawings  we can also form orthographic projections that display more than one face of an object such views are called axonometric orthographic projections the most commonly used axonometric projection is the isometric projection we gen erate an isometric project on by aligning the projection plane so that it intersects each coordinate axis in which the object is defined called the principal axes at the same distance fram the origin  shows an isometric projection for a pian view  side elevation view  front elevation view fagyre 18 orthographte projections 1m object displaying plan and clevation views    isometric projection for a cube  cube the isometric projection is obtained by aligning the projection vector with the cube diagonal there are eight positions one in each octant for obtaining an isometric view all three principal axes are foreshortened equally in an isometric projection so that relative proportions are maintained this is not the case in a general axonometric projection where scaling factors may be different for the three principal directions  transformation equations for an orthographic parallel projection are straightforward if the view plane is placed at position z  along the z axis fig 20  then any point x y  in viewing coordinates is transformed to projection coordinates as pa y y  where the original z coordinate value is preserved for the depth information needed in depth cueing and visible surface determination procedures  an oblique projection is obtained by projecting points along parallel lines that are not perpendicular to the projection plane in some applications packages an oblique projection vector is specified with two angles a and  as shown in  point x y z is projected to position x  y  on the view plane ortho graphic projection coordinates on the plane are x y  the oblique projection line from x y z to x  y  makes an angle a with the line on the projection plane that joins x  y  and x y  this line of length l is at an angle  with the horizontal direction in the projection plane we can express the projection coordinates in terms of x y l and  as    x   z    orthographic projection of a point onto a viewing plane  zz  section projections chapter three dimensional viewing   oblique projection of coordirate position x y z to position x  p on the view plane  x x leosd   y  lsing length l depends on the angle a and the z coordinate of the point to be pro jected  tana   i  l thus i  tana rosy  2h  where l is the inverse of tana which is also the value of l when z  we can then write the oblique projection equations as x  x  cos d a yp y  sing  the transformation matrix for producing any parallel projection onto the xy y plane can be written as leos o lysing ma arate  id in parallel a a  o an orthographic projection is obtained when l   which occurs at a projection angle a of  oblique projections are generated with nonzero values for ly projection matrix 10 has a structure similar to that of a z axis shear matrix in fact the effect of this projection matrix is to shear planes of constant and project them onto the view plane the x and y coordinate values within each plane of constant z are shifted by an amount proportional to the  value of the plane so that angles distances anc parallel lines in the plane are projected accurately this effect is shown in  where the back plane of the box is sheared and over lapped with the front plane in the projection to the viewing surface an edge of the box connecting the front and back planes is projected into a line of length l that makes an angle  with a horizontal line in the projection plane  common choices for angle  are and  which display a combination view of the front side and top or front side and bottom of an object two com monly used values for a are those for which tana  and tana  for the first case a  and the views obtained are called cavalier projections all lines per pendicular to the projection plane are projected with no change in length exam ples of cavalier projections for a cube are given in   when the projection angle a is chosen so that tana  the resulting view is called a cabinet projection for this angle   lines perpendicular to the viewing surface are projected at one half their length cabinet projections appear more realistic than cavalier projections because of this reduction in the length of perpendiculars  shows examples of cabinet projections for a cube  perspective projections to obtain a perspective projection of a three dimensional object we transform points along projection lines that meet at the projection reference point suppose we set the projection reference point at position z  along the z axis and we         oe a po   oa  vr ta   b original coordinete projection on the description of object viewing plane  figure 22 oblique projection of a box onto the z  plane   tal ib    cavalier projections of a cube onto a view plane for two values of angle   note depth of the cube is projected equal to the width and height  section projections      ta th   cabinet projections of a cube onto a view plane for two values of angle  depth is projected as one half that of the width and height  place the view plane at z  as shown in  we can write equations de scribing coordinate positions along this perspective projection line in parametric form as xo x xu yo yrye 19 zv   u parameter u takes values from to and coordinate position x  y   repre sents any point along the projection line when u  we are at position p  x y z  at the other end of the line u  and we have the projection reference point coordinates  z   on the view plane z  z  and we can solve the z equation for parameter u at this position along the projection line  zip  z ys pf 12 zprp  z substituting this value of u into the equations for x and y  we obtain the per spective transformation equations  p ix y  en ots lp vor zea     2p orp perspective projection of a point vi p with coordinates x y z to plano position x  yp 2p on the view plane   s e te    zyep  zope    i  13 vp  y 2e 2pm  2pm  where d  2p  z pisthe distance of the view plane from the projection refer ence point  using a three dimensional homogeneous coordinate representation we can write the perspective projection transformation 13 in matrix form as xp 0 x yr ool y   14 zy 2yg dy  2gzprp dp z h i d zoe a jn this representation the homogeneous factor is n er  15  d p and the projection coordinates on the view plane are calculated from the homo geneous coordinates as x  x h vy  val 16  where the original z coordinate value would be retained in projection coordinates for visible surface and other depth processing  in general the projection reference point does not have to be along the z  axis we can select any coordinate position    ypq zpry on either side of the view plane for the projection reference point and we discuss this generalization in the next section  there are a number of special cases for the perspective transformation equations 13 if the view plane is taken to be the uv plane then z   and the projection coordinates are anes r zpp   17 ac ye  e y z pee  and in some graphics packages the projection reference point is always taken to be at the viewing coordinate origin in this case    and the projection coor  ee dinates on the viewing plane are  78  section projections chapter  three dimensional viewing when a three dimensional object is projected onto a view plane using per spective transformation equations any set of parallel lines in the object that are not parallel to the plane are projected into converging lines parallel lines that are parallel to the view plane will be projected as parallel lines the point at which a set of projected parallel lines appears to converge is called a vanishing point each such set of projected parallel lines will have a separate vanishing point and in general a scene can have any number of vanishing points depending on how many sets of parallel lines there are in the scene  the vanishing point for any set of lines that are parallel to one of the princi pal axes of an object is referred to as a principal vanishing point we control the number of principal vanishing points one two or three with the orientation of the projection plane and perspective projections are accordingly classified as one point two point or three puint projections the number of principal vanish ing points in a projection is determined by the number of principal axes intersect ing the view plane  illustrates the appearance of one point and two point perspective projections for a cube in  b  the view plane is aligned parallel to the xy object plane so that only the object z axis is intersected  vanishing point ft       a  coordinate ib wnt description ne poin perspective projection    e raxis x axis   vanishing vanishing point  point  two point perspective projection   perspective views and principal vanishing points of a cube for various orientations of the view plane relative to the principal axes of the object this orientation produces a one point perspective projection with a z axis vanish ing point for the view shown in  c  the projection plane intersects both the x and z axes but not the y axis the resulting two point perspective projection contains both x axis and z axis vanishing points  transit ormations  in the camera analogy the type of lens used on the camera is one factor that de termines how much of the scene is caught on film a wide angle lens takes in more of the scene than a regular lens in three dimensional viewing a rectangu lar view window or projection window in the view plane is used to the same effect edges of the view window are parallel to the x y axes and the window boundary positions are specified in viewing coordinates as shown in  the view window can be placed anywhere on the view plane  given the specification of the view window we can sel up a view volume using the window boundaries only those objects within the view volume will appear in the generated display on an output device all others are clipped from the display the size of the view volume depends on the size of the window while the shape of the view volume depends on the type of projection to be used to generate the display in any case four sides of the volume are planes that pass through the edges of the window for a parallel projection these four sides of the view volume form an infinite parallelepiped as in  for a perspective projection the view volume is a pyramid with apex at the projection reference point   a finite view volume is obtained by limiting the extent of the volume in the direction this is done by specifying positions for one or two additional boundary planes these z boundary planes are referred to as the front plane and back plane or the near plane and the far plane of the viewing volume the front and back planes are parallel to the view plane at specified positions zon and both planes must be on the same side of the projection reference point and the back plane must be farther from the projection point than the front plane including the front and back planes produces a view volume bounded by six planes as shown in  with an orthographic parallel projection the six planes form a rectangular parallelepiped while an oblique parallel projection produces an oblique parallelepiped view volume with a perspective projection the front and back cupping planes truncate the infinite pyramidal view volume to form a frustum  front and back clipping planes allow us to eliminate parts of the scene from the viewing operations based on depth we can then pick out parts of a scene that we would like to view and exclude objects that are in front of or behind the parl that we want to look at also in a perspective projection we can use the front clipping plane to take out large objects close to the view plane that can project into unrecognizable sections within the view window similarly the back clip ping plane can be used to cut out objects far from the projection reference point that can project to small blots on the output device relative placement of the view plane and the front and back clipping planes depends on the type of view we want tc generate and the limitations of a particu lar graphics package with phigs the view plane can be positioned anywhere along the z axis except that it cannot contain the projection reference point and view plane   projection window  xine yw  frenre 27 window specification on the view plane with minimum and maximum coordinates given in the viewing reference system  chapter three dimensional viewing xy plane  zy window orthographic orthographic projection projection view volume view volume a  bb x plane a zy window oblique projection oblique view volume projection e view volume  d   view volume for a parallel projection in a and b  the side and top views of the view volume for an orthographic projection are shawn and in c and d  the side and top views of an oblique view volume are shown projection reference point nt x  plane xy plane window s z a window projaction reference  point a tb  c   examples of a perspective projection view valume for various positions of the projection reference point parallelpiped  section view volume  view volumes and general projection transformations back plane   frustum view volume front plane parallel projection ta  back sn  plane  sa projection reference front point plane perspective projection b   view volumes bounded by front and back planes and by top bottom and side planes front and back planes are parallel to the view plane at positions zpon and zac along the z  axis  the front and back planes can be in any position relative to the view plane as long as the projection reference point is not between the front and back planes figure 31 illustrates possible arrangements of the front and back planes in relation to the view plane the default view volume in phigs is formed as a unit cube using a parallel projection with z  zpack  the view plane coincident with the back plane and the projection reference point at position   on the front plane  orthographic paralle projections are not affected by view plane position ing because the projection lines are perpendicular to the view plane regardless of  back plane view plane   back plane  view plane _  view plane   back piane   _ front plane ch  xy  front plane   front plane a  b   possible arrangements of the front and back clipping planes relative to the view plane   window   view plane view plane window projection projection reference reference point point a ib    changing the shape of the oblique projection view volume by moving the window position when the projection vector v is determined by the projection reference point and the window position  its location oblique projections may be affected by view plane positioning de pending on how the projection direction is to be specified in phigs the oblique projection direction is parallel to the line from the projection reference point to the center of the window therefore moving the position of the view plane with out moving the projection reference point changes the skewness of the sides of the view volume as shown in  often the view plane is positioned at the view reference point or on the front clipping plane when generating a parallel projection  perspective effects depend on the positioning of the projection reference point relative to the view plane as shown in  if we place the projec  view view view  window a  window  window  _  ooh    t i an ao   i l  ny o    t  a    vue     z i i att   il u projection  i i reference   point       a   i  f       i t    vt i     i   i     projection projection reference reference point very far bi from window c   changing perspective effects by moving the projection reference point away from the view plane window  window  ul ul a  s projection projection reference reference point point a  b   projected object size depends on whether the view plane is positioned in front of the object or behind it relative to the position of the projection reference point  tion reference point close to the view plane perspective effects are emphasized that is closer objects will appear much larger than more distant objects of the same size similarly as we move the projection reference point farther from the view plane the difference in the size of near and far objects decreases in the limit as we move the projection reference point infinitely far from the view plane a perspective projection approaches a parallel projection  the projected size of an object in a perspective view is also affected by the relative position of the object and the view plane   if the view plane is in front of the object nearer the projection reference point  the projected size is smaller conversely object size is increased when we project onto a view plane in back of the object  view plane positioning for a perspective projection also depends on whether we want to generate a static view or an animation sequence for a static view of a scene the view plane is usually placed at the viewing coordinate ori gin which is at some convenient point in the scene then it is easy to adjust the size of the window to include al parts of the scene that we want to view the projection reference point is positioned to obtain the amount of perspective de sired in an animation sequence we can place the projection reference point at the viewing coordinate origin and put the view plane in front of the scene fig 35  this placement simulates a camera reference frame we set the field of view lens angle by adjusting the size of the window relative to the distance of the view plane from the projection reference point we move through the scene by moving the viewing reference frame and the projection reference point will move with the view reference point  section view volumes and general projection transformations  view volume   fignre 37 regular parallelepiped view volume obtained by shearing the view volume in   scene motion window view i plane   view plane positioning to simulate a camera reference frame for an animation sequence  general parallel projection transformations in phigs the direction of a parallel projection is specified with a projection vec tor from the projection reference point to the center of the view window figure 36 shows the general shape of a finite view volume for a given projection vec tor and projection window in the view plane we obtain the oblique projection transformation with a shear operation that converts the view volume in fig 36 to the regular parallelepiped shown in   the elements of the shearing transformation needed to generate the view volume shown in  are obtained by considering the shear transformation of the projection vector if the projection vector is specified in world coordinates it must first be transformed to viewing coordinates using the rotation matrix dis cussed in section  the projection vector is unaffected by the translation since it is simply a direction with no fixed position  for graphics packages that allow specification of the projection vector in viewing coordinates we apply the shear directly to the input elements of the projection vector  suppose the elements of the projection vector in viewing coordinates are vp  py py pa  19 we need to determine the elements of a shear matrix that will align the projection vector v with the view plane normal vector n   this transformation can be expressed as window vv  a figure 36 oblique projection vector and associated view volume   29  where my raue is equivalent to the parallel projection matrix 10 and represents a z axis shear of the form mparattet  21  occ  ooro oergra me ooo the explicit transformation equations from 20 in terms of shear parameters a and b are o p  ap o p  bp  22  so that the values for the shear parameters are a ph ope 23  thus we have the general parallel projection matrix in terms of the ele ments of the projection vector as  p p  p p 0 myaraiel   24  ooo this matrix is then concatenated with transformation r  t from section to produce the transformation from world coordinates to parallel projection coordi nates for an orthographic parallel projection p  p   and myanne is the iden tity matrix from  we can relate the components of the projection vec tor to parameters l a and  section  by similar triangles we see that l cos _ px  ps 25 lsind _ _py zz pz which illustrates the equivalence of the elements of transformation matrices and 24 in eqs 25 z and p are of opposite signs and for the positions il lustrated in    section view volumes and general projection transformations  we   x51 vp of   relationship between the parallel projection vector v and parameters z l a and   general perspective projection transformations with the phigs programming standard the projection reference point can be lo cated at any position in the viewing system except on the view plane or between the front and back clipping planes  shows the shape of a finite view volume for an arbitrary position of the projection reference point we can obtain the general perspective projection transformation with the following two opera tions  shear the view volume so that the centerline of the frustum is perpendicu lar to the view plane  scale the view volume with a scaling factor that depends on z  the second step scaling the view volume is equivalent to the perspective trans formation discussed in section a shear operation to align a general perspective view volume with the pro    frustum centerline view volume view plane  xprae vero zoro   general shape for the perspective view volume witha projection reference point that is not on the  axis    frustum centerline ux ya  iy   pf  z t  i i f ifs  fa a d  r  if   uy view plane z  z   te  i  vd c twi  vd enter of window shearing a general perspective view   volume to center it on the projection pep ypeo pep window  jection window is shown in  this transformation has the effect of shift ing all positions that lie along the frustum centerline including the window cen ter to a line perpendicular to the view plane with the projection reference point at a general position x   vprp zerp e the transformation involves a combination 2z axis shear and a translation  a alyy  pep 26  mohear  oo of oor where the shear parameters are xpp  xwapin  xwmax  torn 27  p  yew  yomn  ylma  zoey points within the view volume are transformed by this operation as xe x  az  y yy ft wz zpy  28  z when the projection reference point is on the z axis xpj9  vprp  once we have converted a position x y  in the onal view volume to position x  y   in the sheared frustum we then appiy a scaling transformation to produce a regular parallelepiped   the transformation for this con version is section  view volumes and general projection transformations  chapter zz  zz we  tr uj three dimensional viewing x x me   onl e    zprp 2p 29 we y   yon zap  zprp  2pm  and the homogeneous matrix representation is pry aopen zyrp  sup zoep zup t ty pry yory2up zomp z zo   pry op pry up  macaie  0 30 a te tom orp  zep 2pm  2vp therefore the general perspective projection transformation can be ex pressed in matrix form as mperspective  mycate  mshea  31 the complete transformation from world coordinates to perspective projection coordinates is obtained by right concatenating myerspenve with the composite viewing transformation r  t from section  in this section we first explore the general ideas involved in three dimensional clipping by considering how clipping could be performed using the view vol ume clipping planes directly then we discuss more efficient methods using nor malized view volumes and homogeneous coordinates   an algorithm for three dimensional clipping identifies and saves all surface segments within the view volume for display on the output device all parts of objects that are outside the view volume are discarded clipping in three dimen sions can be accomplished using extensions of two dimensional clipping meth ods instead of clipping against straight line window boundaries we now clip objects against the boundary planes of the view volume  to clip a line segment against the view volume we would need to test the relative position of the line using the view volume s boundary plane equations by substituting the line endpoint coordinates into the plane equation of each boundary in turn we could determine whether the endpoint is inside or outside that boundary an endpoint x y z of a line segment is outside a boundary plane if ax  by  cz  d o where a b c and d are the plane parameters for that boundary similarly the point is inside the boundary if ar  by  cz  d  lines with both endpoints outside a boundary plane are discarded and those with both endpoints inside all boundary planes are saved the intersection of a line with a boundary is found using the line equations along with the plane equation intersection coordinates x y  z  are values that are on the line and that satisfy the plane equation ax  by  cz  d  to clip a polygon surface we can clip the individual polygon edges first we could test the coordinate extents against each boundary of the view volume to determine whether the object is completely inside or completely outside that boundary if the coordinate extents of the object are inside all boundaries we save it if the coordinate extents are outside all boundaries we discard it other wise we need to apply the intersection calculations we could do this by deter mining the polygon edge intersection positions with the boundary planes of the view volume as described in the previous paragraph  as in two dimensional viewing the projection operations can take place be fore the view volume clipping or after clipping all objects within the view vol ume map to the interior of the specified projection window the last step is to transform the window contents to a two dimensional viewport which specifies the location of the display on the output device  clipping in two dimensions is generally performed against an upright rec tangle that is the dip window is aligned with the x and y axes this greatly sim plifies the clipping calculations because each window boundary is defined by one coordinate value for example the intersections of all lines crossing the left boundary of the window have an x coordinate equal to the left boundary  view volume clipping boundaries are planes whose orientations depend on the type of projection the projection window and the position of the projection reference point since the front and back clipping planes are parallel to the view plane each has a constant z coordinate value the z coordinate of the intersec tions of lines with these planes is simply the z coordinate of the corresponding plane but the other four sides of the view volume can have arbitrary spatial ori entations to find the intersection of a line with one of the view volume bound aries means that we must obtain the equation for the plane containing that boundary polygon this process is simplified if we convert the view volume be fore clipping to a rectangular parallelepiped in other words we first perform the projection transformation which converts coordinate values in the view volume to orthographic parallel coordinates then we carry out the clipping calculations  clipping against a regular parallelepiped is much simpler because each sur face is now perpendicular to one of the coordinate axes as seen in  the top and bottom of the view volume are now planes of constant y the sides are planes of constant x and the front and back are planes of constant z a line cut ting through the top plane of the parallelepiped for example has an intersection point whose y coordinate value is that of the top plane  in the case of an orthographic parallel projection the view volume is al ready a rectangular parallelepiped as we have seen in section cblique pro jection view volumes are converted to a rectangular parallelepiped by the shear ing operation and perspective view volumes are converted in general with a combination shear scale transformation  y view volume   an object intersecting a rectangular parallelepiped view volume   section clipping  modeling coordinates  normalized view volumes  shows the expanded phigs transformation pipeline at the first step a scene is constructed by transforming object descriptions from modeling coordinates to world coordinates next a view mapping converts the world de scriptions to viewing coordinates at the projection stage the viewing coordi nates are transformed to projection coordinates which effectively converts the view volume into a rectangular parallelepiped then the parallelepiped is mapped into the unit cube a normalized view volume called the normalized projection coordinate system the mapping to normalized projection coordi nates is accomplished by transforming points within the rectangular paral lelepiped into a position within a specified three dimensional viewport which occupies part or all of the unit cube finally at the workstation stage normalized projection coordinates are converted to device coordinates for display the normalized view volume is a region defined by the planes x x y y z z  32  a similar transformation sequence is used in other graphics packages with indi vidual variations depending on the system the gl package for example maps the rectangular parallelepiped into the interior of a cube with boundary planes at positions in each coordinate direction  there are several advantages to clipping against the unit cube instead of the original view volume or even the rectangular parallelepiped in projection coordi nates first the normalized view volume provides a standard shape for repre senting any sized view volume this separates the viewing transformations from any workstation considerations and the unit cube then can be mapped to a workstation of any size second clipping procedures are simplified and stan dardized with unit clipping planes or the viewport planes and additional clip ping planes can be specified within the normalized space before transforming to modeling world viewing viewing transformatian coordinates transformation coordinates    age  ge normalized projection prajection normalization    c  canes transformation coordinates transformation projection coordinates device l workstation  i  transformation coardinates eel frenre 42   expanded phigs transformation pipeline device coordinates third depth cueing and visible surface determination are simplified since the z axis always points toward the viewer the projection refer ence point has now been transformed to the z axis  front faces of objects are those with normal vectors having a component along the positive z direction and back surfaces are facing in the negative z direction  mapping positions within a rectangular view volume to a three dimen sional rectangular viewport is accomplished with a combination of scaling and translation similar to the operations needed for a two dimensional window to viewport mapping we can express the three dimensional transformation matrix for these operations in the form   33  factors d  d and d are the ratios of the dimensions of the viewport and regu lar parallelepiped view volume in the x y and z directions   xv imax  xv min  xwrin ymax yomin ywrrax  yeni 34  20max  20min d  zack  ztront  wm  yw nax peace  wrinr f min zon m mn  hon xvinine y inine ivinin  parallelepiped section clipping view volume unit cube  a  b   dimensions of the view volume and three dimensional viewport  onan w maxe zy  3d viewport mon   where the view volume boundaries are established by the window limits 7w pin xweays yin ywmox and the positions zpont ana zpacx of the front and back planes viewport boundaries are set with the coordinate values x_n umax yomins ymax zwmine and zupax the additive translation factors k  k  and k in the transforma tion are ky  xu pmin  xwmnind k  ymin  ymindy k  20min  2front dy 35  viewport clipping lines and polygon surfaces in a scene can be clipped against the viewport boundaries with procedures similar to those used for two dimensions except that objects are now processed against clipping planes instead of clipping edges curved surfaces are processed using the defining equations for the surface boundary and locating the intersection lines with the parallelepiped planes  the two dimensional concept of region codes can be extended to three di mensions by considering positions in front and in back of the three dimensional viewport as well as positions that are left right below or above the volume for two dimensional clipping we used a four digit binary region code to identify the position of a line endpoint relative to the viewport boundaries for three dimen sional points we need to expand the region code to six bits each point in the de scription of a scene is then assigned a six bit region code that identifies the rela tive position of the point with respect to the viewport for a line endpoint at position x y z  we assign the bit positions in the region code from right to left as bit  ifx  xv   left bit  if   xvmax right bit  ify yv  below bit  if y  yupna above bit5  if z0_  front  bit  if z  2v   back  for example a region code of identifies a point as above and behind the viewport and the region code indicates a point within the volume  a line segment can be immediately identified as completely within the viewport if both endpoints have a region code of if either endpoint of a line segment does not have a region cade of we perform the logical and operation on the two endpoint codes the result of this and operation will be nonzero for any line segment that has both endpoints in one of the six outside re gions for example a nonzero value will be generated if both endpoints are be hind the viewport or both endpoints are above the viewport if we cannot iden tify a line segment as completely inside or completely outside the volume we test for intersections with the bounding planes of the volume  as in two dimensional line clipping we use the calculated intersection of a line with a viewport plane to determine how much of the line can be thrown away the remaining part of the fine is checked against the other planes and we continue until either the line is totally discarded or a section is found inside the volume  equations for three dimensional line segments are conveniently expressed in parametric form the two dimensional parametric clipping methods of cyrus beck or liang barsky can be extended to three dimensional scenes for a line segment with endpoints p   x  y   and p    yz  we can write the parametric line equations as x x t  x u osfuel ym t y wu z    u 36  coordinates x y z represent any point on the line between the two endpoints at u  we have the point p  and u  puts us at py  to find the intersection of a line with a plane of the viewport we substitute the coordinate value for that plane into the appropriate parametric expression of eq 36 and solve for u for instance suppose we are testing a line against the 2umin plane of the viewport then 20min  w mn  37  when the calculated value for u is not in the range from to the line segment does not intersect the plane under consideration at any point between endpoints p and p  line a in   if the calculated value for u in eq 37 is in the interval from to we calculate the intersection s x and y coordinates as  x    n  hae  2y  way  oh vl an  38   if either x or y is not in the range of the boundaries of the viewport then this line intersects the front plane beyond the boundaries of the volume line b in fig 44  clipping in homogeneous coordinates although we have discussed the clipping procedures in terms of three dimen sional coordinates phigs and other packages actually represent coordinate posi tions in homogeneous coordinates this allows the various transformations to be tepresented as by matrices which can be concatenated for efficiency after all viewing and other transformations are complete the homogeneous coordinate positions are converted back to three dimensional points  as each coordinate position enters the transformation pipeline it is con verted to a homogeneous coordinate representation  x y   x y z  section clipping  y nex  en    side view of two line segments that are to be clipped against the zu nip plane of the viewport for line a eq 37 produces a value of u that is outside the range from to for line b eqs 38 produce intersection coordinates that are outside the range from yup to yrax  the various transformations are applied and we obtain the final homogeneous point  xb ay m2 aya aye x h ay an ax ary y y 39 zy ax ay ay z h aa 4qn gn ay where the homogeneous parameter h may not be in fact can have any real value clipping is then performed in homogeneous coordinates and clipped ho mogeneous positions are converted to nonhomogeneous coordinates in three dimensional normalized projection coordinates   vet 40  we will of course have a problem if the magnitude of parameter h is very small or has the value but normally this will not occur if the transformations are car ried out properly at the final stage in the transformation pipeline the normal ized point is transformed to a three dimensional device coordinate point the xy position is plotted on the device and the z component is used for depth informa tion processing  setting up clipping procedures in homogeneous coordinates allows hard ware viewing implementations to use a single procedure for both parallel and perspective projection transformations objects viewed with a parallel projection could be correctly clipped in three dimensional normalized coordinates pro vided the value  has not been altered by other operations but perspective projections in general produce a homogeneous parameter that no longer has the value converting the sheared frustum to a rectangular parallelepiped can change the value of the homogeneous parameter so we must clip in homoge neous coordinates to be sure that the clipping is carried out correctly also ratio nal spline representations are set up in homogeneous coordinates with arbitrary values for the homogeneous parameter including h  negative values for the homogeneous parameter can also be generated in perspective projections when coordinate positions are behind the projection reference point this can occur in applications where we might want to move inside of a building or other object to view its interior  to determine homogeneous viewport clipping boundaries we note that any homogeneous coordinate position x  y   is inside the viewport if it sat isfies the inequalities  xvnin  s waa ymin  ym zumin   s2vepax 41  2h h thus the homogeneous clipping limits are wxvmin sx_ sma ayvmin s vn shyvmax zin sz sanz if  o avenax sx_ savg in hyp max sv_ shyv pine nz pax sz haw ain ifh  42  and clipping is carried out with procedures similar to those discussed in the pre vious section to avoid applying both sets of inequalities in 42 we can simply negate the coordinates for any point with h and use the clipping inequalities for h   most graphics processes are now implemented in hardware typically the view ing visible surface identification and shacing algorithms are available as graph ics chip sets employing vlsi very large scale integration circuitry techniques hardware systems are now designed to transform clip and project objects to the output device for either three dimensional or two dimensional applications   illustrates an arrangement of components in a graphics chip set to implement the viewing operations we have discussed in this chapter the chips are organized into a pipeline for accomplishing geometric transformations coordinate system transformations projections and clipping four initial chips are provided for matrix operations involving scaling translation rotation and the transformations needed for converting world coordinates to projection coor dinates each of the next six chips performs clipping against one of the viewport boundaries four of these chips are used in two dimensional applications and the other two are needed for clipping against the front and back planes of the three dimensional viewport the last two chips in the pipeline convert viewport coordinates to output device coordinates components for implementation of vis ible surface identification and surface shading algorithms can be added to this set to provide a complete three dimensional graphics system  section hardware implementations world coordinate object descriptions   transformation operations      conversion to device coordinates    a hardware implementation of three dimensional viewing operations using chips for the coordinate transformations and clipping operations  other specialized hardware implementations have been developed these include hardware systems for processing octree representations and for display ing three dimensional scenes using ray tracing algorithms chapter   several procedures are usually provided in a three dimensional graphics library to enable an application program to set the parameters for viewing transforma tions there are of course a number of different methods for structuring these procedures here wwe discuss the phigs functions for three dimensional view ing  with parameters specified in world coordinates elements of the matrix for transforming world coordinate descriptions to the viewing reference frame are calculated using the function evaluatevieworientationmatrix3 x0 yo  xn yn zn xv yv 2v error viewmatrix  this function creates the viewmatrix from input coordinates defining the view ing system as discussed in section parameters x0 y0 and specify the origin view reference point of the viewing system world coordinate vector xn yn zn defines the normal to the view plane and the direction of the positive z  viewing axis and world coordinate vector xv yv zv gives the elements of the view up vector the projection of this vector perpendicular to xn yn zn estab lishes the direction for the positive y axis of the viewing system an integer error code is generated in parameter error if input values are not specified correctly for example an error will be generated if we set xv yv zv parallel to x yn zn  to specify a second viewing coordinate system we can redefine some or all of the coordinate parameters and invoke evaluatevieworientationma trix3 with a new matrix designation in this way we can set up any number of world to viewing coordinate matrix transformations  the matrix projmatrix for transforming viewing coordinates to normal ized projection coordinates is created with the function evaluateviewmappingmatrix3 xwmin xwmax ywmnin ywmax xvmin xvmax yvmin yvmax zvmin zvmax projtype xprojref yprojkef zprojref zview zback zfront error projmatrix  window limits on the view plane are given in viewing coordinates with parame ters xwmin xwmax ywmin and ywmax limits of the three dimensional viewport within the unit cube are set with normalized coordinates xvmin xvmax yvmin yvmax zyvmin and zvmax parameter projtype is used to choose the projec tion type as either parallel or perspective coordinate position xprojref yproj ref zprojref sets the projection reference point this point is used as the cen ter of projection if projtype is set to perspective otherwise this point and the center of the view plane window define the parallel projection vector the posi tion of the view plane along the viewing z axis is set with parameter zview po sitions along the viewing z axis for the front and back planes of the view volume are given with parameters zfront and zback and the error parameter re turns an integer error code indicating erroneous input data any number of pro jection matrix transformations can be created with this function to obtain various three dimensional views and projections  a particular combination of viewing and projection matrices is selected on a specified workstation with setviewrepresentation3 ws viewindex viewmatrix projmatrix xclipmin xclipmax yelipmin yclipmax zclipmin zclipmax clipxy clipback clipfroent  parameter ws is used to select the workstation and parameters viewmatrix and projmatrix select the combination of viewing and projection matrices to be used the concatenation of these matrices is then placed in the workstation view table and referenced with an integer value assigned to parameter viewindex limits given in normalized projection coordinates for clipping a scene are set with parameters xclipmin xclipmax yclipmin yclipmax zclipmin and zclipmax these limits can be set to any values but they are usually set to the limits of the viewport values of clip or noclip are assigned to parameters cl ipxy clipfront and clipback to turn the clipping routines on or off for the xy planes or for the front or back planes of the view volume or the defined clipping limits  section three dimensionat viewing functions   there are several times when it is convenient to bypass the clipping rou tines for initial constructions of a scene we can disable clipping so that trial placements of objects can be displayed quickly also we can eliminate one or more of the clipping planes if we know that all objects are inside those planes  once the view tables have been set up we select a particular view represen tation on each workstation with the function setviewindex viewindex  the view index number identifies the set of viewing transformation parameters that are to be applied to subsequently specified output primitives for each of the active workstations  finally we can use the workstation transformation functions to select sec tions of the projection window for display on different workstations these oper ations are similar to those discussed for two dimensional viewing except now our window and viewport regions aia three dimensional regions the window function selects a region of the unit cube and the viewport function selects a dis play region for the output device limits in normalized projection cvordinates for the window are set with setworkstationwindow3 ws xwswindmin xwswindmax ywswindmin ywswindmax zwswindmin zwswindmax  and limits in device coordinates for the viewport are set with setworkstationviewport3 ws xwsvportmin xwsvportmax ywsvportmin ywsvportmax zwsvportmin zwsvportmax   shows an example of interactive selection of viewing parameters in the phigs viewing pipeline using the phigs toolkit software this software was developed at the university of manchester to provide an interface to phigs with a viewing editor windows menus and other interface tools  for some applications composite methods are used to create a display con sisting of multiple views using different camera orientations  shows   using the phigs toolkit developed at the university of manchester to interactively control parameters in the viewing pipeline  courtesy of t l j howard   g williams and w t hewit  department of computer science university of manchester united kingdom   a wide angle view for a virtual reality display generated with seven sections each from a slightly different viewing direction  cauriesy of the national center for supercomputing applications university of illinois at urbana chamrpaign   a wide angle perspective display produced for a virtual reality environment the wide viewing angle is attained by generating seven views of the scene from the same viewing position but with slight shifts in the viewing direction  summary viewing procedures for three dimensional scenes follow the general approach used in two dimensional viewing that is we first create a world coordinate scene from the definitions of objects in modeling coordinates then we set up a viewing coordinate reference frame and transfer object descriptions from world coordinates to viewing coordinates finally viewing coordinate descriptions are transformed to device coordinates  unlike two dimensional viewing however three dimensional viewing re quires projection routines to transform object descriptions to a viewing plane be fore the transformation to device coordinates also three dimensional viewing operations involve more spatial parameters we can use the camera analogy to describe three dimensional viewing parameters which include camera position and orientation a viewing coordinate reference frame is established with a view reference point a view plane normal vector n and a view up vector v view plane position is then established along the viewing z axis and object descrip tions are projected to this plane either perspective projection or parallel projec tion methods can be used to transfer object descriptions to the view plane  parallel projections are either orthographic or oblique and can be specified with a projection vector orthographic parallel projections that display more than one face of an object are called axonometric projections an isometric view of an object is obtained with an axonometric projection that foreshortens each principal axis by the same amount commonly used oblique projections are the cavalier projection and the cabinet projection perspective projections of objects are ob tained with projection lines that meet at the projection reference point  objects in three dimensional scenes are clipped against a view volume the top bottom and sides of the view volume are formed with planes that are paral lel to the projection lines and that pass through the view plane window edges front and back planes are used to create a closed view volume for a parallel pro jection the view volume is a parallelepiped and for a perspective projection the view volume is a frustum objects are clipped in three dimensional viewing by testing object coordinates against the bounding planes of the view volume clip ping is generally carried out in graphics packages in homogeneous coordinates  summary  after all viewing and other transformations are complete then homogeneous co ordinates are converted to three dimensional cartesian coordinates  references for additional information on three dimensional viewing and clipping operations in phigs and phigs  see howard et al   gaskins  and blake  discussions of three dimensional clipping and viewing algorithms can be found in blinn and newell  cyrus and beck  riesenfeld  liang and barsky  arvo  and blinn   exercises       10  11  12  13  14 15  16  17  write a procedure to implement the evaluatevieworientationmatrix3 func tion using eqs through  write routines to implement the set viewrepresentation3 and set viewindex functions  write a procedure to transform the vertices of a polyhedron to projection coordinates using a parallel projection with a specified projection vector  write a procedure to obtain different parallel projection views of a polyhedron by first applying a specified rotation  write a procedure to perform a one point perspective projection of an object  write a procedure to perform a two point perspective projection of an object develop a routine to perform a three point perspective projection of an object  write a routine to convert a perspective projection frustum to a regular paral lelepiped  extend the sutherland hodgman polygon clipping algorithm to clip three dimen sional planes against a regular parallelepiped  devise an algorithm to clip objects in a scene against a defined frustum compare the operations needed in this algorithm to those needed in an algorithm that clips against a regular parallelepiped modify the two dimensional liang barsky tine clipping algorithm to clip three di mensional lines against a specified regular parallelepiped  modify the two dimensional liang barsky line clipping algorithm to clip a given polyhedron against a specified regular parallelepiped  set up an algorithm for clipping a polyhedron against a parallelepiped  write a routine to perform clipping in homogeneous coordinates  using any clipping procedure and orthographic parallel projections write a program to perform a complete viewing transformation from world coordinates to device co ordinates  using any clipping procedure write a program to perform a complete viewing trans formation from world coordinates to device coordinates for any specified parallel projection vector  write a program to perform all steps in the viewing pipeline for a perspective trans formation  chapter visible surface detection methods      a major consideration in the generation of realistic graphics displays is identifying those parts of a scene that are visible from a chosen viewing position there are many approaches we can take to solve this problem and nu merous algorithms have been devised for efficient identification of visible objects for different types of applications some methods require more memary some in volve more processing time and some apply only to special types of objects de ciding upon a method for a particular application can depend on such factors as the complexity of the scene type of objects to be displayed available equipment and whether static or animated displays are to be generated the various algo rithms are referred to as visible surface detection methods sometimes these methods are also referred to as hidden surface elimination methods although there can be subtle differences between identifying visible surfaces and eliminat ing hidden surfaces for wireframe displays for example we may not want to actually eliminate the hidden surfaces but rather to display them with dashed boundaries or in some other way to retain information about their shape in this chapter we explore some of the most commonly used methods for detecting visi ble surfaces in a three dimensional scene  algorithms visible surface detection algorithms are broadly classified according to whether they deal with object definitions directly or with their projected images these two approaches are called object space methods and image space methods re spectively an object space method compares objects and parts of objects to each other within the scene definition to determine which surfaces as a whole we should label as visible in an image space algorithm visibility is decided point by point at each pixel position on the projection plane most visible surface algo rithms use image space methods although object space methods can be used ef fectively to locate visible surfaces in some cases line display algorithms on the other hand generally use object space methods to identify visible lines in wire frame displays but many image space visible surface algorithms can be adapted easily to visible line detection  although there are major differences in the basic approach taken by the var ious visible surface detection algorithms most use sorting and coherence meth ods to improve performance sorting is used to facilitate depth comparisons by ordering the individual surfaces in a scene according to their distance from the view plane coherence methods are used to take advantage of regularities in a scene an individual scan line can be expected to contain intervals runs of con stant pixel intensities and scan line patterns often change little from one line to the next animation frames contain changes only in the vicinity of moving ob jects and constant relationships often can be established between objects and surfaces in a scene  a fast and simple object space method for identifying the back faces of a polyhe dron is based on the inside outside tests discussed in chapter a point x y  is inside a polygon surface with plane parameters a b c and d if ax  by cz d  when an inside point is along the line of sight to the surface the polygon must be a back face we are inside that face and cannot see the front of it from our viewing position  we can simplify this test by considering the normal vector n toa polygon surface which has cartesian components a b c  in general if v is a vector in the viewing direction from the eye or camera  position as shown in  then this polygon is a back face if v n o  furthermore if object descriptions have been converted to projection coordinates and our viewing direction is parallel to the viewing z axis then v   v  and v n v c so that we only need to consider the sign of c the z component of the normal vector n in a right handed viewing system with viewing direction along the nega tive z axis   the polygon is a back face if c  also we cannot see any face whose normal has component c  since our viewing direction is grazing that polygon thus in general we can label any polygon as a back face if its nor mal vector has a z component value  c 33 n abc    vector  in the viewing direction and a back face normal vector n of a polyhedron  section back face detection     view of a concave polyhedron with one face partially hidden by other faces    n a b c  a polygon surface with plane parameter c  oina right handed  viewing coordinate system is vv identified as a back face when the viewing direction is along the     negative axis  similar methods can be used in packages that employ a left handed view ing system in these packages plane parameters a b c and d can be calculated from polygon vertex coordinates specified in a clockwise direction instead of the counterclockwise direction used in a right handed system  inequality then remains a valid test for inside points also back faces have normal vectors that point away from the viewing position and are identified by c  when the viewing direction is along the positive z axis  by examining parameter c for the different planes defining an object we can immediately identify all the back faces for a single convex polyhedron such as the pyramid in  this test identifies all the hidden surfaces on the ob ject since each surface is either completely visible or completely hidden also if a scene contains only nonoverlapping convex polyhedra then again all hidden surfaces are identified with the back face method  for other objects such as the concave polyhedron in  more tests need to be carried out to determine whether there are additional faces that are to tally or partly obscured by other faces and a general scene can be expected to contain overlapping objects along the line of sight we then need to determine where the obscured objects are partially or completely hidden by other objects in general back face removal can be expected to eliminate about half of the polygon surfaces in a scene from further visibility tests  a commonly used image space approach to detecting visible surfaces is the depth buffer method which compares surface depths at each pixel position on the projection plane this procedure is also referred to as the z buffer method since object depth is usually measured from the view plane along the z axis of a viewing system each surface of a scene is processed separately one point at a time across the surface the method is usually applied to scenes containing only polygon surfaces because depth values can be computed very quickly and the method is easy to implement but the method can be applied to nonplanar sur faces  with object descriptions converted to projection coordinates each x y  position on a polygon surface corresponds to the orthographic projection point x y on the view plane therefore for each pixel position x y on the view plane object depths can be compared by comparing z values  shows three surfaces at varying distances along the orthographic projection line from position x y in a view plane taken as the x y plane surface is closest at this position so its surface intensity value at x y is saved  we can implement the depth buffer algorithm in normalized coordinates so that z values range from at the back clipping plane to   at the front clip at view plane position x y  surface s has the smallest depth from the view plane and so is visible at that position  d  a a ok  ping plane the value of z   can be set either to for a unit cube or to the largest value that can be stored on the system  as implied by the name of this method two buffer areas are required a depth buffer is used to store depth values for each x y position as surfaces are processed and the refresh buffer stores the intensity values for each position ini tially all positions in the depth buffer are set to minimum depth  and the re fresh buffer is initialized to the background intensity each surface listed in the polygon tables is then processed one scan line at a time calculating the depth z value at each x y pixel position the calculated depth is compared to the value previously stored in the depth buffer at that position if the calculated depth is greater than the value stored in the depth buffer the new depth value is stored and the surface intensity at that position is determined and placed in the same xy location in the refresh buffer  we summarize the steps of a depth buffer algorithm as follows     initialize the depth buffer and refresh buffer so that for all buffer posi tions x y  depth x y   refresh x    lbackgnd previously stored values in the depth buffer to determine visibility   calculate the depth z for each x y position on the polygon  ifz  depth x y  then set depth y y z  refresh x y  jun xy  where lpackgna is the value for the background intensity and qu  x y is the projected intensity value for the surface at pixel position x y  after all surfaces have been processed the depth buffer contains depth values for the visible surfaces and the refresh buffer contains   for each position on each polygon surface compare depth values to    i the corresponding intensity values for those surfaces   depth values for a surface position x y are calculated from the plane equation for each surface  _ ax  by d c  zz section depth butfer method y axis  y x x4 yaxis   from position x y on a scan line the next position across the line has coordinates  x  y  and the position immediately below on the next line has coordinates  iy  1d  for any scan line   adjacent horizontal positions across the line differ by and a vertical y value on an adjacent scan line differs by if the depth of posi tion x y has been determined to be z then the depth z of the next position x  y along the scan line is obtained from eq as     agw  by d to cc  03 n il n  o  the ratio a c is constant for each surface so succeeding depth values across a scan line are obtained from preceding values with a single addition  on each scan line we start by calculating the depth on a left edge of the polygon that intersects that scan line   depth values at each successive position across the scan line are then calculated by eq  we first determine the y coordinate extents of each polygon and process the surface from the topmost scan line to the bottom scan line as shown in fig  starting at a top vertex we can recursively calculate x positions down a left edge of the polygon as x  x  m where m is the slope of the edge   depth values down the edge are then obtained recursively as zz  a m b our cc if we are processing down a vertical edge the slope is infinite and the recursive calculations reduce tu goszt ol an alternate approach is to use a midpoint method or bresenham type al gorithm for determining x values on left edges for each scan line also the method can be applied to curved surfaces by determining depth and intensity values at each surface projection point  for polygon surfaces the depth buffer method is very easy to implement and it requires no sorting of the surfaces in a scene but it does require the avail ability of a second buffer in addition to the refresh buffer a system with a resolu  top scan tine  y scan lire left edge intersection  bottom scan line  scan lines intersecting a polygon surface tion of by  section a buffer method y scan line y scan line   it xx   intersection positions on successive scan lines along a left polygon edge  for example would require over a million positions in the depth buffer with each position containing enough bits to represent the number of depth increments needed one way to reduce storage requirements is to process one sec tion of the scene at a time using a smaller depth buffer after each view section is processed the buffer is reused for the next section  an extension  ethod f the ideas in the depth buffer method is the a buffer method at the other end of the alphabet from z buffer  where z represents depth  the a  buffer method developed by tepresents an antialiased area averaged accumulation buffer method lucasfilm for implementation in the surface rendering system called reyes an acronym for renders everything you ever saw  a drawback of the depth buffer method is that it can only find one visible surface at each pixel position in other words it deals only with opaque surfaces and cannot accumulate intensity values for more than one surface as is necessary if transparent surfaces are to be displayed   the a buffer method ex  pands the dept list of surfaces ation at each pi h buffer so that each position in the buffer can reference a linked thus more than one surface intensity can be taken into consider xel position and object edges can be antialiased  each position in the a buffer has two fields   depth field  stores a positive or negative real number  intensity field  stores surface intensity information or a pointer value  background opaque  surface  foreground  transparent oo surface viewing an opaque surface through a transparent surface requires multiple surface intensity contributions for pixel positions   flo gea  depth intensiry depth intensity field field field field a  b   organization of an a buffer pixel position  a single surface overlap of the corresponding pixel area and b multiple surface overlap  if the depth field is positive the number stored at that position is the depth of a single surface overlapping the corresponding pixel area the intensity field then stores the rgb components of the surface color at that point and the percent of pixel coverage as illustrated in  a  if the depth field is negative this indicates multiple surface contributions to the pixel intensity the intensity field then stores a pointer to a linked list of sur face data as in  b  data for each surface in the linked list includes  rgb intensity components  opacity parameter percent of transparency  depth  percent of area coverage  surface identifier  other surface rendering parameters  pointer to next surface the a buffer can be constructed using methods similar to those in the depth buffer algorithm scan lines are prucessed to determine surface overlaps of pixels across the individual scanlines surfaces are subdivided into a polygon mesh and clipped against the pixel boundaries using the opacity factors and percent of surface overlaps we can calculate the intensity of each pixel as an av erage of the contributions from the overlapping surfaces  this image space method for removing hidden surfaces is an extension of the scan line algorithm for filling polygon interiors instead of filling just one surface we now deal with multiple surfaces as each scan line is processed ail polygon surfaces intersecting that line are examined to determine which are visible across each scan line depth calculations are made for each overlapping surface to determine which is nearest to the view plane when the visible surface has been determined the intensity value for that position is entered into the refresh buffer  we assume that tables are set up for the various surfaces as discussed in chapter which include both an edge table and a polvgon table the edge table contains coordinate endpoints for each line in the scene the inverse slope of each line and pointers into the polygon table to identify the surfaces bounded by each line the polygon table contains coefficients of the plane equation for each sur face intensity information for the surfaces and possibly pointers into the edge table to facilitate the search for surfaces crossing a given scan line we can set up an active list of edges from information in the edge table this active list will con tain only edges that cross the current scan line sorted in order of increasing x in addition we define a flag for each surface that is set on or off to indicate whether a position along a scan line is inside or outside of the surface scan lines are processed from left to right at the leftmost boundary of a surface the surface flag is turned on and at the rightmost boundary it is tumed off   illustrates the scan line method for locating visible portions of surfaces for pixel positions along the line the active list for scan line contains information from the edge table for edges ab bc eh and fg for positions along this scan line between edges ab and bc only the flag for surtace s is on therefore no depth calculations are necessary and intensity information for sur face s is entered from the polygon table into the refresh buffer similarly be tween edges eh and fg only the flag for surface s is on no other positions along scan line intersect surfaces so the intensity values in the other areas are set to the background intensity the background intensity can be loaded through out the buffer in an initialization routine  for scan lines and in  the active edge list contains edges ad eh bc and fg along scan line from edge ad to edge eh only the flag for surface s is on but between edges eh and bc the flags for both surfaces are on in this interval depth calculations must be made using the plane coefficients for the two surfaces for this example the depth of surface is assumed to be less than that of s2 so intensities for surface are loaded into the refresh buffer until boundary bc is encountered then the flag for surface s goes off and intensities for surface s2 are stored until edge fg is passed  we can take advantage of coherence along the scan lines as we pass from one scan line to the next in  scan line has the same active list of edges as scan line since no changes have occurred in line intersections it is unneces sary again to make depth calculations between edges eh and bc the two sur    scan lines crossing the projection of two surfaces   and s  in the view plane dashed lines indicate the boundaries of hidden surfaces  section scan line method   intersecting and cyclically overlapping surfaces that alternately obscure one another  subdividing  line  subdividing  faces must be in the same orientation as determined on scan line so the intensi ties for surface s can be entered without further calculations  any number of overlapping polygon surfaces can be processed with this scan line method flags for the surfaces are set to indicate whether a position is inside or outside and depth calculations are performed when surfaces overlap when these coherence methods are used we need to be careful to keep track of which surface section is visible on each scan line this works only if surfaces do not cut through or otherwise cyclically overlap each other   lf any kind of cyclic overlap is present in a scene we can divide the surfaces to eliminate the overlaps the dashed lines in this figure indicate where planes could be subdi vided to form two distinct surfaces so that the cyclic overlaps are eliminated  using both image space and object space operations the depth sorting method performs the following basic functions  surfaces are sorted in order of decreasing depth  surfaces are scan converted in order starting with the surface of greatest depth  sorting operations are carried out in both image and object space and the scan conversion of the polygon surfaces is performed in image space  this method for solving the hiddew surface problem is often referred to as the painter s algorithm in creating an oil painting an artist first paints the back ground colors next the most distant objects are added then the nearer objects and so forth at the final step the foreground objects are painted on the canvas over the background and other objects that have been painted on the canvas each layer of paint covers up the previous layer using a similar technique we first sort surfaces according to their distance from the view plane the intensity values for the farthest surface are then entered into the refresh buffer taking each succeeding surface in turn in decreasing depth order  we paint the sur face intensities onto the frame buffer over the intensities of the previously processed surfaces  painting polygon surfaces onto the frame buffer according to depth is carried out in several steps assuming we are viewing along the z direction surfaces are ordered on the first pass according to the smallest z value on each surface surface s with the greatest depth is then compared to the other sur faces in the list to determine whether there are any overlaps in depth if no depth overlaps occur s is scan converted  shows two surfaces that overlap in the xy plane but have no depth overlap this process is then re peated for the next surface in the list as long as no overlaps occur each sur face is processed in depth order until ail have been scan converted if a depth overlap is detected at any point in the list we need to make some additional comparisons to determine whether any of the surfaces should be reordered  we make the following tests for each surface that overlaps with s if any one of these tests is true no reordering is necessary for that surface the tests are listed in order of increasing difficulty   the bounding rectangles in the xy plane for the two surfaces da not over lap  surface s is completely behind the overlapping surface relative to the view ing position  the overlapping surface is completely in front of s relative to the viewing position  the projections of the two surfaces onto the view plane do not overlap  we perform these tests in the order listed and proceed to the next overlapping surface as soon as we find one of the tests is true if all the overlapping surfaces pass at least one of these tests none of them is behind s no reordering is then necessary anc is scan converted  test is performed in two parts we first check for overlap in the x direc tion then we check for overlap in the y direction if either of these directions show no overlap the two planes cannot obscure one other an example of two  two surfaces with no depth overlap  section depth sorting method  surfaces that overlap in the z direction but not in the x direction is shown in fig 13  we can perform tests and with an inside outside polygon test that is we substitute the coordinates for all vertices of s into the plane equation for the overlapping surface and check the sign of the result if the plane equations are set up so that the outside of the surface is toward the viewing position then  is be hind s if all vertices of s are inside s    similarly s is completely in front of s if all vertices of s are outside of s   shows an overlap ping surface s that is completely in front of s but surface s is not completely inside s  test is not true  if tests through have all failed we try test by checking for intersections between the bounding edges of the two surfaces using line equations in the xy plane as demonstrated in  two surfaces may or may not intersect even though their coordinate extents overlap in the x y and z directions  should all four tests fail with a particular overlapping surface s  we inter change surfaces s and s in the sorted list an example of two surfaces that   lt xun xinax x min x mac my fryure 13 two surfaces with depth overlap  but no overlap in the x direction  x  surface sis completely behind  inside  the overlapping surface   zz s s _ ss _   x overlapping surface s is completely in front  outside  of surface s but s is not completely z behind    two surfaces with overlapping bounding rectangles in the xy plane  would be reordered with this procedure is given in  at this point we still do not know for certain that we have found the farthest surface from the view plane  illustrates a situation in which we would first inter change s and s  but since s obscures part of s  we need to interchange s and s to get the three surfaces into the correct depth order therefore we need to repeat the testing process for each surface that is reordered in the list  it is possible for the algorithm just outlined to get into an infinite loop if two or more surfaces alternately obscure each other as in  in such sit uations the algorithm would continually reshuffle the positions of the overlap ping surfaces to avoid such loops we can flag any surface that has been re ordered to a farther depth position so that it cannot be moved again if an attempt is made to switch the surface a second time we divide it into two parts to eliminate the cyclic overlap the original surface is then replaced by the twe new surfaces and we continue processing as before   a binary space partitioning bsp tree is an efficient method for determining object visibility by painting surfaces onto the screen from back to front as in the painter s algorithm the bsp tree is particularly useful when the view reference point changes but the objects in a scene are at fixed positions  applying a bsp tree to visibility testing involves identifying surfaces that are inside and outside the partitioning plane at each step of the space sub division relative to the viewing direction  illustrates the basic con cept in this algorithm with plane p  we first partition the space into two sets of objects one set of objects is behind or in back of plane p relative to the view ing direction and the other set is in front of p  since one object is intersected by plane p  we divide that object into two separate objects labeled a and b ob jects a and c are in front of p  and objects b and 2d are behind p  we next parti tion the space again with plane  and construct the binary tree representation shown in  b  in this tree the objects are represented as terminal nodes with front objects as left branches and back objects as right branches  s  zy  surface  has greater depth but obscures surface     three surfaces entered into the sorted surface list in the order   s  shauld be reordered s    s  chapter visible surface detection methods  pp  p p _ oe front pack von back  a region of space a is partitioned a c b d with two planes p and  to form ty the bsp tree representation in b  for objects described with polygon facets we chose the partitioning planes to coincide with the polygon planes the polygon equations are then used to identify inside and outside polygons and the tree is constructed with one partitioning plane for each polygon face any polygon intersected by a partition ing plane is split nto two parts when the bsp tree is complete we process the tree by selecting the surfaces for display in the order back to front so that fore ground objects are painted over the background objects fast hardware imple mentations for sonstructing and processing bsp trees are used in some systems  this technique for hidden surface removal is essentially an image space method but object space operations can be used to accomplish depth ordering of surfaces the area subdivision method takes advantage of area coherence ina scene by lo cating those view areas that represent part of a single surface we apply this method by successively dividing the total viewing area into smaller and smaller rectangles until each smail area is the projection of part of a single visible surface or no surface at all  to implement this method we need to establish tests tnat can quickly iden tify the area as part of a single surface or tell us that the area is too complex to an alyze easily starting with the total view we apply the tests to determine whether we should subdivide the total area into smaller rectangles if the tests indicate that the view is sufficiently complex we subdivide it next we apply the tests to each of the smaller areas subdividing these if the tests indicate that visibility of a section single surface is still uncertain we continue this process until the subdivisions  area subdivision method are easily analyzed as belonging to a single surface or until they are reduced to  the size of a single pixel an easy way to do this is to successively divide the area into four equal parts at each step as shown in  this approach is similar to that used in constructing a quadtree a viewing area with a resolution of by could be subdivided ten times in this way before a subarea is reduced to a point  tests to determine the visibility of a single surface within a specified area are made by comparing surfaces to the boundary of the area there are four pos sible relationships that a surface can have with a specified area boundary we can  describe these relative surface characteristics in the following way      surrounding surface one that completely encloses the area   overlapping surface one that is partly inside and partly outside the area  inside surface one that is completely inside the area      dividing a square area into outside surface one that is completely outside the area equal sized quadrants at each step the tests for determining surface visibility within an area can be stated in p terms of these four classifications no further subdivisions of a specified area are needed if one of the following conditions is true  all surfaces are outside surfaces with respect to the area  only one inside overlapping or surrounding surface is in the area  a surrounding surface obscures all other surfaces within the area bound aries  test can be carried out by checking the bounding rectangles of all surfaces against the area boundaries test can also use the bounding rectangles in the xy plane to identify an inside surface for other types of surfaces the bounding rec tangles can be used as an initial check if a single bounding rectangle intersects the area in some way additional checks are used to determine whether the sur face is surrounding overlapping or outside once a single inside overlapping or surrounding surface has been identified its pixel intensities are transferred to the appropriate area within the frame buffer  one method for implementing test is to order surfaces according to their minimum depth from the view plane for each surrounding surface we then compute the maximum depth within the area under consideration if the maxi   surrounding overlapping inside outside surtece surface surface surtece  possible relationships between polygon surfaces and a rectangular area   lange within a specified area a   surrounding surrounding surface with a surface   u i ko  te  i  i maximum depth of   obscures all x surfaces that have a minimum depth beyond zax  zi area mum depth of one of these surrounding surfaces is closer to the view plane than the minimum depth of all other surfaces within the area test is satisfied figure 22 shows an example of the conditions for this method  another method for carrying out test that does not require depth sorting is to use plane equations to calculate depth values at the four vertices of the area for all surrounding overlapping and inside surfaces if the calculated depths for one of the surrounding surfaces is less than the calculated depths for all other surfaces test is true then the area can be filled with the intensity values of the surrounding surface  for some situations both methods of implementing test will fail to iden tify correctly a surrounding surface that obscures all the other surfaces further testing could be carried out to identify the single surface that covers the area but it is faster to subdivide the area than to continue with more complex testing once outside and surrounding surfaces have been identified for an area they will remain outside and surrounding surfaces for all subdivisions of the area furthermore some inside and overlapping surfaces can be expected to be elimi nated as the subdivision process continues so that the areas become easier to an alyze in the limiting case when a subdivision the size of a pixel is produced we simply calculate the depth of each relevant surface at that point and transfer the intensity of the nearest surface to the frame buffer   area a is subdivided into and  using the boundary of surface s on the view plane as a variation on the basic subdivision process we could subdivide areas along surface boundaries instead of dividing them in half if the surfaces have been sorted according to minimum depth we can use the surface with the small est depth value to subdivide a given area  illustrates this method for subdividing areas the projection of the boundary of surface s is used to parti tion the original area into the subdivisions a and a surface s is then a sur rounding surface for a and visibility tests and can be applied to determine whether further subdividing is necessary in general fewer subdivisions are re quired using this approach but more processing is needed to subdivide areas and to analyze the relation of surfaces to the subdivision boundaries  when an octree representation is used for the viewing volume hidden surface elimination is accomplished by projecting octree nodes onto the viewing surface in a front to back order in  the front face of a region of space the side toward the viewer is formed with octants  and surfaces in the front of these octants are visible to the viewer any surfaces toward the rear of the front octants or in the back octants   and may be hidden by the front surfaces  back surfaces are eliminated for the viewing direction given in  by processing data elements in the octree nodes in the order     this results in a depth first traversal of the octree so that nodes representing oc tants  and for the entire region are visited before the nodes representing octants  and similarly the nodes for the front four suboctants of actant are visited before the nodes for the four back suboctants the traversal of the oc tree continues in this order for each octant subdivision  when a color value is encountered in an octree node the pixel area in the frame buffer corresponding to this node is assigned that color value only if no values have previously been stored in this area in this way only the front colors are loaded into the buffer nothing is loaded if an area is void any node that is found to be completely obscured is eliminated from further processing so that its subtrees are not accessed   different views of objects represented as octrees can be obtained by apply ing transformations to the octree representation that reorient the object according   oo numbered  octants a   objects in octants  and of a region   obscure objects in the back octants viewing   when the viewing direction direction is as shown  section octree methods  a  octants in space      quadrants for tha view plane   octant divisions for a region of space and the corresponding quadrant plane   to the view selected we assume that the octree representation is always set up so that octants  and of a region form the front face as in   a method for displaying an octree is first to map the octree onto a quadtree of visible areas by traversing octree nodes from front to back in a recursive proce dure then the quadtree representation for the visible surfaces is loaded into the frame buffer  depicts the octants in a region of space and the corre sponding quadrants on the view plane contributions to quadrant come from octants and color values in quadrant are obtained from surfaces in octants and and values in each of the other two quadrants are generated from the pair of octants aligned with each of these quadrants  recursive processing of octree nodes is demonstrated in the following proce dure which accepts an octree description and creates the quadtree representation for visible surfaces in the region in most cases both a front and a back octant must be considered in determining the correct color values for a quadrant but if the front octant is homogeneously filled with some color we do not process the back octant for heterogeneous regions the procedure is recursively called pass ing as new arguments the child of the heterogeneous octant and a newly created quadtree node if the front is empty the rear octant is processed otherwise two recursive calls are made one for the rear octant and one for the front octant  typedef enum  solid mixed  status  define empty  typedef struct toctree  int id status status union  int color struct toctree  children   data  octree  typedef struct tquadtree  int id status status union  int color struct tquadtree  children   data  quadtree  int nquadtree   void octreetoquadtree octree  otree quadtree  qtree   octree  front  back  quadtree  newquadtree  int i  if otree status  solid  qtree status  solid qtree data color  otree data color return   qtree status  mixed   fill in each quad of the quadtree   for i i d i   front  otree data children i   back  otree data children i  newquadtree  quadtree  malloc sizeof quadtree  newquadtree id  nquadtree   newquadtree status  solid  qtree data children i  newquadtree  if front status  solid if front data color  empty qfree data children i  data color  front data color else if back status  solid if back data color  empty qtree data children i  data color  back data color else qtree data children i  data color  empty else   back node is mixed  newquadtree status  mixed octreetoquadtree back newquadtree   else   front node is mixed  newquadtree status  mixed octreetoquadtree back newquadtree  octreetoquadtree front newquadtree     if we consider the line of sight from a pixel position on the view plane through a scene as in  we can determine which objects in the scene if any inter sect this line after calculating all ray surface intersections we identify the visi ble surface as the one whose intersection point is closest to the pixel this visibil ity detection scheme uses ray casting procedures that were introduced in section 15 ray casting as a visibility detection tool is based on geometric optics methods which trace the paths of light rays since there are an infinite number of light rays in a scene and we are interested only in those rays that pass through   a ray along the line of sight from a pixel position through a scene  section 10 ray casting method chapter  visible surface detection methods  pixel positions we can trace the light ray paths backward from the pixels through the scene the ray casting approach is an effective visibility detection method for scenes with curved surfaces particularly spheres  we can think of ray casting as a variation on the depth buffer method sec tion  in the depth buffer algorithm we process surfaces one at a time and calculate depth values for all projection points over the surface the calculated surface depths are then compared to previously stored depths to determine visi ble surfaces at each pixel in ray casting we process pixels one at a time and cal culate depths for all surfaces along the projection path to that pixel  ray casting is a special case of ray tracing algorithms section that trace multiple ray paths to pick up global reflection and refraction contributions from multiple objects in a scene with ray casting we only follow a ray out from each pixel to the nearest object efficient ray surface intersection calculations have been developed for common objects particularly spheres and we discuss these intersection methods in detail in chapter  effective methods for determining visibility for objects with curved surfaces in clude ray casting and octree methods with ray casting we calculate ray surface intersections and locate the smallest intersection distance along the pixel ray with octrees once the representation has been established from the input defini tion of the objects all visible surfaces are identified with the same processing pro cedures no special considerations need be given to different kinds of curved surfaces  we can also approximate a curved surface as a set of plane polygon sur faces in the list of surfaces we then replace each curved surface with a polygon mesh and use one of the other hidden surface methods previously discussed with some objects such as spheres it can be more efficient as well as more accu rate to use ray casting and the curved surface equation  curved surface representations we can represent a surface with an implicit equation of the form f x y z  or with a parametric representation appendix a  spline surfaces for instance are normally described with parametric equations in some cases it is useful to ob tain an explicit surface equation as for example a height function over an xy ground plane  z fix y  many objects of interest such as spheres ellipsoids cylinders and cones have quadratic representations these surfaces are commonly used to model molecu lar structures roller bearings rings and shafts  sean line and ray casting algorithms often involve numerical approxima tion techniques to solve the surface equation at the intersection point with a scan line or with a pixel ray various techniques including parallel calculations and fast hardware implementations have been developed for solving the curved sur face equations for commonly used objects surface contour plots for many applications in mathematics physical sciences engineering and other fields it is useful to display a surface function with a set of contour lines that show the surface shape the surface may be described with an equation or with data tables such as topographic data on elevations or population density with an explicit functional representation we can plot the visible surface contour lines and eliminate those contour sections that are hidden by the visible parts of the surface  to obtain an xy plot of a functional surface we write the surface representa tion in the form y  fx   a curve in the xy plane can then be platted for values of z within some selected range using a specified interval az starting with the largest value of z we plot the curves from front to back and eliminate hidden sections we draw the curve sections on the screen by mapping an xy range for the function into an xy pixel screen range then unit steps are taken in x and the corresponding y value for each x value is determined from eq for a given value of z  one way to identify the visible curve sections on the surface is to maintain a list of yam and ypu values previously calculated for the pixel x coordinates on the screen as we step from one pixel x position to the next we check the calculated y value against the stored range yin and yas for the next pixel if yrin y  youx that point on the surface is not visible and we do not plot it but if the calcu lated y value is outside the stored y bounds for that pixel the point is visible we then plot the point and reset the bounds for that pixel similar procedures can be used to project the contour plot onto the xz or the yz plane  shows an example of a surface contour plot with color coded contour lines  similar methods can be used with a discrete set of data points by determin ing isosurface lines for example if we have a discrete set of z values for an n by n grid of xy values we can determine the path of a line of constant over the surface using the contour methods discussed in section 21 each selected con tour line can then be projected onto a view plane and displayed with straight line   a color coded surface contour plot  courtesy of los alamos national laboratory  section 11 curved surfaces  a  ib   hidden line sections dashed fora line that a passes behind a surface and b penetrates a surface  segments again lines can be drawn on the display device in a front to back depth order and we eliminate contour sections that pass behind previously drawn visible contour lines   when only the outline of an object is to be displayed visibility tests are applied to surface edges visible edge sections are displayed and hidden edge sections can either be eliminated or displayed differently from the visible edges for ex ample hidden edges could be drawn as dashed lines or we could use depth cue ing to decrease the intensity of the lines as a linear function of distance from the view plane procedures for determining visibility of object edges are referred to as wireframe visibility methods they are also called visible line detection methods or hidden line detection methods special wireframe visibility proce dures have been developed but some of the visible surface methods discussed in preceding sections can also be used to test for edge visibility  a direct approach to identifying the visible lines in a scene is to compare each line to each surface the process involved here is sifnilar to clipping lines against arbitrary window shapes except that we now want to determine which sections of the lines are hidden by surfaces for each line depth values are com pared to the surfaces to determine which line sections are not visible we can use coherence methods to identify hidden line segments without actually testing each coordinate position if both line intersections with the projection of a surface boundary have greater depth than the surface at those points the line segment between the intersections is completely hidden as in  a  this is the usual situation in a scene but it is also possible to have lines and surfaces inter secting each other when a line has greater depth at one boundary intersection and less depth than the surface at the other boundary intersection the line must penetrate the surface interior as in  b  in this case we calculate the in tersection point of the line with the surface using the plane equation and display only the visible sections  some visible surface methods are readily adapted to wireframe visibility testing using a back face method we could identify all the back surfaces of an object and display only the boundaries for the visible surfaces with depth sort ing surfaces can be painted into the refresh buffer so that surface interiors are in the background color while boundaries are in the foreground color by process ing the surfaces from back to front hidden lines are erased by the nearer sur faces an area subdivision method can be adapted to hidden line removal by dis playing only the boundaries of visible surfaces scan line methods can be used to display visible lines by setting points along the scan line that coincide with boundaries of visible surfaces any visible surface method that uses scan conver sion can be modified to an edge visibility detection method in a similar way  often three dimensional graphics packages accommodate several visible surface detection procedures particularly the back face and depth buffer methods a particular function can then be invoked with the procedure name such as back face or depthbuf fer in general programming standards such as gks and phigs visibility methods are implementation dependent a table of available methods is listed at each installation and a particular visibility detection method is selected with the hidden line hidden surface removal hlhsr function  sethlhsridentifier visibilitypunctionindex  parameter visibilityfunctionindex is assigned an integer code to identify the visibility method that is to be applied to subsequently specified output primi tives  summary here we give a summary of the visibility detection methods discussed in this chapter and a comparison of their effectiveness back face detection is fast and ef fective as an initial screening to eliminate many polygons from further visibility tests for a single convex polyhedron back face detection eliminates all hidden surfaces but in general back face detection cannot completely identify all hid den surfaces other more involved visibility detection schemes will correctly produce a list of visible surfaces  a fast and simple technique for identifying visible surfaces is the depth buffer or z buffer method this procedure requires two buffers one for the pixel intensities and one for the depth of the visible surface for each pixel in the view plane fast incremental methods are used to scan each surface in a scene to calcu late surface depths as each surface is processed the two buffers are updated an improvement on the depth buffer approach is the a buffer which provides addi tional information for displaying antialiased and transparent surfaces other visi ble surface detection schemes include the scan line method the depth sorting method painter s algorithm  the bsp tree method area subdivision octree methods and ray casting  visibility detection methods are also used in displaying three dimensional line drawings with curved surfaces we can display contour plots for wireframe displays of polyhedrons we search for the various edge sections of the surfaces in a scene that are visible from the view plane  the effectiveness of a visible surface detection method depends on the characteristics of a particular application if the surfaces in a scene are spread out in the z direction so that there is very little depth overlap a depth sorting or bsp tree method is often the best choice for scenes with surfaces fairly well sepa rated horizontally a scan line or area subdivision method can be used efficiently to locate visible surfaces  as a general rule the depth sorting or bsp tree method is a highly effective approach for scenes with only a few surfaces this is because these scenes usually have few surfaces that overlap in depth the scan line method also performs well when a scene contains a small number of surfaces either the scan line depth sorting or bsp tree method can be used effectively for scenes with up to several thousand polygon surfaces with scenes that contain more than a few thousand surfaces the depth buffer method or octree approach performs best the depth buffer method has a nearly constant processing time independent of the number of surfaces in a scene this is because the size of the surface areas decreases as the number of surfaces in the scene increases therefore the depth buffer method ex hibits relatively low performance with simple scenes and relatively high perfor  summary  mance with complex scenes bsp trees are useful when multiple views are to be generated using different view reference points  when octree representations are used in a system the hidden surface elimi nation process is fast and simple only integer additions and subtractions are used in the process and there is no need to perform sorting or intersection calcu lations another advantage of octrees is that they store more than surfaces the entire solid region of an object is available for display which makes the octree representation useful for obtaining cross sectional slices of solids  if a scene contains curved surface representations we use octree or ray casting methods to identify visible parts of the scene ray casting methods are an integral part of ray tracing algorithms which allow scenes to be displayed with global illumination effects  it is possible to combine and implement the different visible surface detec tion methods in various ways in addition visibility detection algorithms are often implemented in hardware and special systems utilizing parallel processing are employed to increase the efficiency of these methods special hardware sys tems are used when processing speed is an especially important consideration as in the generation of animated views for flight simulators  references additional sources of information on visibility algorithms include elber and cohen  franklin and kankanhalli  glassner  naylor amanatides and thibault  and segal   exercises  develop a procedure based on a back face detection technique for identifying all the visible faces of a convex polyhedron that has different colored surfaces assume that the object is defined in a right handed viewing system with the xy plane as the viewing surface  implement a back face detection procedure using an orthographic parallel projection to view visible faces of a convex polyhedron assume that all parts of the object are in front of the view plane and provide a mapping onto a screen viewport for display  implement a back face detection procedure using a perspective projection to view visible faces of a convex polyhedron assume that all parts of the object are in front of the view plane and provide a mapping onto a screen viewport for display  write a program to produce an animation of a convex polyhedron the object is to be rotated incrementally about an axis that passes through the object and is parallel to the view plane assume that the object lies completely in front of the view plane use an orthographic parallel projection to map the views successively onto the view plane  implement the depth buffer method to display the visible surfaces of a given polyhe dron how can the storage requirements for the depth buffer be determined from the definition of the objects to be displayed  tmplement the depth buffer method to display the visible surfaces in a scene contain ing any number of polyhedrons set up efficient methods for storing and processing the various objects in the scene  implement the a buffer algorithm to display a scene containing both opaque and transparent surfaces as an optional feature your algorithm may be extended to in clude antialiasing   10  11  12  13  14  15  16  17  18  19 20  21 22  23  24  develop a program to implement the scan line algorithm for displaying the visible surfaces of a given polyhedron use polygon and edge tables to store the definition of the object and use coherence techniques to evaluate points along and between scan lines  write a program to implement the scan line algorithm for a scene containing several polyhedrons use polygon and edge tables to store the definition of the object and use coherence techniques to evaluate points along and between scan lines  set up a program to display the visible surfaces of a convex polyhedron using the painter s algorithm that is surfaces are to be sorted on depth and painted on the screen from back to front  write a program that uses the depth sorting method to display the visible surfaces of any given object with plane faces  develop a depth sorting program to display the visible surfaces in a scene containing several polyhedrons  write a program to display the visible surfaces of a convex polyhedron using the  bsp tree method  give examples of situations where the two methods discussed for test in the area subdivision algorithm will fail to identify correctly a surrounding surface that ob scures all other surfaces  develop an algorithm that would test a given plane surface against a rectangular area to decide whether it is a surrounding overlapping inside or outside surface develop an algorithm for generating a quadtree representation for the visible sur faces of an object by applying the area subdivision tests to determine the values of the quadtree elements  set up an algorithm to load a given quadtree representation of an object into a frame buffer for display  write a program on your system to display an octree representation for an object so that hidden surfaces are removed  devise an algorithm for viewing a single sphere using the ray casting method discuss how antialiasing methods can be incorporated into the various hidden sur face elimination algorithms  write a routine to produce a surface contour plot for a given surface function f x y  develop an algorithm for detecting visible line sections in a scene by comparing each line in the scene to each surface  discuss how wireframe displays might be generated with the various visible surface detection methods discussed in this chapter  set up a procedure for generating a wireframe display of a polyhedron with the hid den edges of the object drawn with dashed lines  exercises  chapter ilumination models and  surface rendering methods     r ealistic displays of a scene are obtained by generating perspective projec tions of objects and by applying natural lighting effects to the visible sur faces an illumination model also called a lighting model and sometimes re ferred to as a shading model is used to calculate the intensity of light that we should see at a given point on the surface of an object a surface rendering algo rithm uses the intensity calculations from an illumination model to determine the light intensity for all projected pixel positions for the various surfaces in a scene surface rendering can be performed by applying the illumination model to every visible surface point or the rendering can be accomplished by interpolating in tensities across the surfaces from a small set of illumination model calculations scan line image space algorithms typically use interpolation schemes while ray tracing algorithms invoke the illumination model at each pixel position some times surface rendering procedures are termed surface shading methods to avoid confusion we will refer to the model for calculating light intensity at a single sur face point as an ilumination model or a lighting model and we will use the term surface rendering to mean a procedure for applying a lighting model to obtain pixel intensilies for all the projected surface positions in a scene  photorealism in computer graphics involves two elements accurate graphi cal representations of objects and good physical descriptions of the lighting ef fects in a scene lighting effects include light reflections transparency surface texture and shadows   modeling the colors and lighting effects that we see on an object is a com plex process involving principles of both physics and psychology fundamen tally lighting effects are described with models that consider the interaction of electromagnetic energy with object surfaces once light reaches our eyes it trig gers perception precesses that determine what we actually see in a scene phys ical illumination models involve a number of factors such as object type object position relative to light sources and other objects and the light source condi tions that we set for a scene objects can be constructed of opaque materials or they can be more or jess transparent in addition they can have shiny or dull sur faces and they can have a variety of surface texture patterns light sources of varying shapes colors and positions can be used to provide the illumination ef fects for a scene given the parameters for the optical properties of surfaces the relative positions of the surfaces in a scene the color and positions of the light sources and the position and orientation of the viewing plane illumination mod els calculate the intensity projected from a particular surface point ina specified viewing direction  mjumination models in computer graphics are often loosely derived from the physical laws that describe surface light intensities to minimize intensity cal chapter  numination models and surface rendering methods light source  reflecting surface    light viewed from an opaque nonluminous surface is in general a combination of reflected light from a light source and reflections of light reflections from other surfaces  ne  n diverging ray paths froma paint light source  culations most packages use empirical models based on simplified photometric calculations more accurate models such as the radiosity algorithm calculate light intensities by considering the propagation of radiant energy between the surfaces and light sources in a scene in the following sections we first take a look at the basic illumination models often used in graphics packages then we discuss more accurate but more time consuming methods for calculating sur face intensities and we explore the various surface rendering algorithms for ap plying the lighting models to obtain the appropriate shading over visible sur faces in a scene  when we view an opaque nonluminous object we see reflected light from the surfaces of the object the total reflected light is the sum of the contributions from light sources and other reflecting surfaces in the scene   thus a surface that is not directly exposed to a light source may still be visible if nearby objects are illuminated sometimes light sources are referred to as light emitting sources and reflecting surfaces such as the walls of a room are termed light re flecting sources we will use the term light source to mean an object that is emitting radiant energy such as a light bulb or the sun  a luminous object in general can be both a light source and a light reflec tor for example a plastic globe with a light bulb inside both emits and reflects light from the surface of the globe emitted light from the globe may then illumi nate other objects in the vicinity  the simplest model for a light emitter is a point source rays from the source then follow radially diverging paths from the source position as shown in  this light source model is a reasonable approximation for sources whose dimensions are smal compared to the size of objects in the scene sources such as the sun that are sufficiently far from the scene can be accurately modeled as point sources a nearby source such as the long fluorescent light in  is more accurately modeled as a distributed light source in this case the illumi nation effects cannot be approximated realistically with a point source because the area of the source is not small compared to the surfaces in the scene an accu rate model for the distributed source is one that considers the accumulated illu mination effects of the points over the surface of the source  when light is incident on an opaque surface part of it is reflected and part is absorbed the amount of incident light reflected by a surface depends on the type of material shiny materials reflect more of the incident light and dull sur faces absorb more of the incident light similarly for an illuminated transparent   an object illuminated with a distributed light source surface some of the incident light will be reflected and some will be transmitted through the material  surfaces that are rough or grainy tend to scatter the reflected light in al di rections this scattered light is called diffuse reflection a very rough matte sur face produces primarily diffuse reflections so that the surface appears equally bright from all viewing directions  illustrates diffuse light scattering from a surface what we call the color of an object is the color of the diffuse re flection of the incident light a blue object illuminated by a white light source for example reflects the blue component of the white light and totally absorbs all other components if the blue object is viewed under a red tight it appears black since all of the incident light is absorbed  in addition to diffuse reflection light sources create highlights or bright spots called specular reflection this highlighting effect is more pronounced on shiny surfaces than on dul surfaces an illustration of specular reflection is shown in   here we discuss simplified methods for calculating light intensities the empiri cal models described in this section provide simple and fast methods for calculat ing surface intensity at a given point and they produce reasonably good results for most scenes lighting calculations are based on the optical properties of sur faces the background lighting conditions and the light source specifications optical parameters are used to set surface properties such as glossy matte opaque and transparent this controls the amount of reflection and absorption of incident light all light sources are considered to be point sources specified with a coordinate position and an intensity value color  ambient light a surface that is not exposed directly to a light source still will be visible if nearby objects are illuminated in our basic illumination model we can set a gen eral level of brightness for a scene this is a simple way to model the combina tion of light reflections from various surfaces to produce a uniform illumination called the ambient light or background light ambient light has no spatial or di rectional characteristics the amount of ambient light incident on each object is a constant for all surfaces and over all directions  we can set the level for the ambient light in a scene with parameter i  and each surface is then illuminated with this constant value the resulting reflected light is a constant for each surface independent of the viewing direction and the spatial orientation of the surface but the intensity of the reflected light for each surface depends on the optical properties of the surface that is how much of the incident energy is to be reflected and how much absorbed  diffuse reflection ambient light reflection is an approximation of global diffuse lighting effects diffuse reflections are constant over each surface in a scene independent of the viewing direction the fractional amount of the incident light that is diffusely re  section basic illumination models   diffuse reflections from a surface   specular reflection superimposed on diffuse reflection vectors  chapter illumination models and surface rendering methods  i  a    b   a surface perpendicular to the direction of the incident light a is more illuminated than an equal sized surface at an oblique angle b to the incoming light direction    radiant energy from a surface area da in direction y relative to the surface normal direction   flected can be set for each surface with parameter k  the diffuse reflection coeffi cient or diffuse reflectivity parameter k is assigned a constant value in the in terval to according to the reflecting properties we want the surface to have if we want a highly reflective surface we set the value of ky near this produces a bright surface with the intensity of the reflected light near that of the incident light to simulate a surface that absorbs most of the incident light we set the re flectivity to a value near actually parameter k is a function of surface color but for the time being we will assume k is a constant  if a surface is exposed only to ambient light we can express the intensity of the diffuse reflection at any point on the surface as tambaitt  kale  since ambient light produces a flat uninteresting shading for each surface fig 19 b  scenes are rarely rendered with ambient light alone at least one light source is included in a scene often as a point source at the viewing position  we can model the diffuse reflections of illumination from a point source in a similar way that is we assume that the diffuse reflections from the surface are scattered with equal intensity in all directions independent of the viewing direc tion such surfaces are sometimes referred to as ideal diffuse reflectors they are also called lambertian reflectors since radiated light energy from any point on the surface is governed by lambert s cosine law this law states that the radiant energy from any small surface area da in any direction dy relative to the surface normal is proportional to cos y   the light intensity though depends on the radiant energy per projected area perpendicular to direction y which is da cosdy thus for lambertian reflection the intensity of light is the same over all viewing directions we discuss photometry concepts and terms such as radiant energy in greater detail in section  even though there is equal light scattering in all directions from a perfect diffuse reflector the brightness of the surface does depend on the orientation of the surface relative to the light source a surface that is oriented perpendicular to the direction of the incident light appears brighter than if the surface were tilted at an oblique angle to the direction of the incoming light this is easily seen by holding a white sheet of paper or smooth cardboard parallel to a nearby window and slowly rotating the sheet away from the window direction as the angle be tween the surface normal and the incoming light direction increases less of the incident light falls on the surface as shown in  this figure shows a beam of light rays incident on two equal area plane surface patches with different spa tial orientations relative to the incident light direction from a distant source par   acos  an illuminated area projected perpendicular to the path of the incoming light rays  incident allel incoming rays  if we denote the angle of incidence between the incoming light direction and the surface normal as    then the projected area of a surface patch perpendicular to the light direction is proportional to cos  thus the amount of illumination or the number of incident light rays cutting across the projected surface patch depends on cos  if the incoming light from the source is perpendicular to the surface at a particular point that point is fully illu minated as the angle of illumination moves away from the surface normal the brightness of the point drops off if j is the intensity of the point light source then the diffuse reflection equation for a point on the surface can be written as lag  kal cos  a surface is illuminated by a point source only if the angle of incidence is in the range to  cos  is in the interval from to  when cos is negative the light source is behind the surface  if n is the unit normal vector to a surface and l is the unit direction vector to the point light source from a position on the surface   then cos  n  land the diffuse reflection equation for single point source illumination is tain  kal n  l  reflections for point source illumination are calculated in world coordinates or viewing coordinates before shearing and perspective transformations are ap plied these transformations may transform the orientation of normal vectors so that they are no longer perpendicular to the surfaces they represent transforma tion procedures for maintaining the proper orientation of surface normals are discussed in chapter   illustrates the application of eq to positions over the sur face of a sphere using various values of parameter kz between and each pro jected pixel position for the surface was assigned an intensity as calculated by the diffuse reflection equation for a point ight source the renderings in this figure illustrate single point source lighting with no other lighting effects this is what we might expect to see if we shined a small light on the object in a completely darkened room for general scenes however we expect some background light ing effects in addition to the illumination effects produced by a direct light source  we can combine the ambient and point source intensity calculations to ob tain an expression for the total diffuse reflection in addition many graphics packages introduce an ambient reflection coefficient k to modify the ambient light intensity for each surface this simply provides us with an additional pa rameter to adjust the light conditions in a scene using parameter k  we can write the total diffuse reflection equation as tay  kyla  kyln  l  lf to light n source   angle of incidence  between the unit light source direction vector l and the unit surface normal n  chapter iilumination models and surface  rendering methods kd with ka  2 o  8   diffuse reflections from a spherical surface illuminated by a point light source for values of the diffuse reflectivity coefficient in the interval o ks1    diffuse reflections from a spherical surface illuminated with ambient light and a single point source for values of k and k in the interval   where both k and k depend on surface material properties and are assigned val ues in the range from to  shows a sphere displayed with surface intensitities calculated from eq for values of parameters k and ky between and  specular reflection and the phong model when we look at an illuminated shiny surface such as polished metal an apple or a person s forehead we see a highlight or bright spot at certain viewing di rections this phenomenon called specular reflection is the result of total or near total reflection of the incident light in a concentrated region around the specular reflection angle  shows the specular reflection direction at a point on the illuminated surface the specular reflection angle equals the angle of the incident light with the two angles measured on opposite sides of the unit normal surface vector n in this figure we use r to represent the unit vector in the direc tion of ideal specular reflection l to represent the unit vector directed toward the point light source and v as the unit vector pointing to the viewer from the sur face position angle  is the viewing anyle relative to the specular reflection di rection r for an ideal reflector perfect mirror  incident light is reflected only in the specular reflection direction in this case we would only see reflected light when vectors v and r coincide     objects other than ideal reflectors exhibit specular reflections over a finite range of viewing positions around vector r shiny surfaces have a narrow specu lar reflection range and dull surfaces have a wider reflection range an empirical model for calculating the specular reflection range developed by phong bui tuong and called the phong specular reflection model or simply the phong model sets the intensity of specular reflection proportional to cos  angle  can be assigned values in the range to  so that cos varies from to the value assigned to specular reflection parameter n is determined by the type of sur face that we want to display a very shiny surface is modeled with a large value for n  say or more  and smaller values down to are used for duller sur faces for a perfect reflector n is infinite for a rough surface such as chalk or cinderblock n would be assigned a value near figures 13 and 14 show the effect of n on the angular range for which we can expect to see specular re flections  the intensity of specular reflection depends on the material properties of the surface and the angle of incidence as well as other factors such as the polar ization and color of the incident light we can approximately model monachro matic specular intensity variations using a specular reflection coefficient wo  for each surface  shows the general variation of w over the range  to   for a few materials in general w  tends to increase as the angle of incidence increases at    wc  and all of the incident light is reflected the variation of specular intensity with angle of incidence is described by fresnel s laws of reflection using the spectral reflection function w   we can write the phong specular refiection model as fooee  wcb cos    where j is the intensity of the light source and  is the viewing angle relative to the specular reflection direction r  oa on or shiny surface oull surface large a  small n   modeling specular reflections shaded area with parameter    specular reflection angle equals angle of incidence  5at   we   s s beer s co  a  ra  i  cost  8 06 4 2 at l  oo  3ar 45  qo  45  oo  cos  db oo    o   cast cos   os  2 nt td l oa ll   ce   qo    plots of cos s for several values of specular parameter  as seen in  transparent materials such as glass only exhibit ap preciable specular reflections as  approaches  at    about percent of the incident light on a glass surface is reflected and for most of the range of the reflected intensity is less than percent of the incident intensity but for many opaque materials specular reflection is nearly constant for all incidence an gles in this case we can reasonably model the reflected light effects by replacing w  with a constant specular reflection coefficient k  we then simply set k equal to some value in the range to for each surface  since v and r are unit vectcrs in the viewing and specular reflection direc tions we can calculate the value of cos with the dot product v r assuming the specular reflection coefficient is a constant we can determine the intensity of the specular reflection at a surface point with the calculation lpec  keliv  ry silver   approximate variation of the specular reflection coefficient as a function of angle of incidence for  different materials   dielectric glass   vector r in this expression can be calculated in terms of vectors l and n as seen in  the projection of l onto the direction of the normal vector is ob tained with the dot product n  l therefore from the diagram we have r l n l n and the specular reflection vector is obtained as r  n dl n l   illustrates specular reflections for various values of k and n un a sphere illuminated with a single point light source  a somewhat simplified phong model is obtained by using the halfway vector h between l and v to calculate the range of specular reflections if we replace v  r in the phong model with the dot product n  h this simply replaces the empir ical cos  calculation with the empirical cosa calculation   the halfway vector is obtained as l v h tl vl  cole we ra ey attrition toms os spherical surface for varying specular parameter values and a single light source  section basic tllumination models   calculation of vector r by considering projections onto the direction of the normal vector n   halfway vector h along the bisector of the angle between land v  illumination models and surface  chapter rendering methods if both the viewer and the light source are sufficiently far from the surface both v and l are constant over the surface and thus h is also constant for all surface points for nonplanar surfaces n  h then requires less computation than v r since the calculation of r at each surface point involves the variable vector n  for given light source and viewer positions vector h is the orientation di rection for the surface that would produce maximum specular reflection in the viewing direction for this reason h is sometimes referred to as the surface ori entation direction for maximum highlights also if vector v is coplanar with vectors l and r and thus n  angle  has the value  when v l and n are not coplanar a   depending on the spatial relationship of the three vectors  combined diffuse and specular reflections with multiple light sources for a single point light source we can mode the combined diffuse and specular reflections from a point on an illuminated surface as tat  topec  kl  kyl on l  kd n  hy    illustrates surface lighting effect wioduced by the various terms in eq  if we place more than one point sour  scene we obtain the light re flection at any surface point by summing the vontributions from the individual sources  t kl  s kqn l  k n  i 10  trl to ensure that any pixel intensity does not exceed the maximum allowable value we can apply some type of normalization procedure a simple approach is to set a maximum magnitude for each term in the intensity equation if any cal culated term exceeds the maximum we simply set it to the maximum value an other way to compensate for intensity overflow is to normalize the individual terms by dividing each by the magnitude of the largest term a more compli cated procedure is first to calculate all pixel intensities for the scene then the cal culated intensities are scaled onto the allowable intensitv range  warn model so far we have considered only point light sources the warn model provides a method for simulating studio lighting effects by controlling light intensity in dif ferent directions  light sources are modeled as points on a reflecting surface using the phong model for the surface points then the intensity in different directions is con trolled by selecting values for the phong exponent in addition light controls such as barn doors ane spotlighting used by studio photographers can be sim ulated in the warn model flaps are used to control the amount of light emitted by a source in various directions two flaps are provided for each of the x y and z directions spotlights are used to control the amount of light emitted within a cone with apex at a point source position the warn model s implemented in c id    a wireframe scene a is displayed only with ambient lighting in b  and the surface of each object is assigned a different color using ambient light and diffuse reflections due to a single source with k  for all surfaces we obtain the lighting effects shown in c  using ambient light and both diffuse and specular reflections due to a single light source  we obtain the lighting effects shown in d  phigs  and  illustrates lighting effects that can be produced with this model  intensity attenuation as radiant energy from a point light source travels through space its amplitude is attenuated by the factor d  where d is the distance that the light has traveled this means that a surface close to the light source small d receives a higher inci dent intensity from the source than a distant surface large   therefore to pro duce realistic lighting effects our illumination mode should take this intensity attenuation into account otherwise we are illuminating all surfaces with the same intensity no matter how far they might be from the light source if two par allel surfaces with the same optical parameters overlap they would be indistin guishable from each other the two surfaces would be displayed as one surface  chapter illumination models and surface  rendering methods   studio lighting effects produced with the warn model using five light sources to illuminate a chevrolet camaro  courtesy of david r warm general motors research laboratories  our simple point source illumination model however does not always produce realistic pictures if we use the factor d to attenuate intensities the factor d produces too much intensity variations when d is small and it pro duces very little variation when d is large this is because real scenes are usually not illuminated with point light sources and our illumination model is too sim ple to accurately describe real lighting effects  graphics packages have compensated for these problems by using inverse linear or quadratic functions of d to attenuate intensities for example a general inverse quadratic attenuation function can be set up as f d  a tad  ad  11  a user can then fiddle with the coefficients a9 a  and a to obtain a variety of lighting effects for a scene the value of the constant term ay can be adjusted to prevent f d from becoming too large when d is very small also the values for the coefficients in the attenuation function and the optical surface parameters for a scene can be adjusted to prevent calculations of reflected intensities from ex ceeding the maximum allowable value this is an effective method for limiting intensity values when a single light source is used to illuminate a scene for mul tiple light source illumination the methods described in the preceding section are more effective for limiting the intensity range  with a given set of attenuation coefficients we can limit the magnitude of the attenuation function to with the calculation fa  min pv ad vad  12  using this function we can then write our basic illumination model as a t kd  fd hk n l   n hy  13  i l where d is the distance light has traveled from light source i   light reflections from the surface of a black nylon cushion modeled as woven cloth patterns and rendered using monte carlo ray tracing methods  courtesy of stephen h westin program of computer graphics comell university   color considerations most graphics displays of realistic scenes are in color but the illumination model we have described so far considers only monochromatic lighting effects to incor porate color we need to write the intensity equation as a function of the color properties of the light sources and object surfaces  for an rgb description each color in a scene is expressed in terms of red green and blue components we then specify the rgb components of light source intensities and surface colors and the illumination model calculates the rgb components of the reflected light one way to set surface colors is by speci fying the reflectivity coefficients as three element vectors the diffuse reflection coefficient vector for example would then have rgb components kag kac kag  uf we want an object to have a blue surface we select a nonzero value in the range from to for the blue reflectivity component k g while the red and green reflec tivity components are set to zero kyg  kig   any nonzero red or green com ponents in the incident light are absorbed and only the blue component is re flected the intensity calculation for this example reduces to the single expression ip  kyplig   fi liplkas n  l   k p n  hy  14  i l surfaces typically are illuminated with white light sources and in general we can set surface color so that the reflected light has nonzero values for all three rgb components calculated intensity levels for each color component can be used to adjust the corresponding electron gun in an rgb monitor  in his original specular reflection model phong set parameter k to a con stant value independent of the surface color this produces specular reflections that are the same color as the incident light usually white  which gives the sur face a plastic appearance for a nonplastic material the color of the specular re flection is a function of the surface properties and may be different from both the color of the incident light and the color of the diffuse reflections we can approxi mate specular effects on such surfaces by making the specular reflection coeffi cient color dependent as in eq 14  illustrates color reflections from a matte surface and figs 22 and 23 show color reflections from metal   light reflections from a teapot with teflectance parameters set to simulate brushed aluminum surfaces and rendered using monte carlo ray tracing methods  courtesy of stephen h westin program of computer graphics cornell university   section basic iiumination models chapter wumination models and surface  rendering methods   light reflections from trombones with reflectance parameters set to simulate shiny brass surfaces  courtesy of softimage inc   surfaces light reflections from object surfaces due to multiple colored light sources is shown in   another method for setting surface color is to specify the components of diffuse and specular color vectors for each surface while retaining the reflectivity coefficients as single valued constants for an rgb color representation for in stance the components of these two surface color vectors can be denoted as s4a  sac sag and sg s5c  the blue component of the reflected light is then calcu lated as ig  kesaales   fild ligdkysaa n  l  k s g n  h  15  i this approach provides somewhat greater flexibility since surface color parame ters can be set independently from the reflectivity values  other color representations besides rgb can be used to describe colors in a scene and sometimes it is convenient to use a color model with more than three components for a color specification we discuss color models in detail in the next chapter for now we can simply represent any component of a color specifi cation with its spectral wavelength a intensity calculations can then be ex pressed as    ksaalen   fadmyilkasaln l  k s  n h  16  imd transparency a transparent surface in general produces both reflected and transmitted light the relative contribution of the transmitted light depends on the degree of trans   light reflections due to multiple light sources of various colors  courtesy of sun microsystems  parency of the surface and whether any light sources or illuminated surfaces are behind the transparent surface  illustrates the intensity contributions to the surface lighting for a transparent object  when a transparent surface is to be modeled the intensity equations must be modified to include contributions from light passing through the surface in most cases the transmitted light is generated from reflecting objects in back of the surface as in  reflected light from these objects passes through the transparent surface and contributes to the total surface intensity  both diffuse and specular transmission can take place at the surfaces of a transparent object diffuse effects are important when a partially transparent sur face such as frosted glass is to be modeled light passing through such materials is scattered so that a blurred image of background objects is obtained diffuse re fractions can be generated by decreasing the intensity of the refracted light and spreading intensity contributions at each point on the refracting surface onto a fi nite area these manipulations are time comsuming and most lighting models employ only specular effects   realistic transparency effects are modeled by consideririg light refraction when light is incident upon a transparent surface part of it is reflected and part is refracted   because the speed of light is different in different materi als the path of the refracted light is different from that of the incident light the direction of the refracted light specified by the angle of refraction is a function of the index of refraction of each material and the direction of the incident light index of refraction for a material is defined as the ratio of the speed of light in a vacuum to the speed of light in the material angle of refraction is calculated from the angle of incidence the index of refraction n of the incident material usually air  and the index of refraction of the refracting material according to snell s law  17  sin   sin h   a ray traced view of a transparent glass surface showing both light transmission from objects behind the glass and light reflection from the glass surface  courtesy of eric haines 3d eye tc  incident light transparent object   light emission from a transparent surface is in general a combination of reflected and transmitted light  to light n source l    teflection direction tefraction direction   reflection direction r and refraction direction t fora ray of light incident upon a surface with index of refraction  incident fight   refraction of light through a glass object the emerging refracted ray travels along a path that is parallel to the incident light path dashed line  background object p  transparent ae object projection plane   the intensity of a background object at point p can be combined with the reflected intensity off the surface of a transparent object along a perpendicular projection line dashed   actually the index of refraction of a material is a function of the wave length of the incident light so that the different color components of a light ray will be refracted at different angles for most applications we can use an average index of refraction for the different materials that are modeled in a scene the index of refraction of air is approximately and that of crown glass is about using these values in eq 17 with an angle of incidence of yields an angle of refraction of about   illustrates the changes in the path direc tion for a light ray refracted through a glass object the overall effect of the re fraction is to shift the incident light to a parallel path since the calculations of the trigonometric functions in eq 17 are time consuming refraction effects could be modeled by simply shifting the path of the incident light a small amount  from snell s law and the diagram in  we can obtain the unit transmission vector t in the refraction direction  as  r  ir cos  cos a  fl 18  where n is the unit surface normal and l is the unit vector in the direction of the light source transmission vector t can be used to locate intersections of the re fraction path with objects behind the transparent surface including refraction ef fects in a scene can produce highly realistic displays but the determination of re fraction paths and object intersections requires considerable computation most scan line image space methods model light transmission with approximations that reduce processing time we return to the topic of refraction in our discussion of ray tracing algorithms section  a simpler procedure for modeling transparent objects is to ignore the path shifts altogether in effect this approach assumes there is no change in the index of refraction from one material to another so that the angle of refraction is always the same as the angle of incidence this method speeds up the calculation of in tensities and can produce reasonable transparency effects for thin polygon sur faces  we can combine the transmitted intensity ian through a surface from a background object with the reflected intensity iq from the transparent surface   using a transparency coefficient k we assign parameter k a value between and to specify how much of the background light is to be transmit ted total surface intensity is then calculated as t  k lea  kilerans  the term  k  is the opacity factor  for highly transparent objects we assign k a value near nearly opaque objects transmit very little light from background objects and we can set k to a value near for these materials opacity near  it is also possible to allow k to be a function of position over the surface so that different parts of an object can transmit more or less background intensity according to the values assigned to k  transparency effects are often implemented with modified depth buffer z buffer algorithms a simple way to do this is to process opaque objects first to determine depths for the visible opaque surfaces then the depth positions of the transparent objects are compared to the values previously strored in the depth buffer if any transparent surface is visible its reflected intensity is calcu lated and combined with the opaque surface intensity previously stored in the frame buffer this method can be modified to produce more accurate displays by using additional storage for the depth and other parameters of the transparent ow incident light froma distant source   objects modeled with shadow regions  surfaces this allows depth values for the transparent surfaces to be compared to each other as well as to the depth values of the opaque surfaces visible transpar ent surfaces are then rendered by combining their surface intensities with those of the visible and opaque surfaces behind them  accurate displays of transparency and antialiasing can be obtained with the a buffer algorithm for each pixel position surface patches for all overlapping surfaces are saved and sorted in depth order then intensities for the transparent and opaque surface patches that overlap in depth are combined in the proper vis ibility order to produce the final averaged intensity for the pixel as discussed in chapter  a depth sorting visibility algorithm can be modified to handle transparency by first sorting surfaces in depth order then determining whether any visible surface is transparent if we find a visible transparent surface its reflected surface intensity is combin d with the surface intensity of objects behind it to obtain the pixel intensity at each projected surface point  shadows hidden surface methods can be used to locate areas where light sources produce shadows by applying a hidden surface method with a light source at the view position we can determine which surface sections cannot be seen from the light source these are the shadow areas once we have determined the shadow areas for all jisht sources the shadows could be treated as surface patterns and stored in pattern arrays  illustrates the generation of shading pat terns for two objects on a table and a distant light source all shadow areas in this figure are surfaces that are not visible from the position of the light source the scene in  shows shadow effects produced by multiple light sources  shadow patterns generated by a hidden surface method are valid for any selected viewing position as long as the light source positions are not changed surfaces that are visible from the view position are shaded according to the light ing model which can be combined with texture patterns we can display shadow areas with ambient light iniensity only or we can combine the ambient light with specified surface textures   values of intensitv calculated by an illumination model must be converted to one of the allowable intersitv levels for the particular graphics system in use some section displaying light intensities  rendering methods systems are capable of displaying several intensity levels while others are capa ble of only two levels for each pixel on or off  in the first case we convert inten sities from the lighting model into one of the available levels for storage in the frame buffer for bilevel systems we can convert intensities into halftone pat terns as discussed in the next section  assigning intensity levels we first consider how grayscale values on a video monitor can be distributed over the range between and so that the distribution corresponds to our per ception of equal intensity intervals we perceive relative light intensities the same way that we perceive relative sound intensities on a logarithmic scale this means that if the ratio of two intensities is the same as the ratio of two other in tensities we perceive the difference between each pair of intensities to be the same as an example we perceive the difference between intensities 20 and 22 to be the same as the difference between 80 and 88 therefore to display n successive intensity levels with equal perceived brightness the intensity levels on the monitor should be spaced so that the ratio of successive intensities is constant  h_k hobble  20 food ba here we denote the lowest level that can be displayed on the monitor as y and the highest as j  any intermediate intensity can then be expressed in terms of jy as  rly 21  we can calculate the value of r given the values of j and n for a particular sys tem by substituting k  in the preceding expression since   we have va r  t  22   thus the calculation for  in eq 21 can be rewritten as e  23  as an example if ip  for a system with n  we have r  and the four intensity values are  and  the lowest intensity value ij depends on the characteristics of the monitor and is typically in the range from 005 to around 025 as we saw in chapter a black region displayed on a monitor will always have some intensity value above due to reflected light from the screen phosphors for a black and white monitor with bits per pixel   and i  01 the ratio of successive inten sities is approximately r  0182 the approximate values for the intensities on this system are 0100 0102 0104 0106 0107 0109     9821 and 0000  with a color system we set up intensity levels for each component of the color model using the rgb model for example we can relate the blue compo nent of intensity at level k to the lowest attainable blue value as in eq 21 cee intensity  a typical monitor response curve showing the displayed screen  0 intensity asa function of normalized electron gun voltage normalized electron gun voltage igy  r ilpo 24 where un tg     25 tho and n is the number of intensity levels similar expressions hold for the other color components  gamma correction and video lookup tables another problem associated with the display of calculated intensities is the non linearity of display devices illumination models produce a linear range of inten sities the rgb color 25 25 25 obtained from a lighting model represents one half the intensity of the color   usually these calculated intensi ties are then stored in an image file as integer values with one byte for each of the three rgb components this intensity file is also linear so that a pixel with the value   has one half the intensity of a pixel with the value   a video monitor however is a nonlinear device if we set the voltages for the electron gun proportional to the linear pixel values the displayed intensities will be shifted according to the monitor response curve shown in   to correct for monitor nonlinearities graphics systems use a video lookup table that adjusts the linear pixel values the monitor response curve is described by the exponential function l av  26  parameter  is the displayed intensity and parameter v is the input voltage val ues for parameters a and y depend on the characteristics of the monitor used in the graphics system thus if we want to display a particular intensity value j the correct voltage value to produce this intensity is pvr ve   27  a section displaying light intensities   normalized elect on gun valtage  pt 0 pixel intensity value   a video lookup correction curve for mapping pixel intensities to electron gun voltages using gamma correction with y  values for both pixel intensity and monitor voltages are normalized on the interval to  this calculation is referred to as gamma correction of intensity monitor gamma values are typically between and the national television system com mittee ntsc signal standard is y   shows a gamma correction curve using the ntsc gamma value equation 27 is used to set up the video lookup table that converts integer pixel values in the image file to values that control the electron gun voltages  we can combine gamma correction with logarithmic intensity mapping to produce a lookup table that contains both conversions if  is an input intensity value from an illumination model we first locate the nearest intensity j from a table of values created with eq 20 or eq 23 alternatively we could deter mine the level number for this intensity value with the calculation k round log  28 q then we compute the intensity value at this level using eq 23 once we have the intensity value ji  we can calculate the electron gun voltage  l vr v    29 a values v can then be placed in the lookup tables and values for k would be stored in the frame buffer pixel positions if a particular system has no lookup table computed values for v can be stored directly in the frame buffer the com bined conversion to a logarithmic intensity scale followed by calculation of the v using eq 29 is also sometimes referred to as gamma correction  a   a continuous tone photograph a printed with b two intensity levels  c four intensity levels and d eight intensity levels  if the video amplifiers of a monitor are designed to convert the linear input pixel values to electron gun voltages we cannot combine the two intensity con version processes in this case gamuma correction is built into the hardware and the logarithmic values j must be precomputed and stored in the frame buffer or the color table  displaying continuous tone images high quality computer graphics systems generally provide intensity levels for each color component but acceptable displays can be obtained for many ap plications with fewer levels a four level system provides minimum shading ca pability for continuous tone images while photorealistic images can be gener ated on systems that are capable of from to intensity levels per pixel   shows a continuous tone photograph displayed with various intensity levels when a small number of intensity levels are used to reproduce a continuous tone image the borders between the different intensity regions called contours are clearly visible in the two level reproduction the features of the photograph are just barely identifiable using four intensity levels we begin to identify the original shading patterns but the contouring effects are glaring with eight intensity levels contouring effects are still obvious but we begin to have a better indication of the original shading at or more intensity levels contouring effects diminish and the reproductions are very close to the original reproductions of continuous tone images using more than intensity levels show only very subtle differences from the original     an enlarged section of a photograph reproduced with a halftoning method showing how tones are represented with varying size dots  when an output device has a limited intensity range we can create an apparent increase in the number of available intensities by incorporating multiple pixel po sitions into the display of each intensity value when we view a small region con sisting of several pixel positions our eyes tend to integrate or average the fine detail into an overall intensity bilevel monitors and printers in particular can take advantage of this visual effect to produce pictures that appear to be dis played with multiple intensity values  continuous tone photographs are reproduced for publication in newspa pers magazines and books with a printing process called halftoning and the re produced pictures are called halftones for a black and white photograph each intensity area is reproduced as a series of black circles on a white background the diameter of each circle is proportional to the darkness required for that in tensity region darker regions are printed with larger circles and lighter regions are printed with smaller circles more white area   shows an en larged section of a gray scale halftone reproduction color halftones are printed using dots of various sizes and colors as shown in  book and maga zine halftones are printed on high quality paper using approximately to cir cles of varying diameter per centimeter newspapers use lower quality paper and lower resolution about to dots per centimeter  halftone approximations in computer graphics halftone reproductions are approximated using rectangu lar pixel regions called halftone patterns or pixel patterns the number of intensity   color halftone dot patterns the top half of the clock in the color halftone a is enlarged by a factor of in b and by a factor of in c  section halftone patterns and dithering techniques   1 o421 06 08 os    a by pixel grid used to display five intensity evels on a bilevel system the intensity values that would be mapped to each grid are listed below each pixel pattern     oc o42i o8sl   a 3by pixel grid can be used to display intensities on a bilevel system the intensity values that would be mapped to each grid are listed below each pixel pattern  levels that we can display with this method depends on how many pixels we in clude in the rectangular grids and how many levels a system can display with by  pixels for each grid ona bilevel system we can represent  intensity levels  shows one way to set up pixel patterns to represent five in tensity levels that could be used with a bilevel system in pattern all pixels are turned off in pattern one pixel is turned on and in pattern all tour pixels are turned on an intensity value i in a scene is mapped to a particular pattern ac cording to the range listed below each grid shown in the figure pattern is used for   pattern for  i  and pattern is used for    with by pixel grids on a bilevel system we can display intensity lev els one way to set up the pixel patterns for these levels is shown in  pixel positions are chosen at each level so that the patterns approximate the in creasing circle sizes used in halftone reproductions that is the on pixel posi tions are near the center of the grid far lower intensity levels and expand out ward as the intensity level increases  for any pixel grid size we can represent the pixel patterns for the various possible intensities with a mask of pixel position numbers as an example the following mask can be used to generate the nine by grid patterns for intensity levels above shown in  chapter illumination models and surface  rendering methods 5 30  to display a particular intensity with level number k we turn on each pixel whose position number is less than or equal to k  although the use of by pixel patterns increases the number of intensities that can be displayed they reduce the resolution of the displayed picture by a factor of n along each of the x and y axes a by screen area for in stance is reduced to an area containing by intensity points with by grid patterns and with by patterns we would reduce the by area to intensity positions along each side  another problem with pixel grids is that subgrid patterns become apparent as the grid size increases the grid size that can be used without distorting the in tensity variations depends on the size of a displayed pixel therefore for systems with lower resolution fewer pixels per centimeter  we must be satisfied with fewer intensity levels on the other hand high quality displays require at least intensity levels this means that we need by pixel grids and to achieve a res olution equivalent to that of halftones in books and magazines we must display dots per centimeter thus we need to be able to display x  dots per centimeter some devices for example high quality film recorders are able to dis play this resolution  pixel grid patterns for halftone approximations must also be constructed to minimize contouring and other visual effects not present in the original scene contouring can be minimized by evolving each successive grid pattern from the previous pattern that is we form the pattern at level k by adding an on posi tion to the grid pattern at level k  thus if a pixel position is on for one grid level it is on for all higher levels figs 36 and 37  we can minimize the in troduction of other visual effects by avoiding symmetrical patterns with a by pixel grid for instance the third intensity level above zero would be better repre sented by the pattern in  a than by any of the symmetrical arrange ments in  b  the symmetrical patterns in this figure would produce vertical horizontal or diagonal streaks in any large area shaded with intensity level for hard copy output on devices such as film recorders and some print ers isolated pixels are not effectly reproduced therefore a grid pattern with a single on pixel or one with isolated on pixels as in  should be avoided        ta    for a by pixel grid pattern a is to be preferred to the patterns in b for representing the third intensity level above          halttone grid patterns with isolated pixels that cannot be effectively reproduced on some hard copy devices                 intensity levels through obtained with halftone approximations using by pixel grids on a four level system  halftone approximations also can be used to increase the number of inten sity options on systems that are capable of displaying more than two intensities per pixel for example on a system that can display four intensity levels per pixel we can use by pixel grids to extend the available intensity levels from to in  the four grid patterns above zero now represent several levels each since each pixel position can display three intensity values above zero fig ure 40 shows one way to assign the pixel intensities to obtain the distinct levels intensity levels for individual pixels are labeled through and the over all levels for the system are labeled through  similarly we can use pixel grid patterns to increase the number of intensi ties that can be displayed on a color system as an example suppose we have a three bit per pixel rgb system this gives one bit per color gun in the monitor providing eight colors including black and white  using by pixel grid pat terns we now have phosphor dots that can be used to represent a particular color value as shown in  each of the three rgb colors has four phos phor dots in the pattern which allows five possible settings per color this gives us a total of different color combinations  dithering techniques the term dithering is used in various contexts primarily it refers to techniques for approximating halftones without reducing resolution as pixel grid patterns do but the term is also applied to halftone approximation methods using pixel grids and sometimes it is used to refer to color halftone approximations only random values added to pixel intensities to break up contours are often re ferred to as dither noise various algorithms have been used to generate the ran   an rgb by pixel grid pattern  chapter iumination models and surface  rendering methods dom distributions the effect is to add noise over an entire picture which tends to soften intensity boundaries  ordered dither methods generate intensity variations with a one to one map ping of points in a scene to the display pixels to obtain n intensity levels we set up ann by n dither matrix d  whose elements are distinct positive integers in the range to n   for example we can generate four intensity levels with pr lo 31  and we can generate nine intensity levels with dy  32 98 the matrix elements for d and d are in the same order as the pixel mask for set ting up by and by pixel grids respectively for a bilevel system we then determine display intensity values by comparing input intensities to the matrix elements each input intensity is first scaled to the range   n  if the inten sity  is to be applied to screen position x y  we calculate row and column num bers for the dither matrix as i xmoda  j ymodn  33  if f  dif  we turn on the pixel at position x y  otherwise the pixel is not turned on  elements of the dither matrix are assigned in accordance with the guide lines discussed for pixel grids that is we want to minimize added visual effect in a displayed scene order dither produces constant intensity areas identical to those generated with pixel grid patterns when the values of the matrix elements correspond to the grid mask variations from the pixel grid displays occur at boundaries of the intensity levels  typically the number of intensity levels is taken to be a multiple of higher order dither matrices are then obtained from lower order matrices with the recurrence relation  d  ad  dia du 4dyyy  dx1 2u  _ nf2   34   4dy  d2 4day  da2 u yr assuming n  parameter u is the unity matrix all elements are  as an example if d is specified as in eq 31 then recurrence relation 34 yields 5 p  hol 4 35 10 another method for mapping a picture with m by n points to a display area with m by pixels is error diffusion here the error between an input intensity value and the displayed pixel intensity level at a given position is dispersed or diffused to pixel positions to the right and below the current pixel position starting with a matrix m of intensity values obtained by scanning a photograph we want to construct an array  of pixel intensity values for an area of the screen we do this by first scanning across the rows of m from left to right top to bot tom and determining the nearest available pixel intensity level for each element of m then the error between the value stored in matrix m and the displayed in tensity level at each pixel position is distributed to neighboring elements in m using the following simplified algorithm  for g i m i  for y j n j     determine the available intensity level i      that is closest to the value m    y ls err  m   miyat m   a err miny  mia  bert  ity i mini ty ert morijes  mister   ert   once the elements of matrix i have been assigned intensity level values we then map the matrix to some area of a display device such as a printer or video moni tor of course we cannot disperse the error past the last matrix column j  or below the last matrix row i  m  for a bilevel system the available intensity levels are and parameters for distributing the error can be chosen to satisfy the following relationship a bty 8s1 36  one choice for the error diffusion parameters that produces fairly good re sults is a b y   16 16 16 16   illustrates the error distribution using these parameter values error diffusion sometimes produces ghosts in a picture by repeating or echoing certain parts of the picture partic ularly with facial features such as hairlines and nose outlines ghosting can be re   column j  ra row i qo y  nn 7t ti  16 i6 row i      fraction of intensity error that can be distributed to neighboring pixel positions using an error diffusion scheme  section haiftone patterns and dithering techniques  chapter ss itlumination models and surface  rendering methods  48 32 15 31 58 21 50 61 13 38 54 26 44 2z 35 41     11     one possible distribution scheme w  63   for dividing the intensity array into dot diffusion classes numbered from through        duced by choosing values for the error diffusion parameters that sum to a value less than and by rescaling the matrix values after the dispersion of errors one way to rescale is to multiply all elements of m by and then add another method for improving picture quality is to alternate the scanning of matrix rows from right to left and left to right  a variation on the error diffusion method is dot diffusion in this method the m by n array of intensity values is divided into classes numbered from to as shown in  the error between a matrix value and the displayed intensity is then distributed only to those neighboring matrix elements that have a larger class number distribution of the class numbers is based on minimiz ing the number of elements that are completely surrounded by elements with a lower class number since this would tend to direct all errors of the surrounding elements to that one position  in this section we consider the application of an illumination model to the ren dering of standard graphics objects those formed with polygon surfaces the ob jects are usually polygon mesh approximations of curved surface objects but they may also be polyhedra that are not curved surface approximations scan line algorithms typically apply a lighting model to obtain polygon surface ren dering in one of two ways each polygon can be rendered witha single intensity or the intensity can be obtained at each point of the surface using an interpola tion scheme  constant intensity shading a fast and simple method for rendering an object with polygon surfaces is con stant intensity shading also called flat shading in this method a single inten sity is calculated for each polygon all points over the surface of the polygon are then displayed with the same intensity value constant shading can be useful for quickly displaying the general appearance of a curved surface as in   in general flat shading of polygon facets provides an accurate rendering for an object if all of the following assumptions are valid   the object is a polyhedron and 1s not an approximation of an object with a curved surface section polygon rendering methods   the normal vector at vertex v is calculated as the average of the surface normais for each polygon  sharing that vertex   all light sources illuminating the object are sufficiently far from the surface so that n  l and the attenuation function are constarit over the surface   the viewing position is sufficiently far from the surface so that v  r is con stant over the surface  even if all of these conditions are not true we can still reasonably approximate surface lighting effects using small polygon facets with flat shading and calculate the intensity for each facet say at the center of the polygon  gouraud shading this intensity interpolation scheme developed by gouraud and generally re ferred to as gouraud shading renders a polygon surface by linearly interpolat ing intensity values across the surface intensity values for each polygon are matched with the values of adjacent polygons along the common edges thus eliminating the intensity discontinuities that can occur in flat shading  each polygon surface is rendered with gouraud shading by performing the following calculations   determine the average unit normal vector at each polygon vertex  apply an illumination model to each vertex to calculate the vertex intensity  linearly interpolate the vertex intensities over the surface of the polygon  at each polygon vertex we obtain a normal vector by averaging the surface normals of all polygons sharing that vertex as illustrated in  thus for any vertex position v we obtain the unit vertex normal with the calculation ny k l ny  ne k once we have the vertex normals we can determine the intensity at the vertices from a lighting model   demonstrates the next step interpolating intensities along the polygon edges for each scan line the intensity at the intersection of the scan line with a polygon edge is linearly interpolated from the intensities at the edge end points for the example in  the polygon edge with endpoint vertices at positions and is intersected by the scan line at point a fast method for ob  taining the intensity at point is to interpolate between intensities i and i using only the vertical displacement of the scan line  37    for gouraud shading the intensity at point is linearly interpolated from the intensities at vertices and the intensity at point is linearly interpolated from intensities at vertices and an interior point p is then assigned an intensity value that is linearly interpolated from x  intensities at positions and   scan line   b41  a  38 yi ye mh  similarly intensity at the right intersection of this scan line point is interpo lated from intensity values at vertices and once these bounding intensities are established for a scan line an interior point such as point p in  is interpolated from the bounding intensities at points and as _ ne   ey    39 xx xe x5  x4q incremental calculations are used to obtain successive edge intensity values between scan lines and to obtain successive intensities along a scan line as shown in  if the intensity at edge position x y is interpolated as po po  boy  40 yi ya i  y2 then we can obtain the intensity along this edge for the next scan line y  as  i r it honk 41   ye scan lines  x ox4 t   incremental interpolation of intensity values along a polygon edge for successive scan lines    a polygon mesh approximation of an object a is rendered with flat shading b and with gouraud shading c  similar calculations are used to obtain intensities at successive horizontal pixel positions along each scan line  when surfaces are to be rendered in color the intensity of each color com ponent is calculated at the vertices gouraud shading can be combined with a hidden surface algorithm to fill in the visible polygons along each scan line an example of an object shaded with the gouraud method appears in   gouraud shading remeves the intensity discontinuities associated with the constant shading model but it has some other deficiencies highlights on the surface are sometimes displayed with anomalous shapes and the linear intensity interpolation can cause bright or dark intensity streaks called mach bands to ap pear on the surface these effects can be reduced by dividing the surface into a greater number of polygon faces or by using other methods such as phong shad ing that require more calculations  phong shading a more accurate method for rendering a polygon surface is to interpolate normal vectors and then apply the illumination model to each surface point this method developed by phong bui tuong is called phong shading or normal vector interpolation shading it displays more realistic highlights on a surface and greatly reduces the mach band effect  a polygon surface is rendered using phong shading by carrying out the fol lowing steps  e determine the average unit normal vector at each polygon vertex  linearly imterpolate the vertex normals over the surface of the polygon   apply an illumination model along each scan line to calculate projected pixel intensities for the surface points  interpolation of surface normals along a polygon edge between two vertices is illustrated in  the normal vector n for the scan line intersection point along the edge between vertices and can be obtained by vertically inter polating between edge endpoint normals  chapter mumination models and surface  rendering methods n n scan line  interpolation of surface normals n along a polygon edge n 4y bon  42  mi  y2 no incremental methods are used to evaluate normals between scan lines and along each individual scan line at each pixel position along a scan line the illumina tion model is applied to determine the surface intensity at that point  intensity calculations using an approximated normal vector at each point along the scan line produce more accurate results than the direct interpolation of intensities as in gouraud shading the trade off however is that phong shading requires considerably more calculations  fast phong shading surface rendering with phong shading can be speeded up by using approxima tions in the illumination model calculations of normal vectors fast phong shad ing approximates the intensity calculations using a taylor series expansion and triangular surface patches  since phong shading interpolates normal vectors from vertex normals we can express the surface normal n at any point x y over a triangle as n ax by c 43 where vectors a b and c are determined frum the three vertex equations n  ax  by  c k 44  with x y  denoting a vertex position omitting the reflectivity and attenuation parameters we can write the cal culation for light source diffuse reflection from a surface point x y as l n tau  tnt _ l ax  by   il  ax  by cl 45  _ lt aix  l by tl il  ay  by  c we can rewrite this expression in the form ax  by c  dx  exy  fy  gx thy  46  laut y   where parameters such as a b c and d are used to represent the various dot products for example  l a a  47 i finally we can express the denominator in eq 46 as a taylor series expansion and retain terms up to second degree in x and y this yields dag    tyx  taxy  t3y  trav  ty  to 48  where each is a function of parameters a b c and so forth  using forward differences we can evaluate eq 48 with only two addi tions for each pixel position x y once the initial forward difference parameters have been evaluated although fast phong shading reduces the phong shading calculations it still takes approximately twice as long to render a surface with fast phong shading as it does with gouraud shading normal phong shading using forward differences takes about six to seven times longer than gouraud shading  fast phong shading for diffuse reflection can be extended to include specu lar reflections calculations similar to those for diffuse reflections are used to evaluate specular terms such as n  h  in the basic illumination model in ad dition we can generalize the algorithm to include polygons other than triangles and finite viewing positions  in section 15 we introduced the notion of ray casting where a ray is sent out from each pixel position to locate surface intersections for object modeling using constructive solid geometry methods we also discussed the use of ray casting as a method for determining visible surfaces in a scene section 10  ray tracing is an extension of this basic idea instead of merely looking for the visible surface for each pixel we continue to bounce the ray around the scene as illustrated in  collecting intensity contributions this provides a simple and power ful rendering technique for obtaining global reflection and transmission effects the basic ray tracing algorithm also provides for visible surface detection shadow effects transparency and multiple light source illumination many ex tensions to the basic algorithm have been developed to produce photorealistic displays ray traced displays can be highly realistic particularly for shiny ob jects but they require considerable computation time to generate an example of the global reflection and transmission effects possible with ray tracing is shown in   section ray tracing methods chapter illumination models and surface rendering methods   pixel positions on projection projection plane reference point   tracing a ray from the projection reference point through a pixel position with multiple reflections and transmissions  basic ray tracing algorithm we first set up a coordinate system with the pixel positions designated in the xy plane the scene description is given in this reference frame   from the center of projection we then determine a ray path that passes through the center of each screen pixel position illumination effects accumulated along this ray path are then assigned to the pixel this rendering approach is based on the prin ciples of geometric optics light rays from the surfaces in a scene emanate in all directions and some will pass through the pixel positions in the projection plane since there are an infinite number of ray paths we determine the contributions to a particular pixel by tracing a light path backward from the pixel to the scene we first consider the basic ray tracing algorithm with one ray per pixel which is equivalent to viewing the scene through a pinhole camera       gee sah _ a ray traced scene showing global  y  i  at reflection and transmission illumination effects from object pe on ag surfaces  courtesy of evans  ar   sutheriand  _ pixel screen area ae centered an viewing coordinate origin  nn ee projection reference point  ray tracing coordinate reference frame  for each pixel ray we test each surface in the scene to determine if it is in tersected by the ray if a surface is intersected we calculate the distance from the pixel tu the surtace intersection point the smallest calculated intersection dis tance identifies the visible surface for that pixel we then reflect the ray off the visible surface along a specular path angle of refiection equals angle of inci dence  if the surface ts transparent we also send a ray through the surface in the refraction direction reflection and refraction rays are referred to as secondary rus  this procedure is repeated for each secondary ray objects are tested for in tersection and the nearest surface along a secondary ray path is used to recur sively produce the next generation of reflection and refraction paths as the rays from a pixel ricochet through the scene each successively intersected surface is added toa binary ray tracing tree as shown in  we use left branches in the tree to represent reflection paths and right branches represent transmission paths maximum depth of the ray tracing trees can be set as a user option or it can be determined by the amount of storage available a path in the tree is then terminated if it reaches the preset maximum or if the ray strikes a light source  the intensity assigned to a pixel is then determined by accumulating the in tensity contributions starting at the bottom terminal nodes of its ray tracing tree surface intensity from each node in the tree is attenuated by the distance from the parent surface next node up the tree and added to the intensity of the parent surface pixel intensity is then the sum of the attenuated intensities at the reat node of the ray tree if no surfaces are intersected by a pixel ray the ray tracing tree is emply and the pixel is assigned the intensity value of the back ground if a pixel ray intersects a nonreflecting light source the pixel can be as signed the intensity of the source although light sources are usuallv placed bevand the path of the initial rays  shows a surface intersected by a ray and the unit vectors needed for the reflected light intensity calculations unit vector u is in the direc bon of the rav path n is the unit surface normal r is the unit reflection vector l is the unit vector pomting to the light source and h is the unit vector halfway be tween v opposite to u and l the path along l is referred to as the shadow ray it any object intersects the shadow ray between the surface and the point light section ray tracing methods inumination models and surface rendering methods  projection reference point  a    a reflection and refraction ray paths through a scene for a screen pixel  b binary ray tracing tree for the paths shown in a  source the surface is in shadow with respect to that source ambient light at the surface is calculated as k  diffuse reflection due to the source is proportional to kan  l  and the specular reflection component is proportional to k h  n  as discussed in section the specular reflection direction for the secondary ray path r depends on the surface normal and the incorning ray direction  r u  qu n n 49  for a transparent surface we also need to obtain intensity contributions from light transmitted through the material we can locate the source of this con tribution by tracing a secondary ray along the transmission direction t as shown in  the unit transmission vector can be obtained from vectors u and n as t bu  cos  ecos n 50 n   r     reflected light ray source  incoming ray  unit vectors at the surface of an object intersected by an incoming ray along direction u refracted tay path incoming ray   refracted ray path t through a transparent material  parameters and are the indices of refraction in the incident material and the refracting material respectively angle of refraction can be calculated from snell s law  _ cos  ji     cos   51  ray surface intersection calculations a ray can be described with an initial position py and unit direction vector u as illustrated in  the coordinates of any point p along the ray at a distance s from po is computed from the ray equation  p pyt su 52  initailly p can be set to the position of the pixel on the projection plane or it could be chosen to be the projection reference point unit vector u is initially ob  section ray tracing methods illumination models and surface  chaoter rendering methods   describing a ray with an initial  x position vector py and unit direction z vector u  tained from the position of the pixel through which the ray passes and the projec tion reference point  p  p u ip pl 53 pou  porp at each intersected surface vectors py and u are updated for the secondary rays at the ray surface intersection point for the secondary rays reflection direction for u is r and the transmission direction is t to locate surface intersections we simultaneously solve the ray equation and the surface equation for the individ ual objects in the scene  the simplest objects lo ray trace are spheres if we have a sphere of radius r and center position p    then any point p on the surface must satisfy the sphere equation  ip p  r2 54 substituting the ray equation 52 we have  p su p  r  55   if we let ap  p  py and expand the dot product we obtain the quadratic equa tion   a ray intersecting a sphere with radius r centered on position p  section ray tracing methads   a sphereflake rendered with ray tracing using spheres and light sources  courtesy of eric haines sd eye inc  s  u ap s   ap   r2  56 whose solution is s u ap v u apy  ap   57  if the discriminant is negative the ray does not intersect the sphere otherwise the surface intersection coordinates are obtained from the ray equation 52 using the smaller of the two values from eq 57  for small spheres that are far from the initial ray position eq 57 is sus ceptible to roundoff errors that is if ri  ap  we could lose the r term in the precision error of  ap  we can avoid this for most cases by rearranging the calculation for distance s as s u ap v7   ap  u ap ul  58   shows a snowflake pattern of shiny spheres rendered with ray trac ing to display global surface reflections  polyhedra require more processing than spheres to locate surface intersec tions for that reason it is often better to do an initial intersection test on a bounding volume for example  shows a polyhedron bounded by a sphere if a ray does not intersect the sphere we do not need to do any further testing on the polyhedron but if the ray does intersect the sphere we first locate front faces with the test u n 59  where n is a surface normal for each face of the polyhedron that satisifies in equality 59 we solve the plane equation n p d 60  for surface position p that also satisfies the ray equation 52 here n  a b c chapter ilumination models and surface  rendering methods   polyhedron enclosed by a bounding sphere  and d is the fourth plane parameter position p is both on the plane and on the ray path if n  py su  d 61 and the distance from the initial ray position to the plane is _d n py n u   62  this gives us a position on the infinite plane that contains the polygon face but this position may not be inside the polygon boundaries   so we need to perform an inside outside test chapter to determine whether the ray in tersected this face of the polyhedron we perform this test for each face satisfying inequality 59 the smallest distance s to an inside point identifies the inter sected face of the polyhedron if no intersection positions from eq 62 are in side points the ray does not intersect the object  similar procedures are used to calculate ray surface intersection positions for other objects such as quadric or spline surfaces we combine the ray equation with the surface definition and solve for parameter s in many cases numerical root finding methods and incremental calculations are used to locate intersection plane intersection point la  polygon figure j4 ray intersection with the plane of a polygon section ray tracing methods   a ray traced scene showing global reflection of surface texture patterns  courtesy of sun microsystems  points over a surface  shows a ray traced scene containing multiple objects and texture patterns  reducing object intersection calculations ray surface intersection calculations can account for as much as percent of the processing time in a ray tracer for a scene with many objects most of the pro cessing time for each ray is spent checking objects that are not visible along the ray path therefore several methods have been developed for reducing the pro cessing time spent on these intersection calculations  one method for reducing the intersection calculations is to enclose groups of adjacent objects within a bounding volume such as a sphere or a box fig   we can then test for ray intersections with the bounding volume if the ray does not intersect the bounding object we can eliminate the intersection tests with the enclosed surfaces this approach can be extended to include a hierarchy of bounding volumes that is we enclose several bounding volumes within a larger volume and carry out the intersection tests hierarchically first we test the outer bounding volume then if necessary we test the smaller inner bounding volumes and so on  space subdivision methods another way to reduce intersection calculations is to use space subdivision meth ods we can enclose a scene within a cube then we successively subdivide the cube until each subregion cell contains no more than a preset maximum num ber of surfaces for example we could require that each cell contain no more than one surface if parallel arid vector processing capabilities are available the maximum number of surfaces per cell can be determined by the size of the vector  _  bounding sphere  a group of objects enclosed within a bounding sphere chapter ilurnination models and surace  rendering methods   ray intersection with a cube enclosing all objects in a scene  registers and the number of processors space subdivision of the cube can be stored in an octree or in a binary partition tree in addition we can perform a uniform subdivision by dividing the cube into eight equal size octants at each step or we can perform an adaptive subdivision and subdivide only those regions of the cube containing objects  we then trace rays through the individual cells of the cube performing in tersection tests only within those cells containing surfaces the first object surface intersected by a ray is the visible surface for that ray there is a trade off between the cell size and the number of surfaces per cell if we set the maximum number of surfaces per cell too low cell size can become so small that much of the sav ings in reduced intersection tests goes into cell traversal processing   illustrates the intersection of a pixel ray with the front face of the cube enclosing a scene once we calculate the intersection paint on the front face of the cube we determine the initial cell intersection by checking the inter section coordinates against the cell boundary positions we then need to process the ray through the cells by determining the entry and exit points   for each cell traversed by the ray until we intersect an object surface or exit the cube enclosing the scene  given a ray direction u and a ray entry position p  for a cell the potential exit faces are those for which un  63  if the normal vectors for the cell faces in  are aligned with the coordi nates axes then   n       ray traversal through a subregion cell of a cube enclosing a scene  and we only need to check the sign of each component of u to determine the three candidate exit planes the exit position on each candidate plane is obtained from the ray equation  pours  pin  64  where is the distance along the ray from p  to pau substituting the ray equa tion into the plane equation for each cell face  ni  pots  d 65 we can solve for the ray distance to each candidate exit face as  d n p    nou 66  and then select smallest s  this calculation can be simplified if the norma vec tors n are aligned with the coordinate axes for example if a candidate normal vector is   then for that plane we have xx x    67  where u  u  uy u  and x is the value of the right boundary face for the cell  various modifications can be made to the cell traversal procedures to speed up the processing one possibility is to take a trial exit plane k as the one perpen dicular to the direction of the largest component of u the sector on the trial plane tig 64 containing p   determines the true exit plane if the intersec tion point p u  is in sector the trial plane is the true exit plane and we are done if the intersection point is sector the true exit plane is the top plane and we simply need to calculate the exit point on the top boundary of the cell simi larly sector identifies the bottom plane as the true exit plane and sectors and identify the true exit plane as the left and right cell planes respectively when the trial exit point falls in sector  or we need to carry out two additional intersection calculations to identify the true exit plane implementation of these methods on parallel vector machines provides further improvements in perfor mance  the scene in  was ray traced using space subdivision methods without space subdivision the ray tracing calculations took times longer eliminating the polygons also speeded up the processing for a scene containing spheres and no polygbns the same algorithm executed times faster than the basic ray tracer   illustrates another ray traced scene using spatial subdivision and parallel processing methods this image of rodin s thinker was ray traced with over million rays in seconds  the scene shown in  was rendered with a light buffer technique a form of spatial partitioning here a cube is centered on each point light source and each side of the cube is partitioned with a grid of squares a sorted list of ob jects that are visible to the light through each square is then maintained by the ray tracer to speed up processing of shadow rays to determine surface illumina tion effects the square for each shadow ray is computed and the shadow ray is then processed against the list of objects for that square  section ray tracing methods     sectors of the trial exit plane  chapter rendering methods intersection testa in ray tracing programs can also be reduced with direc nlumination models and surface tional subdivision procedures by considering sectors that contain a bundle of rays within each sector we can sort surfaces in depth order as in   each ray then only needs to test objects within the sector that contains that ray  antialiased ray tracing two basic techniques for antialiasing in ray tracing algorithms are supersampling and adaptive sampling sampling in ray tracing is an extension of the sampling methods we discussed in chapter in supersampling and adaptive sampling    a parallel ray traced scene containing spheres and polygon surfaces the ray tracing algorithm used rays per pixel and a tree depth of spatial subdivision methods processed the scene times faster than the basic ray tracing algorithm on an alliant fx  courtesy of lee hian quek information technology institute republic of singapore  _ aimed se sd ers lineal ail mil it aie leni nan aca    this ray traced scene took seconds to render on a kendall square research ksr1 parallel computer with processors rodin s thinker was modeled with primitives two light sources and one primary ray per pixel were used to obtain the global illumination effects from the 675 rays processed  courtesy of m   keates and r j hubbold department of computer science university of manchester   a tb     a room scene illuminated with light sources a was rendered using the ray tracing light buffer technique to process shadow rays a closeup b of part of the room shown in a illustrates the global illumination effects the room is modeled with polygons spheres cylinders and quadrics rendering time was minutes on a vax 780 compared to minutes without using light buffers  courtesy of eric haines and donald p greenberg program of computer graphics cornell university  sector fora bundle of rays   directional subdivision of space all rays in this sector only need to test the surfaces within the sector in depth order  the pixel is treated as a finite square area instead of a single point supersampling uses multiple evenly spaced rays samples over each pixel area adaptive sam pling uses unevenly spaced rays in some regions of the pixel area for example more rays can be used near object edges to obtain a better estimate of the pixel in tensities another method for sampling is to randomly distribute the rays over the pixel area we discuss this approach in the next section when multiple rays rendering methods       subdividing a pixel into nine subpixels with one ray at each subpixel corner        ray positions centered on subpixel areas   pixel pasitions on projection plane projection reference point   supersampling with four rays per pixel one at each pixel comer  per pixel are used the intensities of the pixel rays are averaged to produce the overall pixel intensity   illustrates a simple supersampling procedure here one ray is generated through each corner of the pixel if the intensities for the four rays are not approximately equal or if some small object lies between the four rays we divide the pixel area into subpixels and repeat the process as an example the pixel in  is divided into nine subpixels using rays one at each sub pixel corner adaptive sampling is then used to further subdivide those subpixels that do not have nearly equal intensity rays or that subtend some small object this subdivision process can be continued until each subpixel has approximately equal intensity rays or an upper bound say  has been reached for the num ber of rays per pixel  the cover picture for this book was rendered with adaptive subdivision ray tracing using rayshade version on a macintosh ii an extended light source was used to provide realistic soft shadows nearly million primary rays were generated with million shadow rays and million reflection rays wood grain and marble surface patterns were generated using solid texturing methods with a noise function total rendering time with the extended light source was hours each image of the stereo pair shown in  was generated in hours using a point light source  instead of passing rays through pixel corners we can generate rays through subpixel centers as in  with this approach we can weight the rays ac cording to one of the sampling schemes discussed in chapter  another method for antialiasing displayed scenes is to treat a pixel ray as a cone as shown in  only one ray is generated per pixel but the ray now has a finite cross section to determine the percent of pixel area coverage with objects we calculate the intersection of the pixel cone with the object surface for a sphere this requires finding the intersection of two circles for a polyhedron we must find the intersection of a circle with a polygon  distributed ray tracing this is a stochastic sampling method that randomly distributes rays according to the various parameters in an illumination model mlumination parameters in   projection  reference point a pixel ray cone  clude pixel area reflection and refraction directions camera lens area and time aliasing effects are thus replaced with low level noise  which improves picture quality and allows more accurate modeling of surface gloss and translucency fi nite camera apertures finite light sources and motion blur displays of moving objects distributed ray tracing also referred to as distribution ray tracing essen tially provides a monte carlo evaluation of the multiple integrals that occur in an accurate description of surface lighting  pixel sampling is accomplished by randomly distributing a number of rays over the pixel surface choosing ray positions completely at random however can result in the rays clustering together in a small region of the pixel area and leaving other parts of the pixel unsampled a better approximation of the light distribution over a pixel area is obtained by using a technique called jittering on a regular subpixel grid this is usually done by initially dividing the pixel area a unit square into the subareas shown in  and generating a random jitter position in each subarea the random ray positions are obtained by jittering the center coordinates of each subarea by small amounts  and  where both and are assigned values in the interval   we then choose the ray po sition in a cell with center coordinates x y as the jitter position x  y    integer codes through are randomly assigned to each of the rays and a table lookup is used to obtain values for the other parameters reflection angle time etc  as explained in the following discussion each subpixel ray is then processed through the scene to determine the intensity contribution for that ray the ray intensities are then averaged to produce the overall pixel inten sity if the subpixel intensities vary too much the pixel is further subdivided  to model camera lens effects we set a lens of assigned focal length f in front of the projection plane and distribute the subpixel rays over the lens area as suming we have rays per pixel we can subdivide the lens area into zones each ray is then sent to the zone corresponding to its assigned code the ray po sition within the zone is set to a jittered position from the zone center then the ray is projected into the scene from the jittered zone position through the focal point of the lens we locate the focal point for a ray at a distance f from the lens along the line from the center of the subpixel through the lens center as shown in  objects near the focal plane are projected as sharp images objects in front or in back of the focal plane are blurred to obtain better displays of out of focus objects we increase the number of subpixel rays  ray reflections at surface intersection points are distributed about the spec ular reflection direction r according to the assigned ray codes   the section ray tracing methods       pixel sampling using subpixel areas and a jittered ray position from the center coordinates for each subarea  incoming n ray   distributing subpixel rays about the reflection direction r and the transmission direction t   distributing subpixel rays over a direction camera lens of focal length f  maximum spread about r is divided into angular zones and each ray is re flected in a jittered position from the zone center corresponding to its integer code we can use the phong model cos  to determine the maximum reflection spread if the material is transparent refracted rays are distributed about the transmission direction t in a similar manner  extended light sources are handled by distributing a number of shadow rays over the area of the light source as demonstrated in  the light source is divided into zones and shadow rays are assigned jitter directions to the various zones additionally zones can be weighted according to the intensity of the light source within that zone and the size of the projected zone area onto the object surface more shadow rays are then sent to zones with higher weights if some shadow rays are blocked by opaque objects between the surface and the light source a penumbra is generated at that surface point  illus trates the regions for the umbra and penumbra on a surface partially shielded from a light source  we create motion blur by distributing rays over time a total frame time and the frame time subdivisions are determined according to the motion dynam ics required for the scene time intervals are labeled with integer codes and each ray is assigned to a jittered time within the interval corresponding to the ray code objects are then moved to their positions at that time and the ray is traced ub   cee extended n eoe light l re  max source   distributing shadow rays over a finite sized light source  earth  penumbra   umbra and penumbra regions created by a solar eclipse on the surface of the earth section ray tracing methods    a scene entitled rendered with distributed ray tracing illustrating motion blur and penumbra effects  courtesy of pixar  pixar all rights reserved  through the scene additional rays are used for highly blurred objects to reduce calculations we can use bounding boxes or spheres for initial ray intersection tests that is we move the bounding object according to the motion requirements and test for intersection if the ray does not intersect the bounding object we do not need to process the individual surfaces within the bourding volume figure 78 shows a scene displayed with motion blur this image was rendered using distributed ray tracing with by pixels and rays per pixel in addition to the motion blurred reflections the shadows are displayed with penumbra areas resulting from the extended light sources around the room that are illumi nating the pool table  additional examples of objects rendered with distributed ray tracing meth ods are given in figs 79 and 80   illustrates focusing refrac tion and antialiasing effects with distributed ray tracing   a brushed aluminum wheel showing reflectance and shadow effects generated with distributed ray tracing techniques  courtesy of stephen h westin program of computer graphics cornell university      a room scene rendered with distributed ray tracing methods  courtesy of jokn snyder jed lengyel devendra kalra and al barr computer graphics lab california institute of technology copyright  caltech    ascene showing the focusing antialiasing and illumination effects possible with a combination of ray tracing and radiosity methods realistic physical models of light illumination were used to generate the refraction effects including the caustic in the shadow of the glass  courtesy of peter shirley department of computer science indiana university   we can accurately mode diffuse reflections from a surface by considering the ra diant energy transfers between surfaces subject to conservation of energy laws this method for describing diffuse reflections is generally referred to as the ra diosity model  basic radiosity model in this method we need to consider the radiant energy interactions between all surfaces in a scene we do this by determining the differential amount of radiant energy db leaving each surface point in the scene and summing the energy con tributions over all surfaces to obtain the amount of energy transfer between sur faces with reference to  db is the visible radiant energy emanating from the surface point in the direction given by angles and  within differential solid angle dw per unit time per unit surface area thus db has units of joules sec ond  meter  or watts meter   intensity or luminance of the diffuse radiation in direction   is the ra diant energy per unit time per unit projected area per unit solid angle with units watts meter  steradians  db    _ dw cos  68    visible radiant energy emitted from a surface point in direction   within solid angle dw   direction of energy transfer   or a unit surface element the projected area perpendicular to the direction of energy transfer is equal tocos   assuming the surface is an ideal diffuse reflector we can set intensity i to a con stant for all viewing directions thus db dw is proportional to the projected sur face area   to obtain the total rate of energy radiation from the surface point we need to sum the radiation for all directions that is we want the to  tal energy emanating from a hemisphere centered on the surface point as in   b 48 69  for a perfect diffuse reflector  is a constant so we can express radiant energy b as b if cos deo 70  also the differential element of solid angle dw can be expressed as appendix a  dw    sinpdd d    total radiant energy from a surface point is the sum of the contributions in all directions over a hemisphere centered on the surface point  section radiosity lighting model chapter illumination models and surface  rendering methods  surface k   an enclosure of surfaces for the radiosity model  so that 2a wz b  cosdsinddgde 71 in i a model for the light reflections from the various surfaces is formed by set ting up an enclosure of surfaces   each surface in the enclosure is ei ther a reflector an emitter light source  or a combination reflector emitter we designate radiosity parameter b as the total rate of energy leaving surface k per unit area incident energy parameter h is the sum of the energy contributions from all surfaces in the enclosure arriving at surface k per unit time per unit area that is  hy   bf 72 i where parameter fj is the form factor for surfaces j and k form factor f is the fractional amount of radiant energy from surface j that reaches surface k  for a scene with n surfaces in the enclosure the radiant energy from surface kis described with the radiosity equation  b  ey  ply n 73  e a bf jel if surface k is not a light source f   otherwise e is the rate of energy emitted from surface k per unit area watts meter  parameter p is the reflectivity factor for surface k percent of incident light that is reflected in all directions  this re flectivity factor is related to the diffuse reflection coefficient used in empirical il lumination models plane and convex surfaces cannot see themselves so that no self incidence takes place and the form factor f  for these surfaces is to obtain the illumination effects over the various surfaces in the enclosure we need to solve the simultaneous radiosity equations for the n surfaces given the array values for f  p  and fi that is we must solve   pf ebe  bf  ee k 23   74 jtk or pfy prfi2  af b e tpif pe mn py be pld be  95 pin pf fae  b e  we then convert to intensity values i by dividing the radiosity values b by for color scenes we can calculate the individual rgb components of the radios ity bz big byp from the color components of p and e  before we can solve eq 74 we need to determine the values for form factors f  we do this by considering the energy transfer from surface j to surface k   the rate of radiant energy falling on a small surface element da from area element da is 4b da  u cosd dwida  76  but solid angle dw can be written in terms of the projection of area element da perpendicular to the direction db  _ 4a _ cosdda  dw r  77  surface k surface j   rate of energy transfer db from a surface element with area da to surface element da  section radiosity lighting model chapter ihumination models and surface  rendering methods so we can express eq 76 as db da  i cos cos dy da da mu r2 78  the form factor between the two surfaces is the percent of energy emanating from area da that is incident on da  _ energy incident on da  e  ar44  total energy leaving da  79 i cos dj cos d aa da b da also b  mi so that r cos  cos dy da da day  a 80  the fraction of emitted energy from area da incident on the entire surface k is then cos cos dy faa a  da aay ay wc ar  81  where a is the area of surface k we now can define the form factor between the two surfaces as the area average of the previous expression  cos cos fs    b coshr a da a  suet j sur 82  integrals 82 are evaluated using numerical integration techniques and stipu lating the following conditions   sp fx  for all k conservation of energy  af  afi  uniform light reflection  f   for all j assuming only plane or convex surface patches  each surface in the scene can be subdivided into many small polygons and the smaller the polygon areas the more realistic the display appears we can speed up the calculation of the form factors by using a hemicube to approximate the hemisphere this replaces the spherical surface with a set of linear plane surfaces once the form factors are evaluated we can solve the simultaneous lin ear equations 74 using say gaussian elimination or lu decomposition meth ods appendix a  alternatively we can start with approximate values for the b and solve the set of linear equations iteratively using the gauss seidel method at each iteration we calculate an estimate of the radiosity for surface patch k using the previously obtained radiosity values in the radiosity equation  n b ey  p bifn yl we can then display the scene at each step and an improved surface rendering is viewed at each iteration until there is little change in the calculated radiosity val ues progressive refinement radiosity method although the radiosity method produces highly realistic surface rendings there are tremendous storage requirements and considerable processing time is needed to calculate the form factors using progressive refinement we can restruc ture the iterative radiosity algorithm to speed up the calculations and reduce storage requirements at each iteration  from the radiosity equation the radiosity contribution between two surface patches is calculated as b due to b  pp bf  83 reciprocally b due to by  pbify  for all j 84 which we can rewrite as b due to b  bagh for all  85  this relationship is the basis for the progressive refinement approach to the ra diosity calculations using a single surface patch k we can calculate all form fac tors f and shoot light from that patch to all other surfaces in the environment thus we need only to compute and store one hemicube and the associated form factors at a time we then discard these values and choose another patch for the next iteration at each step we display the approximation to the rendering of the scene  initially we set b  e for all surface patches we then select the patch with the highest radiosity value which will be the brightest light emitter and calcu late the next approximation to the radiosity for all other patches this process is repeated at each step so that light sources are chosen first in order of highest ra diant energy and then other patches are selected based on the amount of light re ceived from the light sources the steps in a simple progressive refinement ap froach are given in the following algorithm  section radiosity lighting mcdel chapter illumination models and surface  rendering methods   nave of chartres cathedral rendered with a progressive refinement radiosity model by john wallace and john lin using the hewlett packard starbase radiosity and ray tracing software radiosity form factors were computed with  tay tracing methods  courtesy of eric haines 3d eye inc   hewlett packard co   for each patch k set up hemicube calculate form factors f   for each patch   drad  bf a ac 4b   4b  arad b   b  srad  ab     at each step the surface patch with the highest value for ab a is selected as the shooting patch since radiosity is a measure of radiant energy per unit area and we choose the initial values as ab  b  e for all surface patches this progres sive refinement algorithm approximates the actual propagation of light through a scene  displaying the rendered surfaces at each step produces a sequence of views that proceeds from a dark scene to a fully illuminated one after the first step the only surfaces illuminated are the light sources and those nonemitting patches that are visible to the chosen emitter to produce more useful initial views of the scene we can set an ambient light level so that all patches have some illumina tion at each stage of the iteration we then reduce the ambient light according to the amount of radiant energy shot into the scene   shows a scene rendered with the progressive refinement ra diosity model radiosity renderings of scenes with various lighting conditions are illustrated in figs 88 to 90 ray tracing methods are often combined with the radiosity model to produce highly realistic diffuse and specular surface shadings as in  section radiosity lighting model   image of a constructivist museum rendered with a progressive refinement radiosity method  courtesy of shenchang eric chen stuart  feldman and julie dorsey program of computer grapitics cornell university   cornell university program of computer graphics        simulation of the stair tower of the engineering theory center building at cormell university rendered with a progressive refinement radiosity method  courtesy of keith howie and ben trumbore program of computer graphics cornell university   cornell university program of computer graphics   fa  b    simulation of two lighting schemes for the parisian garret from the metropolitan opera s production of la boheme  a day view and b night view  courtesy of julie dorsey and mark shepard program of computer graphics cornell university   cornell university program of computer graphics   spherical environment  map  oxyects meee co in scene  a spherical enclosing universe ee containitg the environment map  environment at pping an alternate procedure tor modeling global reflections 1s to define an array of in tensity values that describes the environment around a single object or a set of objects instead of intercbject rav tracing or radiosity calculations to pick up the global specular and dittuse illumination effects we simply map the environment array onto a2 obleect in relationship to the viewing direction this procedure is re ferred to as environment mapping also called reflection mapping although transparency effects cond also be modeled with the environment map environ ment mapping is sometimes referred to as the pocr person s ray tracing method since it fast approximation of the more accurate global illumination rendering techniques we discussed in the previous two sections  the environment map is defined over the surface of an enclosing universe information in the environment map includes intensity values for light sources the sky and other backy ound objects  shows the enclosing universe as a sphere but a cube or a cylinder is often used as the enclosing universe  to render the surtace of an object we project pixel areas onto the surface and then reflect the projected pixel area onto the environment map to pick up the surface shading attributes for each pixel if the object is cransparent we can also refract the projected pial area to the environment map the environment map ping process for reflection of a projected pixel area is illustrated in  pixel intensity is determined by averaging the intensity values within the inter sected region of the environment map  on p surface pixel projection   onto enviranment map  _ figure 92 projecung a pixel area to a surface picection then reflecting the area to the refers ce point environtient map  so far we have discussed rendering techniques for displaying smooth surfaces typically polygons or splines however most objects do not have smooth even surfaces we need surface texture to model accurately such objects as brick walls gravel roads and shag carpets in addition some surfaces contain patterns that must be taken into account in the rendering procedures the surface of a vase could contain a painted design a water glass might have the family crest en graved into the surface a tennis court contains markings for the alleys service areas and base line and a four lane highway has dividing lines and other mark ings such as oil spills and tire skids  illustrates objects displayed with various surface detail  modeling surface detail with polygons a simple method for adding surface detail is to model structure and patterns with polygon facets for large scale detail polygon modeling can give good re sults some examples of such large scale detail are squares on a checkerboard di viding lines on a highway tile patterns on a linoleum floor floral designs in a smooth low pile rug panels in a door and lettering on the side of a panel truck also we could model an irregular surface with small randomly oriented poly gon facets provided the facets were not too small   scenes illustrating computer graphics generation of surface detail  a  deborah r fi  premyslaw prusinkiewicz and johannes battjes  b  deborah r fowler hans metnhardt and przemysiaw prusinkiewicz university of calgary  c and d courtesy of softimage inc   section adding surface detail chapter niumination models aud surface  rendering methods       texture object image space space space  s t array u v surface ix y pixel coordinates parameters coordinates texture surface viewing and transformation projection transformation   coordinate reference systems for texture space object space and image space  surface pattern polygons are generally overlaid on a larger surface polygon and are processed with the parent surface only the parent polygon is processed by the visible surface algorithms but the illumination parameters for the surface detail polygons take precedence over the parent polygon when intricate or fine surface detail is to be modeled polygan methods are noi practical for example it would be difficult to accurately model the surface structure of a raisin with polygon facets  texture mapping a common method for adding surface detail is to map texture patterns onto the surfaces of objects the texture pattern may either be defined in a rectangular array or as a procedure that modifies surface intensity values this approach is referred to as texture mapping or pattern mapping  usually the texture pattern is defined with a rectangular grid of intensity values in a texture space referenced with s t coordinate values as shown in fig 94 surface positions in the scene are referenced with wv object space coordi nates and pixel positions on the projection plane are referenced in xy cartesian coordinates texture mapping can be accomplished in one of two ways either we can map the texture pattern to object surfaces then to the projection plane or we can map pixel arcas onto object surfaces then to texture space mapping a texture pattern to pixel coordinates is sometimes called texture scanning while the map ping from pixel coordinates to texture space is referred to as pixel order scanning or inverse scanning or imuiye order scanning  to simplify calculations the mapping from texture space to object space is often specified with parametric linear functions w fist  as  bt e  48a v fgt  a s bf c  the object to image space mapping is accomplished with the concatenation of the viewing and projection transformations a disadvantage of mapping from texture space to pixel space is thal a selected texture patch usually does not match up with the pixel boundaries thus requiring calculation of the fractional area of pixel coverage therefore mapping from pixel space to texture space fig 95 is the most commonly used texture mapping method this avoids pixel subdivision calculations and allows antialiasing filtering procedures to be eas projected     pixel area my ww thee ae re  phat oe me me pixel surface area rectangular pattern array   texture mapping by projecting pixel areas to texture space  extended  pixel area      extended area for a pixel that includes centers of adjacent pixels     ily applied an effective antialiasing procedure is to project a slightly larger pixel area that includes the centers of neighboring pixels as shown in  and applying a pyramid function to weight the intensity values in the texture pattern but the mapping from image space to texture space does require calculation of the inverse viewing projection transformation mj and the inverse texture map transformation m7  in the following example we illustrate this approach by mapping a defined pattern onto a cylindrical surface  example texture mapping to illustrate the steps in texture mapping we consider the transfer of the pattern shown in  to a cylindrical surface the surface parameters are with chapter  lucunation madels and surface  render ng methods   z ns os no uv  ao  y s x e c of o75 fa  b   mapping a texture pattern defined on a unit square a to a cylindrical surface b  and the parametric representation for the surface in the cartesian reference frame is   frcosh y  rsini  te we can map the arrav pattern to the surface with the following linear transforma tion which maps the pattern origin to the lower left corner of the surface  u  s7  v t next we select a viewing position and perform the inverse viewing transforma tion from pixel coordinates to the cartesian reference for the cylindrical surface cartesian coordinates are then mapped to the surface parameters with the trans formation w tan gy x  v z and projected pixel positians are mapped to texture space with the inverse trans formation s 2u m t il intensity values in the pattern array covered by each projected pixel area are then averaged to obtain the pixel intersity  procedural texturing methods another method for adding surface texture is to use procedural definitions of the color variations that are to be applied to the objects in a scene this approach avoids the transfarmation calculations invelved in transferring two dimensional texture patterns to object surfaces  when values are assigned throughout a region of three dimensional space the object color variatiors are referred to as salid textures values from fexture  a scene with surface characteristics generated using solid texture methods  courtesy of peter shirley  computer science department indiana university   space are transferred to object surfaces using procedural methods since it is usu ally impossible to store texture values for all points throughout a region of space other procedural methods can be used to set up texture values over two dimen sional surfaces solid texturing allows cross sectional views of three dimensional abjects such as bricks to be rendered with the same texturing as the outside sur faces  as examples of procedural texturing wood grains or marble patterns can be created using harmonic functions sine curves defined in three dimensional space random variations in the wood or marble texturing can be attained by su perimposing a noise function on the harmonic variations  shows a scene displayed using solid textures to obtain wood grain and other surface pat terns the scene in  was rendered using procedural descriptions of ma terials such as stone masonry polished gold and banana leaves   a scene rendered with vg shaders and modeled with renderman using polygonal facets for the gem faces quadric surfaces and bicubic patches in addition to surface texturing procedural methods were used to create the steamy jungle atmosphere and the forest canopy dappled lighting effect  courtesy of the valis group reprinted from graphics gems il edited by david kirk copyright  academic press inc   section adding surface detail chapter nlumination models and surface  rendering methods bump mapping although texture mapping can be used to add fine surface detail it is not a good method for modeling the surface roughness that appears on objects such as or anges strawberries and raisins the illumination detail in the texture pattern usually does not correspond to the illumination direction in the scene a better method for creating surface bumpiness is to apply a perturbation function to the surface normal and then use the perturbed normal in the illumination model cal culations this techniques is called bump mapping if p u v represents a position on a parametric surface we can obtain the surface normal at that point with the calculation n p x p  87 where p and p  are the partial derivatives of p with respect to parameters u and v to obtain a perturbed normal we modify the surface position vector by adding a small perturbation function called a bump function p u v  plu v  b u v n 88  this adds bumps to the surface in the direction of the unit surface normal n  n nj  the perturbed surface normal is then obtained as n pxxp 89  we calculate the partial derivative with respect to w of the perturbed position vector as p le  bn  90  p  bn  bn  assuming the bump function is small we can neglect the last term and write  p  p  bn 91 similarly  p p  n 92 and the perturbed surface normal is n p xp  bp x n  b n x p   b n x n  but n x n  50 that n n p xn  b n x pl  93  the final step is to normalize n for use in the ijlumination model calculations    surface roughness characteristics rendered with bump mapping  courtesy of a peter shirley computer science department indiana university and b softimage inc     the stained glass knight from the motion picture young sherlock holmes a combination of bump mapping environment mapping and texture mapping was used to render the armor surface  courtesy of industrial light  magic copyright  paramount pictures amblin   there are several ways in which we can specify the bump function b u v  we can actually define an analytic expression but bump values are usually ob tained with table lookups with a bump table values for b can be obtained quickly with linear interpolation and incremental calculations partial derivatives b and b are approximated with finite differences the bump table can be set up with random patterns regular grid patterns or character shapes random pat terns are useful for modeling irregular surfaces such as a raisin while a repeat ing pattern could be used to model the surface of an orange for example to an tialiase we subdivide pixel areas and average the computed subpixel intensities   shows examples of surfaces rendered with bump mapping an example of combined surface rendering methods is given in  the armor for the stained glass knight in the film yourg sherlock holmes was rendered with a combination of bump mapping environment mapping and texture map ping an environment map of the surroundings was combined with a bump map to produce background illumination reflections and surface roughness then ad ditional color and surface illumination bumps spots of dirt ard stains for the seams and rivets were added to produce the overall effect shown in   frame mapping this technique is an extension of bump mapping in frame mapping we perturb both the surface normal n and a local coordinate system   attached to section adding surface detail chapter nluminatian models and surtat e  rendering methods figure h 1o2 a local coordinate system at a surface point  n the local coordinates are defined with a surface tangent vector t and a binor mal veclor b tn frame mapping used to model anisotropic surfaces we onent t along the grain of the surtace and apply directional perturbations in addition to bump perturbations ir che direction of n in this way we can model wood grain patterns cross thread patterns in cloth and streaks in marble or similar materi als both bump and directional perturbations can be obtained with table lookups  summary in general an object 1s illuminated with radiant energy from light emitting soutces and from the reflective surfaces of other objects in the scene light sources can be modeled es point sources or as distributed extended sources ob jects can be either opaque or transparent and lighting effects can be described in terms of diffuse and specular components for both reflections and refractions  an empirical puint light source iumination model can be used to de scribe diffuse reflections with lambert s cosine law and to describe specular re flections with the mhony model general background ambient lighting can be modeled with a tixed intensity level and a coefficient ot reflection for each sur face in this basic model we can approximate transparency effects by combining surface intensities using transparency coefficient accurate geometric modeling of light paths through transparent materials is obtained by calculating refraction angles using snell s law color is incorporated into the mode by assigning a triple of rgb values te intensities and surface reflection coefficients we can also extend the basic model to incorporate distributed light sources studio lighting effects and intensity attenuation  intensity values calculated with an illumination model must be mapped to the intensity levels available on the display system in use a loganthmic intensity scale is used to provide set of intensity ievels with equal perceived brightness in addition gamma correction is applied to intensity values to correct for the nonlinearity of diaplay devices with bilevel monitors we can use halftone pat terns and dithering techniques to simulate a range of intensity values halftone approximations can also be used to increase the number ef intensity options on systems that are capable of displaying more than two irtensities per pixel or dered dither error diffision and dot diffusion methods are used to simulate a range of intensities when the number of points to be plotted in a scene is equal to the number of pixels on the display device  surface rendering can be accomplished by applying a basic illumination model to the objects in a scence we apply an illumination model using either con stant intensity shading gouraud shading or phong shading constant shading is accurate for polyhedrons or for curved surface polygon meshes when the references viewing and light source positions are far from the objects in a scene gouraud shading approximates light reflections from curved surfaces by calculating inten  sity values at polygon vertices and interpolating these intensity values across the polygon facets a more accurate but slower surface rendering procedure is phong shading which interpolates the average narmal vectors for polygon ver  tices over the polygon facets then surface intensities are calculated using the in  terpolated normal vectors fast phong shading can be used to speed up the calcu  lations using taylor series approximations  ray tracing provides an accurate n ethod for obtaining global specular re flection and transmission effects pixel rays are traced through a scene bouncing from object to object while accumulating intensity contributions a ray tracing tree is constructed for each pixel and intensity values are combined from the ter minal nodes of the tree back up to the root object intersection calculations in ray tracing can be reduced with space subdivision methods that test for ray object in tersections only within subregions of the total space distributed or distribution ray tracing traces multiple rays per pixel and distributes the rays randomly over the various ray parameters such as direction and time this provides an accurate method for modeling surface gloss and translucency finite camera apertures dis tributed light sources shadow effects and motion blur  radiosity methods provide accurate modeling of diffuse reflection effects by calculating radiant energy transfer between the various surface patches in a scene progressive refinement is used to speed up the radiosity calculations by considering energy transfer from one surface patch at a time highly photorealis tic scenes are generated using a combination of ray tracing and radiosity  a fast method for approximating global illumination effects is environment mapping an environment array is used to store background intensity informa tion for a scene this array is then mapped to the objects in a scene based on the specified viewing direction  surface detail can be added to objects using polygon facets texture map ping bump mapping or frame mapping small polygon facets can be overlaid on larger surfaces to provide various kinds of designs alternatively texture pat terns can be defined in a two dimensional array and mapped to object surfaces bump mapping is a means for modeling surface irregularities by applying a bump function to perturb surface normals frame mapping is an extension of bump mapping that allows for horizontal surface variations as well as vertical variations  references a general discussion of energy propagation transfer equations rendering processes and our perception of light and color is given in glassner  algorithms for various surface rendering techniques are presented in glassner  arvo  and kirk  for further discussion of ordered dither error diffusion and dot diffusion see knuth  additional information on ray tracing methods can be tound in quek and hearn  glassner  shirley  and koh and hearn  radiosity methods are dis cussed in goral et al   cohen and greenberg  cohen et al   wallace elmquist and haines  chen et al   dorsey sillion and greenberg  he et al   sillion et al   schoeneman et al  and lischinski tampieri and greenberg   chapter t4  murination models and surface  rendering methods  exercises      10  11 12  13  14 15 16 17 18 19  20 write a routine to imelement eq of the basic illumination mode using a single point light source and constant surface shading for the faces of a specified polyhe dron the object description is to be given as a set of polygon tables including sur face normals for each of the polygon faces additional input parameters include the ambient intensity light source intensity and the sudace reflection coefficients all coordinate information can be specified directly in the viewrng reference frame  modify the routine n exercise to render a polygon surface mesh using gouraud shading  modify the routine in exercise to render a polygon surface mesh using phong shading write a routine to implement eq of the basic illumination model using a single point light source and gouraud surface shading for the tales of a specified polygon mesh the object des ription is to be given as a set of polygon tables including sur face normals for each of the polygon faces additional input includes values for the ambient intensity light source intensity surface reflection cvefficients and the spec ular reflection parameter all coordinate information can be specified directly in the viewing reference frame modify the routine in  xercise to render the polygon surfaces using phong shad ing  modify the routine in exercise to include a linear intensity attenuation func tion modify the routine in exercise  to render the pulygon surfaces using phong shad ing and a linear intens ty attenuation function  modify the routine in ixercise to impiement eq 13 with any specified num ber of polyhedrans and light sources in the scene  modify the routine in xercise to implement eq 14 with any specified num ber of polyhedrons and light sources in the scene  modify the routine in exercise to implement fq 15 with any specified num ber of polyhedrons and light sources iy the scene  modify the routine t exercise to implernent eqs 15 aid 19 with any specified number of ight sources and polyhedrons e ther opaque or transparent in the scene discuss the differenies you might expect lo see in the appearance of specula retlec tions modeled with n  h  compared to specular reflections modeled with v rr  verify that 2a  din fip 18 when all vectors are coplanar but that in general 2a o  discuss how the diterent visible surface detection me hous can he cambined with an intensity model for displaying a set of pelyhedrons with opaque sucaces discuss how the var ous visinle suface detection mmetyods can be mod tied ta process transparent ofyects are there ary visible surtace detection methods tho cannut fandle transparent surlaces  set up algorithms based on one ot the wisibie surtace detection methods that wil identify shadow areas na scene illuminated by a distant port source how many intensity levels can be displayed with halftane approximations using by npixel grids where each pixel can be displayed with mm citterent intensities  how many different color combinattons can be generated sing halttone approxi ttons on twa level rgb system with a  by pixel grd  write a routine to disp av a given set of surrace intensily varatians using halftone ap proximations with  by pixel grids and two intensity levels and 1s per pixel write a ouline to generale ordered dither matrices using the recurrence relation in eq 34 21  22  23  24  25  26  27  28  29 30 31 32  33  write a procedure to display a given array of intensity values using the ordered dither method  write a procedure to implement the error diffusion algorithm for a given m by n array of intensity values  write a program to implement the basic ray tracing algorithm for a scene containing a single sphere hovering over a checkerboard ground square the scene is to be illu minated with a single point light source at the viewing position  write a program to implement the basic ray tracing algorithm for a scene containing any specified arrangement of spheres and polygon surfaces illuminated by a given set of point light sources  write a program to implement the basic ray tracing algorithm using space subdivi sion methods for any specified arrangement of spheres and polygon surfaces inumi nated by a given set of point light sources  write a program to implement the following features of distributed ray tracing pixel sampling with jittered rays per pixel distributed reflection directions distributed tefraction directions and extended light sources  set up an algorithm for modeling the motion blur of a moving object using distrib uted ray tracing  implement the basic radiosity algorithm for rendering the inside surfaces of a cube when one inside face of the cube is a light source  devise an algorithm for implementing the progressive refinement radiosity method write a routine to transform an environment map to the surface of a sphere  write a program to implement texture mapping tor a spherical surfaces and b polyhedrons  given a spherical surface write a bump mapping procedure to generate the bumpy surface of an orange  write a bump mapping routine to produce surface normal variations for any speci fied bump function  exercises chapter  color models and color applications    ob4  ur discussions of color up to this point have concentrated on the mecha nisms for generating color displays with combinations of red green and blue light this mode is helpful in understanding how color is represented on a video monitor but several other color models are useful as well in graphics ap plications some models are used to describe color output on printers and plot ters and other models provide a more intuitive color parameter interface for the user  a color model is a method for explaining the properties or behavior of color within some particular context no single color model can explain all as pects of color so we make use of different models to help describe the different perceived characteristics of color  properties of light what we perceive as light  or different colors is a narrow frequency band within the electromagnetic spectrum a few of the other frequency bands within this spectrum are called radio waves microwaves infrared waves and x rays  shows the approximate frequency ranges for some of the electromag  netic bands  each frequency value within the visible band corresponds to a distinct color at the low frequency end is a red color x hertz  and the highest frequency we can see is a violet color x hertz  spectral colors range from the reds through orange and yellow at the low frequency end to greens blues and violet at the high end   z   29 s z z g e  gs    e  i    x          frequency 108  1081978 thertz   electromagnetic spectrum  chapter colo models and color applications a   time variations for one electric frequency component of a plane polarized electromagnetic wave  since light is an electromagnetic wave we can describe the various colors in terms of either the frequency f or the wavelength a of the wave in  we illustrate the oscillations present in a monochromatic electromagnetic wave po larized so that the electric oscillations are in one plane the wavelength and fre quency of the monochromatic wave are inversely proportional to each other with the proportionality constant as the speed of light c  c a  frequency is constant for all materials but the speed of light and the wavelength are material dependent ina vacuum c  x cm sec light wavelengths are very small so length units for designating spectral colors are usually either angstroms 1a  cm or nanometers nm  cm  an equivalent term for nanometer is millimicron light at the red end of the spectrum has a wave length of approximately nanometers nm  and the wavelength of the violet light at the other end of the spectrum is about nm since wavelength units are somewhat more convenient to deal with than frequency units spectral colors are typically specified in terms of wavelength  a light source such as the sun or a light bulb emits all frequencies within the visible range to produce white light when white light is incident upon an ob ject some frequencies are reflected and some are absorbed by the object the combination of frequencies present in the reflected light determines what we per ceive as the color of the object if low frequencies are predominant in the reflected light the object is described as red in this case we say the perceived light has a dominant frequency or dominant wavelength at the red end of the spectrum the dominant frequency is also called the hue or simply the color of the light  other properties besides frequency are needed to describe the various char acteristics of light when we view a source of light our eves respond to the color or dominant frequency and two other basic sensations one of these we call the brightness which is the perceived intensity of the light intensity is the radiant energy emitted per unit time per unit solid angle and per unit projected area of the source radiant energy is related to the juminance of the source the second energy  frequency  energy distribution of a white light source  red violet  perceived characteristic is the purity or saturation of the light purity describes how washed out or how pure the color of the light appears pastels and pale colors are described as less pure these three characteristics dominant frequency brightness and purity are commonly used to describe the different properties we perceive in a source of light the term chromaticity is used to refer collectively to the two properties describing color characteristics purity and dominant fre quency  energy emitted by a white light source has a distribution over the visible frequencies as shown in  each frequency component within the range from red to violet contributes more or less equally to the total energy and the color of the source is described as white when a dominant frequency is present the energy distribution for the source takes a form such as that in  we would now describe the light as having the color corresponding to the dominant frequency the energy density of the dominant light component is labeled as ep in this figure and the contributions from the other frequencies produce white light of energy density ey we can calculate the brightness of the source as the area under the curve which gives the total energy density emitted purity de pends on the difference between ep and ey the larger the energy ep of the dom inant frequency compared to the white light component ey the more pure the light we have a purity of percent when fy  and a purity of percent when ey  ep  when we view light that has been formed by a combination of two or more sources we see a resultant light with characteristics determined by the original sources two different color light sources with suitably chosen intensities can be used to produce a range of other colors if the two color sources combine to pro  i energy t e  o i ew i red viol   frequency ee roret  dominant energy distribution of a light source frequency with a dominant frequency near the red end of the frequency range  section properties of light  chapter color models and color applications color matching rgb amounts ainm    amounts of rgb primaries needed to display spectral colors  duce white light they are referred to as complementary colors examples of complementary color pairs are red and cyan green and magenta and blue and yellow with a judicious choice of two or more starting colors we can form a wide range of other colors typically color models that are used to describe com binations of light in terms of dominant frequency hue use three colors to obtain a reasonably wide range of colors called the color gamut for that model the two or three colors used to produce other colors in such a color model are referred to as primary colors  no finite set of real primary colors can be combined to produce all possible visible colors nevertheless three primaries are sufficient for most purposes and colors not in the color gamut for a specified set of primaries can still be described by extended methods if a certain color cannot be produced by combining the three primaries we can mix one or two of the primaries with that color to obtain a match with the combination of remaining primaries in this extended sense a set of primary colors can be considered to describe all colors  shows the amounts of red green and blue needed to produce any spectral color the curves plotted in  called color matching functions were obtained by aver aging the judgments of a large number of observers colors in the vicinity of nm can only be matched by subtracting an amount of red light from a combi nation of blue and green lights this means that a color around nm is de scribed only by combining that color with an amount of red light to produce the blue green combination specified in the diagram thus an rgb color monitor cannot display colors in the neighborhood of s00 am  standard primaries and the chromatic ty diagram since no finite set of color light sources can be combined to display all possible colors three standard primaries were defined in by the international com mission on illumination referred to as the cie commission internationale de  eclairage  the three standard primaries are imaginary colors they are defined mathematically with positive color matching functions   that specity the color matching cie amounts   an   amounts of cie primaries needed to display spectral colors  amount of each primary needed to describe any spectral color this provides an international standard definition for all colors and the cie primaries eliminate negative value color matching and other problems associated with selecting a set of real primaries  xyz color model the set of cie primaries is generally referred to as the xyz or x y z  color model where x y and z represent vectors in a three dimensional additive color space any color c is then expressed as c  xx  yy  zz  where x y and z designate the amounts of the standard primaries needed to match c  in discussing color properties it is convenient to normalize the amounts in eq against luminance x  y  z  normalized amounts are thus calculated as x y z  yayen yo xeyez xs ezz with x  y  z  thus any color can be represented with just the x and y amounts since we have normalized against luminance parameters x and y are called the chromaticity values because they depend only on hue and purity also if we specify colors only with x and y values we cannot obtain the amounts x y and z therefore a complete description of a color is typically given with the three values x y and y the remaining cie amounts are then calculated as x mae z y  where z   x  y using chromaticity coordinates x y  we can represent all colors on a two dimensional diagram  cie chromaticity diagram when we plot the normalized amounts x and y for colors in the visible spectrum we obtain the tongue shaped curve shown in  this curve is called the cie chromaticity diagram points along the curve are the pure colors in the section standard primaries and the chromaticity diagram  chapter color models and color applications    spectral   colors  yellow  red   cie chromaticity diagram spectra 2 4 06 x color positions along the curve are  labeled in wavelength units nm  electromagnetic spectrum labeled according to wavelength in nanometers from the red end to the violet end of the spectrum the line joining the red and violet spectral points called the purple line is not part of the spectrum interior points represent all possible visible color combinations point c in the diagram corre sponds to the white light position actually this point is plotted for a white light source known as illuminant c which is used as a standard approximation for average daylight  luminance values are not available in the chromaticity diagram because of normalization colors with different luminance but the same chromaticity map to the same point the chromaticity diagram is useful for the following   comparing color gamuts for different sets of primaries  identifying complementary colors  determining dominant wavelength and purity of a given color  color gamuts are represented on the chromaticity diagram as straight line segments or as polygons al colors along the line joining points c and c in fig can be obtained by mixing appropriate amounts of the colors c and c  if a greater proportion of c is used the resultant color is closer to c than to c  the color gamut for three points such as c3 c  and c in  is a triangle with vertices at the three color positions three primaries can only generate colors in side or on the bounding edges of the triangle thus the chromaticity diagram helps us understand why no set of three primaries can be additively combined to generate all colors since no triangle within the diagram can encompass all colors color gamuts for video monitors and hard copy devices are conveniently com pared on the chromaticity diagram  since the color gamut for two points is a straight line complementary col ors must be represented on the chromaticity diagram as two points situated on opposite sides of c and connected with a straight ine when we mix proper amounts of the two colors c and c in  we can obtain white light  we can also use the interpretation of color gamut for two primaries to de termine the dominant wavelength of a color for color point c in  we can draw a straight line trom c through c to intersect the spectral curve at point   x x    color gamuts defined on the representing complementary determining dominant chromaticity diagram for a colors on the chromaticity wavelength and purity with two color and a three color diagram the chromaticity diagram  system of primaries  c  color c can then be represented as a combination of white light c and the spectral color c  thus the dominant wavelength of c is c  this method for de termining dominant wavelength will not work for color points that are between cand the purple line drawing a line from c through point c in  takes us to point c on the purple line which is not in the visible spectrum point c is referred to as a nonspectral color and its dominant wavelength is taken as the compliment of c that lies on the spectral curve point c   nonspectral colors are in the purple magenta range and have spectral distributions with subtractive dominant wavelengths they are generated by subtracting the spectral dominant wavelength such as c  from white light  for any color point such as c in  we determine the purity as the relative distance of c from c along the straight line joining c to c  if d  denotes the distance from c to c and d  is the distance from c to c  we can calculate pu rity as the ratio d  d  color c in this figure is about percent pure since it is situated at about one fourth the total distance from c to c  at position c the color point would be percent pure   an artist creates a color painting by mixing color pigments with white and blacx pigments to form the various shades tints and tones in the scene starting with the pigment for a pure color  or pure hue  the artist adds a black pigment to produce different shades of that color the more black pigment the darker the shade similarly different tints of the color are obtained by adding a white pig ment to the original color making it lighter as more white is added tones of the color are produced by adding both black and white pigments  to many these color concepts are more intuitive than describing a color as a set of three numbers that give the relative proportions of the primary colors it is generally much easier to think of making a coler lighter by adding white and making a color darker by adding black therefore graphics packages providing chapter color models and color applications color palettes to a user often employ two or more color models one model pro vides an intuitive color interface for the user and others describe the color com ponents for the output devices  based on the tristimulus theory of vision our eyes perceive color through the stim ulation of three visual pigments in the cones of the retina these visual pigments have a peak sensitivity at wavelengths of about nm red  nm green  and nm blue  by comparing intensities in a light source we perceive the color of the light this theory of vision is the basis for displaying color output on a video monitor using the three color primaries red green and blue referred to as the rgb color model  we can represent this model with the unit cube defined on r g and b axes as shown in  the origin represents black and the vertex with coordi nates   is white vertices of the cube on the axes represent the primary col ors and the remaining vertices represent the complementary color for each of the primary colors  as with the xyz color system the rgb color scheme is an additive model intensities of the primary colors are added to produce other colors each color point within the bounds of the cube can be represented as the triple r g b  where values for r g and b are assigned in the range from to thus a color c is expressed in rgb components as c  rr gg  bb  the magenta vertex is obtained by adding red and blue to produce the triple   and white at   is the sum of the red green and blue vertices shades of gray are represented along the main diagonal of the cube from the origin black to the white vertex each point along this diagonal has an equal contribu tion from each primary color so that a gray shade halfway between black and grayscale green   yeltow ens    cyan  a    white black i a4   j  red r oo ee    blus magenta the rgb color model defining    gs colors with an additive process within the unit cube  ial ib   two views of the rgb color cube  a along the grayscale diagonal from white to black and b along the grayscale diagonal from black to white  table rgb x y chromacity coordinates    ntsc standard cie model approx color monitor values r 670 330  735 265  628 346 g 210 710  274 747  268 588 b 140 080  167 009  150 070 o 02 0 06 x  rgb color gamut   white is represented as   the color graduations along the front and top planes of the rgb cube are illustrated in   chromaticity coordinates for an ntsc standard rgb phosphor are listed in table also listed are the rgb chromaticity coordinates for the cie rgb color model and the approximate values used for phosphors in color monitors  shows the color gamut for the ntsc standard rgb rrimaries  section rgb color model  chapter color models and color applications  whereas an rgb monitor requires separate signals for the red green and blue components of an image a television monitor uses a single composite signal the national television system committee ntsc color model for forming the com posite video signal is the yiq model which is based on concepts in the cie xyz model  in the yiq color model parameter y is the same as in the xyz model lu minance brightness information is contained in the y parameter while chro maticity information hue and purity is incorporated into the j and q parame ters a combination of red green and blue intensities are chosen for the y parameter to yield the standard luminosity curve since y contains the luminance information black and white television monitors use only the y signal the largest bandwidth in the ntsc video signal about mhz is assigned to the y information parameter  contains orange cyan hue information that provides the flesh tone shading and occupies a bandwidth of approximately mhz para meter q carries green magenta hue information in a bandwidth of about mhz  an rgb signal can be converted to a television signal using an ntsc en coder which converts rgb values to yiq values then modulates and superim poses the j and q information on the y signal the conversion from rgb values to yiq values is accomplished with the transformation y 299 587 144 r   275  g  q 212 528 311 _b this transformation is based on the ntsc standard rgb phosphor whose chro tmaticity coordinates were given in the preceding section the larger proportions of red and green assigned to parameter y indicate the relative importance of these hues in determining brightness compared to blue  an ntsc video signal can be converted to an rgb signal using an ntsc decoder which separates the video signal into the yiq components then con verts to rgb values we convert from yiq space to rgb space with the inverse matrix transformation from eq  r 000 956 620  y g      b 000 108 705 q  a color model defined with the primary colors cyan magenta and yellow cmy is useful for describing color output to hard copy devices unlike video monitors which produce a color pattern by combining light from the screen phosphors hard copy devices such as plotters produce a color picture by coating a paper with color pigments we see the colors by reflected light a subtractive process  as we have noted cyan can be formed by adding green and blue light therefore when white light is reflected from cyan colored ink the reflected light must have no red component that is red light is absorbed or subtracted by the ink similarly magenta ink subtracts the green component from incident light and yellow subtracts the blue component a unit cube representation for the cmy model is illustrated in   in the cmy model point   represents black because all components of the incident light are subtracted the origin represents white light equal amounts of each of the primary colors produce grays along the main diagonal of the cube a combination of cyan and magenta ink produces blue light because the red and green components of the incident light are absorbed other color combinations are obtained by a similar subtractive process the printing process often used with the cmy mode generates a color point with a collection of four ink dots somewhat as an rgb monitor uses a col lection of three phosphor dots one dot is used for each of the primary colors cyan magenta and yellow  and one dot is black a black dot is included be cause the combination of cyan magenta and yellow inks typically produce dark gray instead of black some plotters produce different color combinations by spraying the ink for the three primary colors over each other and allowing them to mix before they dry  we can express the conversion from an rgb representation to a cmy repre sentation with the matrix transformation cc k mi  ll   y b where the white is represented in the rgb system as the unit column vector sim ilarly we convert from a cmy color represeniation to an rgb representation with the matrix transformation c 1m ia y where black is represented in the cmy system as the unit column vector  instead of a set of color primaries the hsv model uses color descriptions that have a more intuitive appeal to a user to give a color specification a user selects a spectral color and the amounts of white and black that are to be added to ob tain different shades tints and tones color parameters in this model are aue h  saturation s  and value v  section hsv color model m g t rayseate magenta blue red  nie black cyan white c    yellow green   the cmy color model defining colors with a subtractive process inside a unit cube  chapter green color models and color  applications cyan yellow blue red r magenta rgb color cube color hexagon a  b   when the rgb color cube a is viewed along the diagonal from white to black the color cube outline is a hexagon b  the three dimensional representation of the hsv model is derived from the rgb cube if we imagine viewing the cube along the diagonal from the white vertex to the origin black  we see an outline of the cube that has the hexagon shape shown in  the boundary of the hexagon represents the various hues and it is used as the top of the hsv jhexcone   in the hexcone saturation is measured along a horizontal axis and value is along a vertical axis through the center of the hexcone  hue is represented as an angle about the vertical axis ranging from at red through  vertices of the hexagon are separated by intervals yellow is at  green at  and cyan opposite red at h   complementary colors are apart  v value    yellow  wal cyan white  v  h hue angle  vad  biack sisaturation  the hsv hexcone   v tints pure hue white   v  shades  black cross section of the hsv hexcone  showing regions for shades tints  and tones  saturation s varies from to it is represented in this madel as the ratio of the purity of a selected hue to its maximum purity at s  a selected hue is said to be one quarter pure at the value s  25 at s  we have the gray scale  value v varies from at the apex of the hexcone to at the top the apex represents black at the top of the hexcone colors have their maximum intensity when v  and s  we have the pure hues white is the point at v  and s  this is a more intuitive model for most users starting with a selection fora pure hue which specifies the hue angle h and sets v   we describe the color we want in terms of adding either white or black to the pure hue adding black decreases the setting for v while s is held constant to get a dark blue v could be set to with   and h   similarly when white is to be added to the hue selected parameter s is decreased while keeping v constant a light blue could be designated with s  while v  and h   by adding some black and some white we decrease both v and s an interface for this model typically presents the hsv parameter choices in a color palette  color concepts associated with the terms shades tints and tones are repre sented in a cross sectional plane of the hsv hexcone   adding black to a pure hue decreases v down the side of the hexcone thus various shades are represented with values   and v adding white to a pure tone pro duces different tints across the top plane of the hexcone where parameter values are v and s various tones are specified by adding both black and white producing color points within the triangular cross sectional area of the hexcone  the human eye can distinguish about different hues and about dif ferent tints saturation levels  for each of these a number of shades value set tings can be detected depending on the hue selected about shades are dis cernible with yellow colors and about different shades can be seen at the blue end of the spectrum this means that we can distinguish about x x  720 different colors for most graphics applications hues saturation lev els and value settings are sufficient with this range of parameters in the hsv color model 384 colors would be available to a user and the system would need bits of color storage per pixel color lookup tables could be used to re  duce the storage requirements per pixel and to increase the number of available colors  section hsv color mode  chapter color models and color applications  if hsv color parameters are made available to a user of a graphics package these parameters are transformed to the rgb settings needed for the color monitor to determine the operations needed in this transformation we first consider how the hsv hexcone can be derived from the rgb cube the diagonal of this cube trom black the origin to white corresponds to the v axis of the hexcone also each subcube of the rgb cube corresponds to a hexagonal cross sectional area of the hexcone at any cross section all sides of the hexagon and all radial lines from the v axis to any vertex have the value v for any set of rgb values v is equal to the maximum value in this set the hsv point corresponding to the set of rgb values lies on the hexagonal cross section at value v parameter s is then determined as the relative distance of this point from the v axis parameter h is determined by calculating the relative position of the point within each sextant of the hexagon an algorithm for mapping any set of rgb values into the corre sponding hsv values is given in the following procedure   include math h   input h s v in range   outputs r g bk ain range    void hsvilorgb float h float s float v float  r   int i  float aa bb cc ft float  yg float  b  if s    grayscale  tr se tg   bey else  if th   h  h    ios floor nh  i f h a  aa v   5s  bb sv    s   co v   ss      switch i  case  r v  g  cc  b  aa break case tr  bb  g  vi  b  ad break case  r  aa  g  v th  cc break case  r  aa  g  bb  h  v break case  r  cc  g  aa  b  v break case  r v  g  aa  b  bb break     we obtain the transformation from hsv parameters to rgb parameters by determining the inverse of the equations in rgbtohsv procedure these in verse operations are carried out for each sextant of the hexcone the resulting transformation equations are summarized in the following algorithm  kinclude math h   define min a b  a a a b  define max a b  a  a b   define no_hue i   input r g b in range  outputs h s v in range  ioe void rgbtohsyv float r float g float b floac  h float  s float  v  float max  max r max g b  min  min r min g b  float delta  max  min  yvo  max if max   s  delta  max else s  if  s    h  no_hue else  if r  max   h  g  b  delta i else if g  max i th   b  x  delta else if b  max  h   x  g  delta   h t   if  h  th    h     i  a   hls color model another model based on intuitive color parameters is the hls system used by tektronix this model has the double cone representation shown in  the three color parameters in this model are called hue h  lightness l  and saturation s  hue has the same meaning as in the hsv model it specifies an angle about the vertical axis that locates a chosen hue in this model h  corresponds to blue the remaining colors are specified around the perimeter of the cone in the same order as in the hsv model magenta is at  red is at  and cyan is lo cated at h   again complementary colors are apart on the double cone  the vertical axis in this model is called lightness l at l  we have black and white is at l  gray scale is along the l axis and the pure hues lie on the l  plane  saturation parameter s again specifies relative purity of a color this para meter varies from to and pure hues are those for which s  and l  as s decreases the hues are said to be less pure at  we have the gray scale  as in the hsv model the hls system allows a user to think in terms of making a selected hue darker or lighter a hue is selected with hue angle h and the desired shade tint or tone is obtained by adjusting l and s colors are made lighter by increasing l and made darker by decreasing l when s is decreased the colors move toward gray  section hls color model  chapter color models and color applications  l lightness d ded yeliow blue  h hue angle l  black s saturation      the hls double cone   a graphics package can provide color capabilities in a way that aids us in making color selections various combinations of colors can be selected using sliders and color wheels and the system can also be designed to aid in the selection of har monizing colors in addition the designer of a package can follow some basic color rules when designing the color displays that are to be presented to a user one method for obtaining a set of coordinating colors is to generate the set from some subspace of a color model if colors are selected at regular intervals along any straight line within the rgb or cmy cube for example we can expect to obtain a set of well matched colors randomly selected hues can be expected to produce harsh and clashing color combinations another consideration in the selection of color combinations is that different colors are perceived at different depths this occurs because our eyes focus on colors according to their frequency blues in particular tend to recede displaying a blue pattern next to a red pattern can cause eye fatigue because we continually need to refocus when our attention is switched from one area to the other this problem can be reduced by separat ing these colors or by using colors from one half or tess of the color hexagon in the hsv model with this technique a display contains either blues and greens or reds and yellows  as a gencral rule the use of a smaller number of colors produces a more pleasing display than a large number of colors and tints and shades blend better than pure hues for a background gray or the complement of one of the fore ground colors is usually best  summary in this chapter we have discussed the basic properties of light and the concept of a color model visible light can be characterized as a narrow frequency distribu tion within the electromagnetic spectrum light sources are described in terms of their dominant frequency or hue  luminance or brightness  and purity or sai uration  complementary color sources are those that combine to produce white light  one method for defining a color model is to specify a set of two or more primary colors that are combined to produce various other colors common color models defined with three primary colors are the rgb and cmy madels video monitor displays use the rgb model while hardcopy devices produce color out put using the cmy model other color models based on specification of lumi nance and purity values include the y q hsv and hls color models intuitive color models such as the hsv and hls models allow colors to be specified by selecting a value for hue and the amounts of white and black to be added to the selected hue  since no model specified with a finite set of color parameters is capable of describing all possible colors a set of three hypothetical colors called the cie primaries has been adopted as the standard for defining all color combinations the set of cie primaries is commonly referred to as the xyz color model plot ting normalized values for the x and y standards produces the cie chromaticity diagram which gives a representation for any color in terms of hue and purity we can use this diagram to compare color gamuts for different color models to identify complementary colors and to determine dominant frequency and purity for a given color  an important consideration in the generation of a color display is the selec tion of harmonious color combinations we can do this by following a few simple rules coordinating colors usually can be selected from within a small subspace of a color model also we should avoid displaying adjacent colors that differ widely ir dominant frequency and we should limit displays to a small number of color combinations formed with tints and shades rather than with pure hues  references a comprehensive discussion of the science of color is given in wyszecki and stiles  color models and color display techniques are discussed in durrett  hall  and travis  algorithms for various color applications are presented n glassner  arvo  and kirk  for additional infoymation on the human visual sys tem and our perception of light and color see glassnet  references  chapter color models and color applications  exercises       10  11  12  derive expressions for converting rgb color parameters to hsv values  derive expressions for converting hsv color values to rgb values  write an interactive procedure that allows selection of hsv color parameters irom a displayed menu then the hsv values are to be converted to rgb values for storage in a frame buffer  derive expressions for converting rgb color values to hls color parameters  derive expressions for converting hls color values to rgb values  write a program that allows interactive selection of hls values from a color menu then converts these values ta corresponding rgb values write a program that will produce a set of colors that are linearly interpolated be tween any two specified positions in rgb space  write an interactive routine for selecting color values from within a specified sub space of rgb space write a program that will produce a set of cofors that are linearly interpolated be tween any two specified positions in hsv space  write a program that will produce a set of colors that are linearly interpolated be tween any two specified positions in hls space  display two rgb color grids side by side on a video monitor fill one grid with a set of randomly selected rgb colors and fill the other grid with a set of colors that are selected from a small rgb subspace experiment with different random selections and different rgb subspaces and compare the two color grids  display the two color grids in exercise 11 using color selections from either the hsv or the hls calor space  chapter computer animation      s ome typical applications of computer generated animation are entertain ment motion pictures and cartoons  advertising scientific and engineering studies and training and education although we tend to think of animation as implying object motions the term computer animation generally refers to any time sequence of visual changes in a scene in addition to changing object posi tion with translations or rotations a computer generated animation could dis play time variations in object size color transparency or surface texture adver tising animations often transition one object shape into another for example transforming a can of motor oi into an automobile engine computer animations can also be generated by changing camera parameters such as position orienta tion and focal length and we can produce computer animations by changing lighting effects or other parameters and procedures associated with illumination and rendering  many applications of computer animation require realistic displays an ac curate representation of the shape of a thunderstorm or other natural phenomena described with a numerical model is important for evaluating the reliability of the model also simulators for training aircraft pilots and heavy equipment oper ators must produce reasonably accurate representations of the environment en tertainment and advertising applications on the other hand are sometimes more interested in visual effects thus scenes may be displayed with exaggerated shapes and unrealistic motions and transformations there are many entertain ment and advertising applications that do require accurate representations for computer generated scenes and in some scientific and engineering studies real ism is not a goal for example physical quantities are often displayed with pseudo colors or abstract shapes that change over tume to help the researcher un derstand the nature of the physical process  in general an animation sequence is designed with the following steps   storyboard layout  object definitions  key frame specifications  generation of in between frames this standard approach for animated cartoons is applied to other animation ap plications as well although there are many special applications that do not fol low this sequence real time computer animations produced by flight simulators for instance display motion sequences in response to settings on the aircraft con trols and visualization applications are generated by the solutions of the numer ical models for frame by frame animation each frame of the scene is separately generated and stored later the frames can be recorded on film or they can be consecutively displayed in real time playback mode  the storyboard is an outline of the action it defines the motion sequence as a set of basic events that are to take place depending on the type of animation to be produced the storyboard could consist of a set of rough sketches or it could be a list of the basic ideas for the motion  an object definition is given for each participant in the action objects can be defined in terms of basic shapes such as polygons or splines in addition the as sociated movements for each object are specified along with the shape  a key frame is a detailed drawing of the scene at a certain time in the anima tion sequence within each key frame each object is positioned according to the time for that frame some key frames are chosen at extreme positions in the ac tion others are spaced so that the time interval between key frames is not too great more key frames are specified for intricate motions than for simple slowly varing motions  in betweens are the intermediate frames between the key frames the num ber of in betweens needed is determined by the media to be used to display the animation film requires frames per second and graphics terminals are re freshed at the rate of to frames per second typically time intervals for the motion are set up so that there are from three to five in betweens for each pair of key frames depending on the speed specified for the motion some key frames can be duplicated for a minute film sequence with no duplication we would need frames with five in betweens for each pair of key frames we would need key frames if the motion is not too complicated we could space the key frames a little farther apart  there are several other tasks that may be required depending on the appli cation they include motion verification editing and production and synchro nization of a soundtrack many of the functions needed to produce general ani mations are now computer generated figures and show examples of computer generated frames for animation sequences   one frame from the award winning computer animated short film luxe jr the film was designed using a key frame animation system and cartoon animation techniques to provide lifelike actions of the lamps final images were rendered with multiple light sources and procedural texturing techniques  courtesy of pixar  pixar   section design of animation sequences   one frame from the short film tin toy the first computer animated film to win an oscar designed using a key frame animation system the film also required extensive facial expression modeling final images were rendered using procedural shading self shadowing techniques motion blur and texture mapping  courtesy of pixar  pixar    general computer animation functions some steps in the development of an animation sequence are well suited to com puter solution these include object manipulations and rendering camera mo tions and the generation of in betweens animation packages such as wave front for example provide special functions for designing the animation and processing individual objects  one function available in animation packages is provided to store and man age the object database object shapes and associated parameters are stored and updated in the database other object functions include those for motion genera tion and those for object rendering motions can be generated according to speci fied constraints using two dimensional or three dimensional transformations standard functions can then be applied to identify visible surfaces and apply the rendering algorithms  another typical function simulates camera movements standard motions are zooming panning and tilting finally given the specification for the key frames the in betweens can be automatically generated  on raster systems we can generate real time animation in limited applications using raster operations as we have seen in section a simple method for trans lation in the xy plane is to transfer a rectangluar block of pixel values from one location to another two dimensional rotations in multiples of are also simple to perform although we can rotate rectangular blocks of pixels through arbitrary angles using antialiasing procedures to rotate a block of pixels we need to de termine the percent of area coverage for those pixels that overlap the rotated block sequences of raster operations can be executed to produce real time ani mation of either two dimensional or three dimensional objects as long as we re strict the animation to motions in the projection plane then no viewing or visi ble surface algorithms need be invoked  we can also animate objects along two dimensional motion paths using the color table transformations here we predefine the object at successive positions along the motion path and set the successive blocks of pixel values to color table  real time raster color table animation  entries we set the pixels at the first position of the object to on values and we set the pixels at the other object positions to the background color the animation is then accomplished by changing the color table values so that the object is on at successively positions along the animation path as the preceding position is set to the background intensity     design and control of animation sequences are handled with a set of animation routines a general purpose language such as c lisp pascal or fortran is often used to program the animation functions but several specialized animation languages have been developed animation functions include a graphics editor a key frame generator an in between generator and standard graphics routines the graphics editor allows us to design and modify object shapes using spline surfaces constructive solid geometry methods or other representation schemes  a typical task in an animation specification is scene description this includes the positioning of objects and light sources defining the photometric parameters light source intensities and surface illumination properties  and setting the camera parameters position orientation and lens characteristics  another stan dard function is action specification this involves the layout of motion paths for the objects and camera and we need the usual graphics routines viewing and perspective transformations geometric transformations to generate cbject move ments as a function of accelerations or kinematic path specifications visible sur face identification and the surface rendering operations  key frame systems are specialized animation languages designed simply to generate the in betweens from the user specified key frames usually each ob ject in the scene is defined as a set of rigid bodies connected at the joints and with a limited number of degrees of freedom as an example the single arm robot in  has six degrees of freedom which are called arm sweep shoulder swivel elbow extension pitch yaw and roll we can extend the number of de grees of freedom for this robot arm to nine by allowing three dimensional trans lations for the base   if we also allow base rotations the robot arm can have a total of degrees of freedom the human body in comparison has over degrees of freedom  parameterized systems allow object motion characteristics to be specified as part of the object definitions the adjustable parameters control such object characteristics as degrees of freedom motion limitations and allowable shape changes  section computer animation languages chapter computer animation la   translational and rotational degrees of freedom for the base of the robot arm  elbow kon renin shoutder a  swivel   o yaw rn  roll pitch   degrees of freedom for a stationary single arm robot scripting systems allow object specifications and animation sequences to be defined with a user input serip  from the script a library of various objects and motions can be constructed   we generate each set of in betweens from the specification of two or more key frames motion paths can be given with a kinematic description as a set of spline curves or the motions can be physically tased by specifying the forces acting on the objects to be animated  for complex scenes we can separate the frames into individual components or objects called cefs celluloid transparencies  an acronym from cartoon anima tion given the animation paths we can interpolate the positions of individual objects between any two times  with complex object transformations the shapes of objects may change over time examples are clothes facial features magnified detail evolving shapes exploding or disintegrating objects and transforming one object into an other object if all surfaces are described with polygon meshes then the number of edges per polygon can change from one frame to the next thus the total num ber of line segments can be different in different frames  morphing transformation of object shapes from one form to another is called morphing which is a shortened torm of metamorphosis morphing methods can be applied to any motion or transition involving a change in shape  given two key frames for an object transformation we first adjust the object specification in one of the frames so that the number of polygon edges or the number of vertices is the same for the two frames this preprocessing step is il lustrated in  a straight line segment in key frame k is transformed into two line segments in key frame k  since key frame k   has an extra vertex we add a vertex between vertices and in key frame k to balance the number of vertices and edges in the two key frames using linear interpolation to generate the in betweens we transition the added vertex in key frame k into vertex along the straight line path shown in  an example of a triangle linearly expanding into a quadrilateral is given in  figures and 10 show examples of morphing in television advertising  v   key key frame k frame k   an edge with vertex positions and in key frame k evolves into two connected edges in key frame k     linear interpolation for transforming a line segment in key frame  into two connected line segments in key frame k   key frame k   linear interpolation for transforming a triangle into a quadrilateral  we can state general preprocessing rules for equalizing key frames in terms of either the number of edges or the number of vertices to be added to a key frame suppose we equalize the edge count and parameters l and l  denote the number of line segments in two consecutive frames we then define lina  max ly lea  linn  min ly ly   and n  las mod ll  n  ine   mun   transformation of an stp oil can into an engine block  courtesy of salicon graphres inc   b  eed tot   td   transtormation of a moving automobile into a running tiger  courtesy of exxon company usa arid pactfic data images  then the preprocessing is accomplished by  dividing n edges of keyframe   into n  sections dividing the remaining lines of keyframe   into n sections as an example if l  and l    we would divide lines of keyframe  into sections each the remaining lines of keyframe   are left intact  if we equalize the vertex count we can use parameters v and v  to de note the number of vertices in the two consecutive frames in this case we define vinax  max vye ver  vinin  min v  v   and nis  vinax  mod vann  venax  n  int t   min  preprocessing using vertex count is performed by  adding n points to n  line sections of keyframerun adding n  points to the remaining edges of keyframegin for the triangle to quadrilateral example v  and v    both n  and n  are so we would add one point to one edge of keyframe  no points would be added to the remaining lines of keyframe    simulating accelerations curve fitting techniques are often used to specify the animation paths between key frames given the vertex positions at the key frames we can fit the positions with linear or nonlinear paths  illustrates a nonlinear fit of key frame positions this determines the trajectories for the in betweens to simulate accel erations we can adjust the time spacing for the in betweens  for constant speed zero acceleration  we use equal interval time spacing for the in betweens suppose we want n in betweens for key frames at times and     the time interval between key frames is then divided into n  subintervals yielding an in between spacing of ho   al nel  we can calculate the time for any in between as fb f  jdt jf  4h  and determine the values for coordinate positions color and other physical para meters  nonzero accelerations are used to produce realistic displays of speed changes particularly at the beginning and end of a motion sequence we can model the start up and slow down portions of an animation path with spline or section key frame systems    fitting key frame vertex positions with nonlinear splines  trignometric functions parabolic and cubic time functions have been applied to acceleration modeling but trignometric functions are more commonly used in animation packages  to model increasing speed positive acceleration  we want the time spacing between frames to increase so that greater changes in position occur as the object moves faster we can obtain an increasing interval size with the function  cos6 o0 w for in betweens the time for the jth in between would then be calculated as   cos ft j  tby  ty  asf ss i    where af is the time difference between the two key frames  gives a plot of the trigonometric acceleration function and the in between spacing for  we can model decreasing speed deceleration with sin in the range    the time position of an in between is now defined as   jw tbe t  in j    ty  atsin  j n  i j j t j t a  y t  t at ty  in between positions for motion at constant speed  le   a trigonometric acceleration function and the corresponding in between spacing for n  and  ja in eq  producing increased coordinate changes as the object moves through each time interval  a plot of this function and the decreasing size of the time intervals is shown in  for five in betweens  often motions contain both speed ups and slow downs we can model a combination of increasing decreasing speed by first increasing the in between time spacing then we decrease this spacing a function to accomplish these time changes is   sind  t8 tb a         of 2345 i y t v z   a trigonometric deceleration function and the corresponding in between spacing for n  and  jr in eq  producing decreased coordinate changes as the object moves through each time interval   t  bs  a trigonometric accelerate decelerate function and the corresponding in between spacing for n  in eq   cos   the time for the jth in between is now calculated as 1bp  arf t coetintn  ny j    with af denoting the time difference for the two key frames time intervals for the moving object first increase then the time intervals decrease as shown in fig 15  processing the in betweens is simplified by initially modeling skeleton  wireframe objects this allows interactive adjustment of motion sequences after the animation sequence is completely defined objects can be fully ren dered  there are several ways in which the motions of objects can be specified in an ani mation system we can define motions in very explicit terms or we can use more abstract or more general approaches  direct motion specification the most straightforward method for defining a motion sequence is direct specifi cation of the motion parameters here we explicitly give the rotation angles and translation vectors then the geometric transformation matrices are applied to transform coordinate positions alternatively we could use an approximating  y          a  mf  po      i      s a og ro og t   i  t     roe oy re     ay ra    be oi  ow ay it  if    s vi e  or rene  u i ve rel eros t u  ys  g y vi ve   4  a yy x   approximating the motion of a bouncing ball with a damped sine function eq 10  equation to specify certain kinds of motions we can approximate the path of a bouncing ball for instance with a damped rectified sine curve    yax a isin ox   le  10 where a is the initial amplitude w is the angular frequence  is the phase angle  and k is the damping constant these methods can be used for simple user pro grammed animation sequences  cgoal directed systems at the opposite extreme we can specify the motions that are to take place in gen eral terms that abstractly describe the actions these systems are referred to as goal directed because they determine specific motion parameters given the goals of the animation for example we could specify that we want an object to walk or to run to a particular destination or we could state that we want an object to pick up some other specified object the input directives are then inter preted in terms of component motions that will accomplish the selected task  human motions for instance can be defined as a hierarchical structure of sub motions for the torso limbs and so forth  kinematics and dynamics we can also construct animation sequences using kinematic or dynamic descrip tions with a kinematic description we specify the animation by giving motion parameters position velocity and acceleration without reference to the forces that cause the motion for constant velocity zero acceleration  we designate the motions of rigid bodies in a scene by giv ng an initial position and velocity vector  chapter computer animation for each object as an example if a velocity is specified as   km sec then this vector gives the direction for the straight line motion path and the speed magnitude of velocity is km sec if we also specify accelerations rate of change of velocity  we can generate speed ups slow downs and curved motion paths kinematic specification of a motion can also be given by simply describing the motion path this is often done using spline curves  an alternate approach is to use inverse kinematics here we specify the ini tial and final positions of objects at specified times and the motion parameters are computed by the system for example assuming zero accelerations we can de termine the constant velocity that will accomplish the movement of an object fom the initial position to the final position this method is often used with com plex objects by giving the positions and orientations of an end node of an object such as a hand or a foot the system then determines the motion parameters of other nodes to accomplish the desired motion  dynamic descriptions on the other hand require the specification of the forces that produce the velocities and accelerations descriptions of object behav ior under the irfluence of forces are generally referred to as a physically based modeling chapter  examples of forces affecting object motion include electro magnetic gravitational friction and other mechanical forces  object motions are obtained from the force equations describing physical laws such as newton s laws of motion for gravitational and friction processes euler or navier stokes equations describing fluid flow and maxwell s equations for electromagnetic forces for example the general form of newton s second law for a particle of mass m1 is d  f au 11 with f as the force vector and v as the velocity vector if mass is constant we solve the equation f  ma where a is the acceleration vector otherwise mass is a function of time as in relativistic motions or the motions of space vehicles that consume measurable amounts of fuel per unit time we can also use inverse dy namics to obtain the forces given the initial and final positions of objects and the type of motion  applications of physically based modeling include complex rigid body sys tems and such nonrigid systems as cloth and plastic materials typically numeri cal methods are used to obtain the motion parameters incrementally from the dy namical equations using initial conditions or boundary values  summary a computer animation sequence can be set up by specifying the storyboard the object definitions and the key frames the storyboard is an outline of the action and the key frames define the details of the object motions for selected positions in the animation once the key frames have been established a sequence of in be tweens can be generated to construct a smooth motion from one key frame to the next a computer animation can involve motion specifications for the objects in a scene as well as motion paths for a camera that moves through the scene com puter animation systems include key frame systems parameterized systems and scripting systems for motion in two dimensions we can use the raster anima tion techniques discussed in chapter for some applications key frames are used to detine the steps in a morph ing sequence that changes one object shape into another other in between meth ods include generation of variable time intervals to simulate accelerations and decelerations in the motion  motion specifications can be given in terms of translation and rotation para meters or motions can be described with equations or with kinematic or dy namic parameters kinematic motion descriptions specify positions velocities and accelerations dynamic motion descriptions are given in terms of the forces acting on the objects in a scene  references for additional information on computer animation systems and techniques see magnenat thalmann and thalmann  barzel  and watt and wait  algorithms for animation applications are presented in glassner  arvo  kirk  gas cuel  ngo and marks  van de panne and fiume  and in snyder et al  morphing techniques are discussed in beier and neely  hughes  kent carlson and parent  and in sederberg and greenwood  a discussion of animation techniques in phigs is given in gaskins   exercises  design a storyboard layout and accompanving key trames for an animation of a sin gle polyhedron  write a program to generate the in betweens for the key frames specified in exercise using linear interpolation  expand the animation sequence in exercise to include two or more moving ob jects  write a program to generate the in betweens jor the key frames in exercise using linear in erpolation  write a morphing program to transform a sphere into a specilied polyhedron  sel up an animation specification invalving accelerations and implement eq   sel up an animation specification involving both accelerations and decelerations and implement the in between spacing calculations given in eqs and set up an animation specification implementing the acceleration deceleration calcu latians of eq   write a program to simulate the linear two dimensional motion of a filled circle inside a given rectangular area the circle is to be given an initial velocity and the circle is to rebound from the walls with the angle of reflection equal to the angle of incidence  10 convert the program of exercise into a ball and paddle game by replacing one side of the rectangle with a short line segment that can be moved back and forth to intercept the circle path the game is over when the circle escapes from the interior of the rectangle initial input parameters include circle position direction and speed the game score can include the number of times the circle is intercepted by the pad dle  11 expand the program of exercise to simulate the three dimensional motion of a sphere moving inside a parallelepiped interactive viewing parameters can be set to view the motion from different directions  12 write a program to implement the simulation of a bouncing ball using eq 10  13 write a program to implement the motion of a bouncing bail using a downward  exercises chapter computer animation 14  15  zravitational force and a ground plane friction force initially the ball is to be pro jected into space with a given velocity vector  write a program to implement the two player pillbox game the game can be imple mented on a flat plane with fixed pillbox positions or random terrain features and pillbox placements can be generated at the start of the game  write a program to implement dynamic motion specifications specify a scene with two or more objects initial motion parameters and specified forces then generate the animation from the solution of the force equations  for example the objects could be the earth moon and sun with attractive gravitational forces that are propor tional mass and inversely proportional to distance squared  appendix mathematics for computer graphics        omputer graphics algorithms make use of many mathematica concepts and techniques here we provide a brief reference for the topics from ana lytic geometry linear algebra vector analysis tensor analysis complex numbers numerical analysis and other areas that are referred to in the graphics algorithms discussed throughout this book  a coordinate reference frames graphics packages typically require that coordinate parameters be specified with respect to cartesian reference frames but in many applications non cartesian coordinate systems are useful spherical cylindrical or other symmetries often can be exploited to simplify expressions involving object descriptions or manipu lations unless a specialized graphics system is available however we must first convert any non cartesian descriptions to cartesian coordinates in this section we first review standard cartesian coordinate systems then we consider a few common non cartesian systems  two dimensional cartesian reference frames figure a shows two possible orientations for a cartesian screen reference sys tem the standard coordinate orientation shown in fig a a  with the coordi nate origin in the lower left corner of the screen is a commonly used reference figure a screen cartesian reference systems  a coordinate origin at the lower left screen corner and b coordinate origin in the upper left corner figure a a polar coardinate reference frame formed with concentric circles and radial lines  figure a relationship between polar and cartesian coordinates  frame some systems particularly personal computers orient the cartesian refer ence frame as in fig a b  with the origin at the upper left corner in addition it is possible in some graphics packages to select a position such as the center of the screen for the coordinate origin  polar coordinates in the xy plane a frequently used non cartesian system is a polar coordinate reference frame fig a  where a coordinate position is specified with a radial distance r from the coordinate origin and an angular displacement from the horizontal posi tive angular displacements are counterclockwise and negative angular displace ments are clockwise angle can be measured in degrees with one complete counterclockwise revolution about the origin as  the relation between carte sian and polar coordinates is shown in fig a considering the right triangle in fig a and using the definition of the trigonometric functions we transform from polar coordinates to cartesian coordinates with the expressions x rcos  y rsind a  the inverse transfarmation from cartesian to polar coordinates is r very tan   a x other conics besides circles can be used to specify coordinate positions for example using concentric ellipses instead of circles we can give coordinate positions in elliptical coordinates similarly other types of symmetries can be ex ploited with hyperbolic or parabolic plane coordinates  section a coordinate reference frames o figure a right triangle with hypotenuse r and sides x and y  appendix a  figure a an angle  subtended by a circular arc of length s and radius r  angular values can be specified in degrees or they can be given in dimen sionless units radians  figure a shows two intersecting lines in a plane and a circle centered on the intersection point p the value cf angle in radians is then given by ia  a  where s is the length of the circular arc subtending and r is the radius of the cir cle total angular distance around point p is the length of the circle perimeter 2a divided by r or radians  three dimensianal cartesian reference frames figure a a shows the conventional orientation for the coordinate axes in a three dimensional cartesian reference system this is called a right handed sys tem because the right hand thumb points in the positive z direction when we imagine grasping the z axis with the fingers curling from the positive x axis to the positive y axis through  as illustrated in fig a b  most computer graph ics packages require object descriptions and manipulations to be specified in right handed cartesian coordinates for discussions throughout this book in cluding the appendix  we assume that all cartesian reference frames are right handed  another possible arrangement of cartesian axes is the left handed system shown in fig a for this system the left hand thumb points in the positive z direction when we imagine grasping the z axis so that the fingers of the left hand curl from the positive x axis to the positive y axis through  this orientation of axes is sometimes convenient for describing depth of objects relative to a display screen if screen locations are described in the xy plane of a left handed system with the coordinate origin in the lower left screen comer positive z values indi cate positions behind the screen as in fig a a  larger values along the posi tive z axis are then interpreted as being farther from the viewer  three dimensional curvilinear coordinate systems any non cartesian reference frame is referred to as a curvilinear coordinate sys tem the choice of coordinate system for a particular graphics application de pends on a number of factors such as symmetry ease of computation and visu  y axis y axis a ate a on ed i     see zaxis  x axis axis x axis  figure a b coordinate representation of a point p at position x y z in a right handed cartesian reference system  a  b  figure a left handed cartesian coordinate system superimposed on the surface af a video monitor  figure a a general curvilinear coordinate reference frame  alization advantages figure a shows a general curvilinear coordinate reference frame formed with three coordinate surfaces where each surface has one coordi nate held constant for instance the x x surface is defined with x held constant coordinate axes in any reference frame are the intersection curves of the coordi nate surfaces if the coordinate surfaces intersect at right angles we have an or thogonal curvilinear coordinate system nonorthogonal reference frames are useful for specialized spaces such as visualizations of motions governed by the laws of general relativity but in general they are used less frequently in graphics applications than orthogonal systems  a cylindrical coordinate specification of a spatial position is shown in fig a in relation to a cartesian reference frame the surface of constant pis a vertical zz axis  ply   z  i    y axis figure a  x axis cylindrical coordinates p  z  section a coordinate reference frames  appendix a figure a spherical coordinates r    cylinder the surface of constant is a vertical plane containing the z axis and the surface of constant z is a horizontal plane parallel to the cartesian xy plane we transform from a cylindrical coordinate specification to a cartesian reference frame with the calculations x  pcos  y psin  z z a  figure a shows a spherical coordinate specification of a spatial position in reference to a cartesian reference frame spherical coordinates are sometimes re ferred to as polar coordinates in space the surface of constant r is a sphere the sur face of constant  is a vertical plane containing the z axis same  surface as in cylindrical coordinates  and the surface of constant  is a cone with apex at the coordinate origin if    the cone is above the xy plane if    the cone is below the xy plane we transfrom from a spherical coordinate specification to a cartesian reference frame with the calculations x  rcos sing y rsin sing z rcosd a  solid angle we define a solid angle in analogy with that for a two dimensional angle  be tween two intersecting lines eq a  instead of a circle we consider any sphere with center position p the solid angle w within a cone shaped region with apex at p is defined as w  a  where a is the area of the spherical surface intersected by the cone fig a  and r is the radius of the sphere  also in analogy with two dimensional polar coordinates the dimension less unit for solid angles is called the steradian the total solid angle about a point is the total area of the spherical surface  divided by r or steradians figure a a solid angle w subtended by a spherical surface patch of area a with radius r  a points and vectors there is a fundamental difference between the concept of a point and that of a vector a point is a position specified with coordinate values in some reference frame so that the distance from the origin depends on the choice of refer ence frame figure a illustrates coordinate specification in two reference frames in frame a point coordinates are given by the values of the ordered pair x y  in frame b the same point has coordinates  and the distance to the ori gin of frame b is  a vector on the other hand is defined as the difference between two point positions thus for a two dimensional vector fig a  we have v p p   x      a   v  v  where the cartesian components or cartesian elements v and v are the projec tions of v onto the x and y axes given two point positions we can obtain vector components in the same way for any coordinate reference frame  we can describe a vector as a directed line segment that has two fundamental properties magnitude and direction for the two dimensional vector in fig a  we calculate vector magnitude using the pythagorean theorem  o frame b oo x frame a  figure a position of point p with respect to two different cartesian reference frames  section a points and vectors appendix a  figure a direction angles a  and y  figure a a gravitational force vector f and a velocity vector v  ys  figure a vector v in the ay plane of a cartesian reference frame  lvl  v v2 a  the direction for this two dimensional vector can be given in terms of the angu lar displacement from the x axis as a tan   a  x a vector has the same properties magnitude and direction no matter where we position the vector within a single coordinate system and the vector magnitude is independent of the coordinate representation of course if we change the coor dinate representation the values for the vector components change  for a three dimensiunal cartesian space we calculate the vector magnitude as lvl vvi i v2 a  vector direction is given with the direction angles a b and y that the vector makes with each of the coordinate axes fig a  direction angles are the posi tive angles that the vector makes with each of the positive coordinate axes we calculate these angles as vv lv  v l cosb  ti cosy  vl a 1d  cosa   the values cosa cos8 and cosy are called the direction cosines of the vector actu ally we only need to specify two of the direction cosines to give the direction of v since cos a  cos b cos y  a vectors are used to represent any quantities that have the properties of magnitude and direction two common examples are force and velocity fig a  a force can be thought of as a push or a pull of a certain amount ina par   figure a two vectors a can be added geometrically by positioning the two vectors end to end b and drawing the resultant vector from the start of the first vector to the tip of the second vector  ticular direction a velocity vector specifies how fast speed an object is moving in a certain direction  vector addition and scalar multiplication by definition the sum of two vectors is obtained by adding corresponding com ponents  vit va  way  van vi  vag vis  vin  13  vector addition is illustrated geometrically in fig a we obtain the vector sum by placing the start position of one vector at the tip of the other vector and draw ing the summation vector as in fig a  addition of vectors and scalars is undefined since a scalar always has only one numerical value while a vector has mt numerical components in an n dimen sional space scalar multiplication of a three dimensional vector is defined as av  av av  av  a  for example if the scalar parameter a has the value each component of v is doubled  we can also multiply two vectors but there are two possible ways to do this the multiplication can be carried out so that either we obtain another vector or we obtain a scalar quantity  scalar product of two vectors vector multiplication for producing a scalar is defined as v vi vil valcos os 15  where  is the angle between the two vectors fig a  this product is called the scalar product or dot product of two vectors it is also referred to as the inner product particularly in discussing scalar products in tensor analysis equa tion a is valid in any coordinate representation and can be interpreted as the product of parallel components of the two vectors  section a points and vectors  wane  figure a the dot product of two vectors is obtained by multiplying parallel components  appendix a  in addition to the coordinate independent form of the scalar product we can express this product in specific coordinate representations for a cartesian reference frame the scalar product is calculated as vi v2  visvag  viyvoy  viva a  the dot product of a vector with itself is simply another statement of the pythagorean theorem also the scalar product of two vectors is zero if and only if the two vectors are perpendicular orthogonal  dot products are commutative v v2 vv  a  because this operation produces a scalar and dot products are distributive with respect to vector addition v  v2  v3  vy v2  vy v3 a  vector product of two vectors multiplication of two vectors to produce another vector is defined as v xv ulvv  v sing o50 sa 19  where u is a unit vector magnitude that is perpendicular to both v and v  fig a  the direction for u is determined by the right hand rule we grasp an axis that is perpendicular to the plane of v and v so that the fingers of the right hand curl from v to v  our right thumb then points in the direction of u this product is called the vector product or cross product of two vectors and equa tion a is valid in any coordinate representation the cross product of two vec tors is a vector that is perpendicular to the plane of the two vectors and with magnitude equal to the area of the parallelogram formed by the two vectors  we can also express the cross product in terms of vector components in a specific reference frame in a cartesian coordinate system we calculate the com ponents of the cross product as vy x va  viyvaz  virvoye vievax  visvoe virvay  viyw2   20  if we let u  u  and u represent unit vectors magnitude along the x y and z axes we can write the cross product in terms of cartesian components using de terminant notation  vix me figure a the cross product of two vectors is a vector in a direction perpendicular to the two orginal vectors and with a magnitude equal to the area of the shaded parallelogram  u uu vixv  vi vy ve a vx vy va the cross product of any two parallel vectors is zero therefore the cross product of a vector with itself is zero also the cross product is not commutative it is anticommutative  v x v   v x v  a  and the cross product is not associative v xx vy x va  v xv x vy a but the cross product is distributive with respect to vector addition that is  vy x v2  va   cv x v2   v1 v3  a  a basis vectors and the metric tensor we can specify the coordinate axes in any reference frame with a set of vectors one for each axis fig a  each coordinate axis vector gives the direction of that axis at any point along the axis these vectors form a linearly independent set of vectors that is the axis vectors cannot be written as linear combinations of each other also any other vector in that space can be written as a linear combi nation of the axis vectors and the set of axis vectors is called a basis or a set of base vectors for the space in general the space is referred to as a vector space and the basis contains the minimum number of vectors to represent any other vector in the space as a linear combination of the base vectors  orthonormal basis often vectors in a basis are normalized so that each vector has a magnitude of in this case the set of unit vectors is called a normal basis also for cartesian reference frames and other commonly used coordinate systems the coordinate axes are mutually perpendicular and the set of base vectors is referred to as an orthogonal basis if in addition the base vectors are all unit vectors we have an orthonormal basis that satisfies the following conditions  uu  for allk u u   for all  k a most commonly used reference frames are orthogonal but nonorthogonal coor dinate reference frames are useful in some applications including relativity the  ory and visualization of certain data sets for a two dimensional cartesian system the orthonormal basis is section a basis vectors and the metric tensor figure a my curvilinear coordinate axis vectors  appendix a u    uy    a and the orthonormal basis for a three dimensional cartesian reference frame is u  uy    a    a  metric tensor tensors are generalizations of the notion of a vector specifically a tensor is a quantity having a number of components depending on the tensor rank and the dimension of the space that satisfy certain transformation properties when con verted from one coordinate representation to another for orthogonal systems the transformation properties are straightforward formally a vector is a tensor of rank one and a scalar is a tensor of rank zero another way to view this classi fication is to note that the components of a vector are specified with one sub script while a scalar always has a single value and hence no subscripts a ten sor of rank two thus has two subscripts and in three dimensional space a tensor of rank two has nine components three values for each subscript  for any general curvilinear coordinate system the elements or coeffi cients of the metric tensor for that space are defined as sa  uys a thus the metric tensor is of rank two and it is symmetric    metric tensors have several useful properties the elements of a metric tensor can be used to de termine  distance between two points in that space  transformation equa tions for conversion to another space and  components of various differential vector operators such as gradient divergence and curl within that space in an orthogonal space  x  for j k a and in a cartesian coordinate system assuming unit base vectors   ifj k      otherwise 50  the unit base vectors in polar coordinates can be expressed in terms of cartesian base vectors as u  u cos  uysing up  u rsin  u rcos  a  substituting these expressions into eq a we obtain the elements of the metric tensor which can be written in the matrix form  flo blo  a  for a cylindrical coordinate reference frame the base vectors are u  u cos  u sind uy  u psin  u pcos  u  a and the matrix representation for the metric tensor in cylindrical coordinates is g  p a  we can write the base vectors in spherical coordinates as u  u cos sing  u sin sing  u cosd u   u rsinosing  uyrcos sind ug  urcos cosd  uyrsin cos  u rsind a  then the matrix representation for the metric tensor in spherical coordinates is  b fsin d a oo ff a matrices a matrix is a rectangular array of quantities numbers functions or numerical expressions  called the elements of the matrix some examples of matrices are x 60 01 00 ee x _  00 eh le 3h a a2 ay  y  a  we identify matrices according to the number of rows and number of columns for these examples the matrices in left to right order are by by by and by when the number of rows is the same as the number of columns as in the second example the matrix is called a square matrix  in general we can write an m by n matrix as ay ay sae ay my aq ay  a     a am amr ann where the a represent the elements of matrix a the first subscript of any ele ment gives the row number and the second subscript gives the column number  a matrix with a single row or a single column represents a vector thus the last two matrix examples in a are respectively a row vector and a column vec tor in general a matrix can be viewed as a collection of row vectors or as a col lection of column vectors  when various operations are expressed in matrix form the standard mathe matical convention is to represent a vector with a column matrix following this convention we write the matrix representation for a three dimensional vector in section a matrices appendix a  cartesian coordinates as vy ve v a vv  we will use this matrix representation for both points and vectors but we must keep in mind the distinction between them it is often convenient to consider a point as a vector with start position at the coordinate origin within a single coor dinate reference frame but points do not have the properties of vectors that re main invariant when switching from one coordinate system to another also in general we cannot apply vector operations such as vector addition dot product and cross product to points  sealar multiplication and matrix addition to multiply a matrix a by a scalar value s we multiply each element a by the scalar as an example if a  then 3a   is matrix addition is defined only for matrices that have the same number of rows m and the same number of columns for any two m by n matrices the sum is obtained by adding corresponding elements for example   15 val  35   61 matrix multiplication the product of two matrices is defined as a generalization of the vector dot prod uct we can multiply an m by n matrix a by a p by q matrix b to form the matrix product ab providing that the number of columns in a is equal to the number of rows in b ie   p  we then obtain the product matrix by forming sums of the products of the elements in the row vectors of a with the corresponding ele ments in the column vectors of b thus for the following product c ab a we obtain an m by q matrix c whose elements are calculated as mn cy   abe  a kel in the following example a by matrix is postmultiplied by a by ma trix to produce a by product matrix qo i1     alk l 3 4  38  14  22 vector multiplication in matrix notation produces the same result as the dot product providing the first vector is expressed as a row vector and the second vector is expressed as a column vector      this vector product results in a matrix with a single element a by matrix  if we multiply the vectors in reverse order we obtain a by matrix  12 j223  10 12 as the previous two vector products illustrate matrix multiplication in general is not commutative that is  abba a but matrix multiplication is distributive with respect to matrix addition a b  c  ab  ac a  matrix transpose the transpose a of a matrix is obtained by interchanging rows and columns for example  a t i    abcjff  a  c for a matrix product the transpose is  ab   btat a  determinant of a matrix for a square matrix we can combine the matrix elements to produce a single number called the determinant determinants are defined recursively for a by matrix the second order determinant is defined to be fu  999  ay707  a   ay an section a matrices  appendix a we then calculate higher order determinants in terms of lower order determi nants to calculate the determinants of order or greater we can select any col umn k of ann by n matrix and compute the determinant as deta     ay detay a  pl where deta is the n by n  determinant of the submatrix obtained from a by deleting the jth row and the kth column alternatively we can select any row j and calculate the determinant as n deta   ay detay a kel calculating determinants for large matrices n  say can be done more efficiently using numerical methods one way to compute a determinant is to de compose the matrix into two factors a  lu where all elements of matrix l that are above the diagonal are zero and all elements of matrix u that are below the diagonal are zero we then compute the product of the diagonals for both l and u and we obtain deta by multiplying these two products together this method is based on the following property of determinants  det ab   deta det b  a  another method for calculating determinants is based on gaussian elimination procedures section a  matrix inverse with square matrices we can obtain an inverse matrix if and only if the determi nant of the matrix is nonzero lf an inverse exists the matrix is said to be a non singular matrix otherwise the matrix is called a singular matrix for most prac tical applications where a matrix represents a physical operation we can expect the inverse to exist  the inverse of ann by n square matrix a is denoted as a  and aa a a i1 a  where is the identiy matrix all diagonal elements of i have the value and all other off diagonal elements are zero  elements for the inverse matrix a  can be calculated from the elements of aas     det a   a4   a5q a where aq is the element in the jth row and kth column of a  and a is the n  by n  submatrix obtained by deleting the kth row and jth column of matrix a again numerical methods can be used to evaluate the determinant and the elements of the inverse matrix for large values of n a complex numbers by definition a complex number z is an ordered pair of real numbers z  x y  a  where x is called the real part of z and y is called the imaginary part of z real and imaginary parts of a complex number are designated as x re z  y im  a geometrically a complex number is represented in the complex plane as in fig te complex numbers arise from solutions of equations such as e  r 2r which have no real number solutions thus complex numbers and complex arithmetic are set up as extensions of real numbers that provide solutions to such equations  addition subtraction and scalar multiplication of complex numbers are carried out using the same rules as for two dimensional vectors multiplication of complex numbers is defined as  xp ye yo  oyt2  wie hy2  xy  a  this definition for complex numbers gives the same result as for real number multiplication when the imaginary parts are zero   o  rg   xyx2  thus we can write a real number in complex form as x  x  similarly a pure imaginary number has a real part equal to  y  the complex number  is called the imaginary unit and it is denoted by t   a  imaginary axis figure a position of a point z in the complex reataxis plane  section a complex numbers  appendix a electrical engineers often use the symbol j for the imaginary unit because the symbol i is used to represent electrical current from the rule for complex multi plication we have        therefore  is the real number  and i v a  using the mule for complex multiplication we can write any pure imaginary number in the form iy    y    y also by the addition nile we can write any complex number as the sum z   oy therefore another representation for a complex number is zextiy a  which is the usual form used in practical applications another concept associated with a complex number is the complex conjugate  zox y a modulus or absolute value of a complex number is defined to be jzl ve  a  which gives the length of the vector representing the complex number i e  the distance from the origin of the complex plane to point z  real and imaginary parts for the division of two complex numbers is obtained as _ he  x yi   yo xb  yf  a     yy2 x2y1  ae  2ay2  y wd b  a particularly useful representation for complex numbers is to express the tea and imaginary parts in terms of polar coordinates fig a  z r cos  isin  a imaginary y axis  figure a polar coordinate position of a reslxaxis complex number z  we can also write the polar form of z as  res 62 where  is the base of the natural logarithms e  718281828   and  cos  isin  a  which is euler s formula complex multiplications and divisions are easily ob tained as byhq  reat    and the nth reots of a complex number are calculated as   vi vilcos  zar  isin  aryl k   n a64  n  the roots lie on a circle of radius with center at the origin of the complex plane and form the vertices of a regular polygon with n sides  a quaternions complex number concepts are extended to higher dimensions with quaternions which are numbers with one real part and three imaginary parts written as g st iatjb ke a where the coefficients a b and c in the imaginary terms are rea numbers and pa rameter s is a real number called the scalar part parameters i j k are defined with the properties p pp r  ij ji k a  from these properties it follows that jka kj i  ki ik j 67  section a quaternions  appendix a scalar multiplication is defined in analogy with the corresponding opera tions for vectors and complex numbers that is each of the four components of the quaternion is multiplied by the scalar value similarly quaternion addition is defined as   gz  ss  sp  fa  ay  f b    key  cy  a multiplication of two quaternions is carried out using the operations in eqs a and a  an ordered pair notation for a quaternion is also formed in analogy with complex number notation  q  s v  a  where v is the vector  b c  in this notauon quaternion addition is expressed as  g2    v  vy  a  quaternion multiplication can then be expressed in terms of vector dot and cross products as   s15  vy  v2  1v_  sv  vx vo  a  as an extension of complex operations the magnitude squared of a quater nion is defined using the vector dot product as iqit sttvey a and the inverse of a quaternion is qi tare y  a  so that qq  q q   a nonparametric represen tations when we write object descriptions directly in terms of the coordinates of the ref  erence frame in use the respresentation is called nonparametric for example we can represent a surface with either of the following cartesian functions  fix y z   or z fix y  a  the first form in a gives an implicil expression for the surface and the second form gives an explicit representation with x and y as the independent variables and with z as the dependent variable similarly we can represent a three dimensional curved line in nonparamet ric form as the intersection of two surface functions or we could represent the curve with the pair of functions y flx z g x  a  where coordinate x is selected as the independent variable values for the depen dent variables y and z are then determined from eqs a as we step through values for x from one line endpoint to the other endpoint  nonparametric representations are useful in describing objects within a given reference frame but they have some disadvantages when used in graphics algorithms if we want a smooth plot we must change the independent variable whenever the first derivative slope of either f x or g x becomes greater than this means that we must continually check values of the derivatives which may become infinite at some points also eqs a provide an awkward format for representing multiple valued functions for instance the implicit equation of a circle centered on the origin in the xy plane is yor  p and the explicit expression for y is the multivalued function y svaa x in general a more convenient representation for object descriptions in graphics algorithms is in terms of parametric equations  a parametric representations euclidean curves are one dimensional objects and positions along the path of a three dimensional curve can be described with a single parameter u that is we can express each of the three cartesian coordinates in terms of parameter yu and any point on the curve can then be represented with the following vector point function relative to a particular cartesian reference frame  pq   x u  y u  u  a often the coordinate equations can be set up so that parameter u is defined over the unit interval from to for example a circle in the xy plane with center at the coordinate origin could be defined in parametric form as x u  rcos  y u  rsin  zlu   o usl 77  other parametric forms are also possible for describing circles and circular arcs curved or plane euclidean surfaces are two dimensional objects and po sitions on a surface can be described with two parameters u and v a coordinate position on the surface is then represented with the parametric vector function p x   x u v  yu v  z u v  a  section a parametric representations appendix a   figure a section of a spherical surface described by lines of constant u and lines of constant v in eqs a  where the cartesian coordinate values for x y and z are expressed as functions of parameters u and v as with curves it is often possible to arrange the parametric descriptions so that parameters u and v are defined over the range from0 to a spherical surface with center at the coordinate origin for example can be de scribed with the equations x u v  rsin au cos 10  y u v  r sin ans sin  u  rcos mu  a where r is the radius of the sphere parameter u describes lines of constant lati tude over the surface and parameter v describes lines of constant longitude by keeping one of these parameters fixed while varying the other over a subinterval of the range from to we could plot latitude and longitude lines for any spher ical section fig a  a numerical methods in computer graphics algorithms it is often necessary to solve sets of linear equa tions nonlinear equations integral equations and other functional forms also to visualize a discrete set of data points it may be useful to display a continuous curve or surface function that approximates the points of the data set in this sec tion we briefly summarize some common algorithms for solving various numer ical problems  solving sets of linear equations for variables x k     we can write a system of n linear equations as ax  app  f ayyxy  by ay xy  aygk     ay x  by yy xy  aygxz    aan xy  b  a  where the values for parameters a and b are known this set of equations can be expressed in the matrix form  ax b a with a as an n by m square matrix whose elements are the coefficients aj x as the column matrix of x values and b as the column matrix of b values the solution for the set of simultaneous linear equation can be expressed in matrix form as x a b a  which depends on the inverse of the coefficient matrix a thus the system of equations can be solved if and only if a is a nonsingular matrix that is its deter minant is nonzero one method for solving the set of equations is cramer s rule   det a k deta  a  where a is the matrix a with the kth column replaced with the elements of b this method 1s adequate for problems with a few variables for more than three or four variables the method is extremely inetficient due to the large number of multiplications needed to evaluate each determinant evaluation of a single n by n determinant requires more that n multiplications  we can solve the system of equations more efficiently using variations of gaussian elimination the basic ideas in gaussian elimination can be illustrated with the following set of two simultaneous equations x  2x   a 3x  4x  to solve this set of equations we can multiply the first equation by  then we add the two equations to elimunate the x term yielding the equation 2x   which has the solution x   this value can then be substituted into either of the original equations to obtain the solution for x  which is efficient algo tithms have been devised to carry out the elimination and back substitution steps  gaussian elimination is sometimes susceptable to high roundoff errors and it may not be possible to obtain an accurate solution in those cases we may be able to obtain a solution using the gauss seidel method we start with an initial guess for the values of variables x  then we repeatedly calculate successive ap proximations until the difference between successive values is small  at each iteration we calculate the approximate values for the variables as _ by  yax  ay3    minkn x ay by  oy ky  bx  oak  nx   xp el a  my if we can rearrange matrix a so that each diagonal element has a magnitude greater than the sum of the magnitudes of the other elements acrass that row than the gauss seidel method is guaranteed to converge to a solution  finding roots of nonlinear equations a root of a function f x is a value for x that satisfies the equation f x   one of the most popular methods for finding roots of nonlinear equations is the new ton raphson algorithm this algorithm is an iterative procedure that approximates a function f x with a straight line at each step of the iteration as shown in fig a we start with an initial guess x for the value of the root then we calcu  section a numerical methods  tangent line figure a approximating a curve at an initial value xq with a straight line that is tangent to the curve at that point  late the next approximation to the root as x by determining where the tangent line from xp crosses the x axis at xg the slope first derivative of the curve is  d  af _ feo a dx  xxq xy thus the next approximation to the root is x  xp  xo  a oo fo f  we repeat this procedure at each calculated approximation until the difference between successive approximations is small enough  if the newton raphson algorithm converges to a root it will converge faster than any other root finding method but it may not always converge for example the method fails if the derivative f x is at some point in the iteration also depending on the oscillations of the curve successive approximation may diverge from the position of a root the newton raphson algorithm can be ap plied to a function of a complex variable f z  and to sets of simultaneous nonlin ear functions real or complex  another method slower but guaranteed to converge is the bisection method here we need to first determine an x interval that contains a root then we apply a binary search procedure to close in on the root we first look at the midpoint of the interval to determine whether the root is in the lower or upper half of the in terval this procedure is repeated for each successive subinterval until the differ ence between successive midpoint positions is smaller than some preset value a speedup can be attained by interpolating successive x positions instead of halv ing each subinterval false position method  evaluating integrals  integration is a summation process for a function of a single variable x the inte gral of f x is the area under the curve as illustrated in fig a an integral of fix can be numerically approximated with the following summation a  food  feooda  a b k where f x is an approximation to f x over the interval ax  for example we can approximate the curve with a constant value in each subinterval and add the areas of the resulting rectangles fig a  the smaller the subdivisions for the interval fram a to b the better the approximation up to a point  actually if section a numerical methods figure a the integral of f x is equal ta the amount of area between the function and the x axis over the interval froma to b      f x  j xg a xy vas x  figure a approximating an integral as the sum of the areas of small rectangles  the intervals get too small the values of successive rectangular areas can get lost in the roundoff error  polynomial approximations for the function in each subinterval generally give better results than the rectangle approach using a linear approximation we obtain subareas that are trapezoids and the approximation methad is then re ferred to as the trapezoid rule lf we use a quadratic polynomial parabola to ap proximate the function in each subinterval the method is called simpson s rule and the integral approximation is  b ax n n  faddx   aa  fb   fly   fx  a  a oddk evenk where the interval from a to bis divided into n equal width intervals  b a ax  a n where n is a multiple of and with xo a xy  xo  ax k   n for functions with high frequency oscillations fig a  the approxima tion methods previously discussed may not give accurate results also multiple integrals involving several integration variables are difficult to solve with simp  fix  figure a _ _ a function with high frequency a b x  oscillations  son s rule or the other approximation methods in these cases we can apply monte carlo integration techniques the term monte carlo is applied to any method that uses random numbers to solve deterministic problems  we apply a monte carlo method to evaluate the integral of a function such as the one shown in fig a by generating n random positions in a rectangular area that contains f x over the interval from a to b fig a  an approximation for the integral is then calculated as b  fade  ho  a  sou a  where parameter noun the count of the number of random points that are be tween f x and the x axis a random position x y in the rectangular region is computed by first generating two random numbers r and and then carrying out the calculations  vinx  yin x a r b a  y  ymin  72h a  similar methods can be applied to multiple integrals  random numbers r and r are uniformly distributed over the interval   we can obtain random numbers from a randam number function in a high level language or from a statistical package or we can use the following algorithm called the linear congruential generator  i  aiy   e modm  k   ik a  m  ef where parameters a c m and ig are integers and ig is a starting value called the seed parameter m is chosen to be as large as possible on a particular machine with values for a and c chosen to make the string of random numbers as long as possible before a value is repeated for example on a machine with bit integer representations we can set m    and    toy    yonex a olxyl b figure a a rectangular area enclosing a yeni function f x over the interval   b  fitting curves to data sets section a waa    numerical methods a standard method for fitting a function linear or nonlinear to a set of data points is the least squares algorithm for a two dimensional set of data points yy yd k    we first select a functional form f x  which could be a straight line function a polynomial function or some other curve shape we then determine the differences deviations between f x and the y values at each x and compute the sum of deviations squared  e sly  fool a k parameters in the function f x are determined by minimizing the expression for e for example for the linear function fx  ag  yx parameters ap and a are assigned values that minimize e we determine the val ues for a and a by solving the two simultaneous linear equations that result from the minimization requirements that is e will be minimum if the partial de rivative with respect to a is and the partial derivative with respect to a is  0e de     ay 0a  similar calculations are carried out for other functions for the polynomial fi  a9  a x t agx     a x we need to solve a set of n linear equations to determine valves for parameters  and we can also apply least squares fitting to functions of several variables f xy xz   x  that can be linear or nonlinear in each of the variables   bibliography  akeley k and t jermoluk   high performance polygon rendering  in proceedings of siggraph  computer graphics  pp 246  akeley k   realityengine graphics  in proceed ings of siggraph  computer graphics proceedings pp 116  amanatides j   ray tracing with cones  in pro ceedings of siggraph  computer graphics  pp 135  amburn p  e grant and t whitted   managing geometric complexity with enhanced procedural mod els  in proceedings of siggraph  computer graph ics  pp 196  an yo k  y usami and t kurihara   a simple method for extracting the natural beauty of hair  in proceedings of siggraph  computer graphics  pp 120  apple computer inc   inside macintosh volume addison wesley reading ma  apple computer inc   human interface guidelines the apple desktop interface addison wesley reading ma  arvo j and d kirk   fast ray tracing by ray clas sification  in proceedings of siggraph  computer graphics  pp 64 arvo j and d kikk   particle transport and image synthesis  in proceedings of siggraph  computer graphics  pp 66 arvo j  ed   graphics gems h academic press inc  san diego ca  atherton p r   a scan line hidden surface re moval procedure for constructive solid geometry  in proceedings of siggraph  computer graphics  pp 82  bararr d   analytical methods for dynamic simu lation of non penetrating rigid bodies  in proceedings of siggraph  computer graphics  pp 232  bararr d and a witkin   dynamic simulation of non penetrating flexible bodies  in proceedings of siggraph  computer graphics  pp 308  barkans a c   high speed high quality an tialised vector generation  in proceedings of sig graph  computer graphics  pp 326  barnsley m f  a jacquin f malassent et al   harnessing chaos for image synthesis  in proceed ings of siggraph  computer graphics  pp 1490  barnsey m   fractals everywhere second edition academic press inc  san diego ca  barr a h   superquadrics and angle preserving transformations  eee computer graphics and applica tions  pp 23  barr a h   ray tracing deformed surfaces  in proceedings of siggraph  computer graphics  pp 296  barsky b a and j c beatty   local control of bias and tension in beta splines  acm transactions on graphics  pp 134  barsky b a   a discription and evaluation of vari ous d models  eee computer graphics and applica tions  pp 52  barzel r and a h barr   a modeling system based on dynamic constraints  in proceedings of sig graph  computer graphics  pp  barze  r   physically based modeling for computer graphics academic press inc  san diego ca  baum d r  mann k p smrth ft al   making radiosity usable autamatic preprocessing and mesh ing techniques for the generation of accurate radiosity solutions  in proceedings of siggraph  computer graphics  pp 61  becker s c  w a barrett and d r olsen jr   interactive measurement of three dimensional ob jects using a depth buffer and linear probe  acm transactions on graphics  pp 207  becker b g and n l max   smooth transitions between bump rendering algorithms  in proceedings of siggraph computer graphics proceedings pp 190  brier t and s neely   feature based image meta morphosis  in proceedings of siggraph  com puter graphics  pp 42 bergman l  h fucus e grant et al   image rendering by adaptive refinement  in proceedings of siggraph  computer graphics  pp 38  bergman l d  j s richardson d c richardson et al   view an eploratory molecular visualization system with user definable interaction sequences  in proceedings of siggraph  computer graphics pro ceedings pp 126  bezier p   numerical control mathematics and appli cations translated by a r forrest and a f pankhurst john wiley  sons london  bier e a  s a mackay d a stewart et al   snap dragging  in proceedings of siggraph  computer graphics  pp 248  bier e a  m c stone k pier et al   toolglass and magic lenses the see through interface  in pro ceedings of siggraph  computer graphics proceed ings pp 80  bishop g and d m wiemer   fast phong shading  in proceedings of siggraph  computer graphics  pp 106  blake j w   phigs and phigs plus academic press london  bleser t   tae plus styleguide user interface de scription  nasa goddard space flight center green belt md  bunn j f anp m fe newelt   texture and reflec tion in computer generated images  cacm 10  pp 547  blinn j f   models of light reflection for com puter synthesized pictures  computer graphics  pp 198  blinn j f and m e newell   clipping using ho mogeneous coordinates  computer graphics  pp 251 blinn j f   simulation of wrinkled surfaces  computer graphics  pp 292  blinn j f   a generalization of algebraic surface drawing  acm transactions on graphics  pp 256  blinn j f   light reflection functions for simula tion of clouds and dusty surfaces  in proceedings of siggraph  computer graphics  pp 29  blinn j f   a trip down the graphics pipeline the homogeneous perspective transform  eee com puter graphics and applications  pp 80  bloomenthal j   modeling the mighty maple  in proceedings of siggraph  computer graphics  pp 312  bono p r  j l encarnacao e r a hopcoop et al   gks the first graphics standard  eee com puter graphics and applications  pp 23  booth k s  m p bryden w b cowan et al   on the parameters of human visual performance an in vestigation of the benefits of antialiasing  ieee com puter graphics and applications  pp 41  bresenham j e   algorithm for computer control of a digital plotter  ibm systems journal  pp 30  bresenham j e   a linear algorithm for incremen tal digital display of circular arcs  cacm  pp 106  brooks f p  jr   walkthrough a dynamic graph ics system for simulating virtual buildings  interactive 3d  brooks f p  jr   grasping reality through tlu sion interactive graphics serving science  chi  pp 11  brooks j  p frederick m quh young j j batter et al   project grope  haptic display for scientific visualization  in proceedings of siggraph  com puter graphics   pp 185  brown m h and r sedgewick   a system for al gorithm animation  in proceedings of siggraph  computer graphics  pp 186  brown j r and s cunningham  programming the user interface john wiley  sons new york  bruderlin a and t w calvert   goal directed dynamic animation of human walking  in proceed ings of siggraph  computer graphics  pp 242  brunet p and i navazo   solid representation and operation using extended octrees  acm transactions on graphics  pp 197  bryson s and c levit   the virtual wind tunnel  ieee computer graphics and applications  pp 34  burt p j and e h adelson   a multiresolution spline with application to image mosaics  acm transactions on graphics  pp 236  buxton w  m r lamb d sherman et al   to wards a comprehensive user interface management system  in proceedings of siggraph  computer graphics  pp 42  buxton w  r hill and p rowley   issues and techniques in touch sensitive tablet input  in pro ceedings of siggraph  computer graphics  pp 224  calvert t  a bruderlin   dill et al   desktop animation of multiple human figures  ieee computer graphics and applications  pp  26  cambell g  f a defanti   frederiksen et al   two bit pixel full color encoding  in proceedings of siggraph  computer graphics  pp 224  camps lt iil a t and d  fussell   adaptive mesh generation for global diffuse illumination  in proceedings of siggraph  computer graphics  pp 164  carp s k  j d mackinlay and g g robertson   the information visualizer an information work space  chi  pp 188 carignan m  y yang n m thalmann  t al   dressing animated synthetic actors with complex deformable clothes  in proceedings of siggraph  computer graphics  pp 104  carlbom i  i chakravarty and d vanderschel  a hierarchical data structure for representing the spatial decomposition of d objects  ieee compuler graphics and applications  pp 31  carpenter l   the a buffer an antialiased hid den surface method  in proceedings of siggraph  computer graphics  pp 108  carroll j m and c carrithers  training wheels in a user interface  cacm  pp 806 casale m s and e l stanton   an overview of analytic solid modeling  ieee computer graphics and applications  pp 56  catmull fe   computer display of curved sur faces  in proceedings of the ieee conference on com puter graphics pattern recognition and data structures also in freeman  pp 315 catmull e   an analytic visible surface algo rithm for independent pixe processing  in proceed ings of siggraph  computer graphics  pp 115  chazelle b and j incerpi   triangulation atl shape complexity  acm transactions on graphics  pp 152  cuen m  s j mountfurd and a sellen   a study in interactive 3d rotation using 2d control devices  in proceedings of siggraph  computer graphics  pp 130  cuen s e  h e rushmeier g miller et al   a progressive multi pass method for global ilumina tion  in proceedings of siggraph  computer graphics  pp 174  chin n and s feiner   near real time shadow generation using bsp trees  in proceedings of sig graph  computer graphics  pp 106  chuang r and g entis   d shaded computer animation step by step  eee computer graphics and applications  pp 25  chung j c et al   exploring virtual worlds with head mounted visual displays  proceedings of spie meeting on non holographic true dimensional display technologies  january pp 20 clark j h   the geometry engine a vlsi georm etry system for graphics  in proceedings of sig graph  computer graphics  pp 133  couen m f and d p greenberg   the hemi cube a radiosity solution for complex environ ments  in proceedings of siggraph  computer graphics  pp 40  cohen m f s e chen j r wallace et al   a progressive refinement approach to fast radiosity image generation  in proceedings of siggraph  computer graphics  pp 84  cohen m f and j r wallac   radtosity and realis inc image synthesis academic press boston ma cook r l and k e torrancr   a reflectance model for computer graphics  acm transactions on graphics  pp 24  cook r l  t porter and l carpenter   distrib uted ray tracing  in proceedings of siggraph  computer graphics  pp 145 cook r l   shade trees  in proceedings af sig graph  computer graphics  pp 231 cook r l   stochastic sampling in computer graphics  acm transactions on graphics  pp 72  coon r l  l carpenter aso eb carmutt   the reyes image rendering architecture  in proceedings of siggraph  computer graphics   pp 102  coouuillart s and p jancene   animated free form deformation an interactive animation tech nique  in proceedings of siggraph  computer graphics  pp 26  crow f c   the ahasing problem in computer synthesizec shaded images  cacm  pp 805 crow f c   shadow algorithms for computer graphics  in proceedings of siggraph  computer graphics  pp 248 crow f c   the lise of grayscale for improved raster display of vectors and characters  in proceed ings of siggraph  computer graphics  pp   crow fc   a comparison of antialiasing tech niques  eee computer graphics and applications  pp 49  crow f c   a more flexible image generation en vironment  in proceedings of siggraph com puter graphics  pp 18  cruz neira c  d j sandin and t a defanti   surround screen projection based virtual reality the design and implementatior of the cave  in proceed ings of siggraph computer graphics proceedings pp 142 cunningham s  n k craighill m w fong et al  ed   computer grapincs using object oriented pro gramming john wiley  sons new york  cutler e  d gilly and t o reiuty ed  tue x win dow system in a nutshell second edition o reilly  assoc  inc  sebastopol ca cyrus m and j beck   generalized two and three dimensional clipping  computers and graph ics  pp 28  day a m   the implementation of an algorithm to find the convex hull of a set of three dimensional points  acm transactions on graphics  pp 132  de reerve p  c edelin j francon et al   plant models faithful to botanical structure and develop ment  in proceedings of siggraph  computer graphics  pp 158 deering m   high resolution virtual reality  in proceedings of siggrapel  computer graphics  pp 202  deering m f and s r nelson   leo a system for cost effective 3d shaded graphics  in proceedings ot siggraph  computer graphics proceedings pp 108  demko s  l hodges and b naylor   construction of fractal objects with iterated function systems  in proceedings of siggraph  computer graphics  pp 278  derr s w and w e howarp   flat panel dis plays  scientific american  pp 97  derose t d   geometric continuity shape para meters and geometric constructions for catmull rom splines  acm transactions on graphics  pp 41  dicival equipment corp   digital equipment cor poration xui style guide  maynard ma  dirre m and j swensen   an adaptive subdivi sion algorithm and parallel architecture for realistic image synthesis  in proceedings of siggraph  computer graphics  pp 158  doskin d  l gurpas j hershberger et al   an efficiert algorithm for finding the csg representation of a simple polygon  in proceedings of siggraph  computer graphics  pp 40  doctor l j and j g torberg   display tech niques for octree encoded objects  ieee computer graphics and applications  pp 38  dorsey j o  fx sillion and d p greenberg  design and simulation of opera lighting and projec  tion effects  in proceedings of siggraph  cont puter graphics  pp 50  dresin r a l carpenter and p hanrahan  volume rendering  in proceedings of siggraph  computer graphics  pp 74  durr t   compositing 3d rendered images  in proceedings of siggraph  computer graphics  pp 44  durerett h j  ed   color and the computer academic press boston  duvanenko v   improved line segment clipping  dr dobb s journal july  dyer s and s whitman   a vectorized scan line z buffer rendering algorithm  ieee computer graph ics and applications  pp 45  dyer s   a dataflow toolkit for visualization  ieee computer graphics and applications  pp 69  earnshaw r a  ed   fundamental algorithms for computer graphics springer verlag berlin  edfisbrunner h   algorithms in computational geometry springer verlag berlin  edelsbrunner h and e p mucke   simulation of simplicity a technique to cope with degenerate cases in geometric algorithms  acm transactions on graph ics  pp 104  elber g and e cohen   hidden curve removal for free form surfaces  in proceedings of siggraph  computer graphics  pp 104  enderle g  k kansy and g pfaff  computer graphics programming gks the graphics standard springer verlag berlin  farin g   curves and surfaces for computer aided geo metric design academic press boston ma  farouk r t and j k hinps   a hierarchy of geo metric forms  ieee computer graphics and applications  pp 78  feder j   fractals plenum press new york  feiner s  s nacy and a van dam   an experi mental system for creating and presenting interactive graphical documents  acm transactions on graphics  pp 77  ferwerda j a and d p greenberg   a psy chophysical approach to assessing the quality of an tialiased images  ieee computer graphics and applica tons  pp 95  fishkin k p and b a barsky   a family of new algorithms for soft filling  in proceedings of sig graph  computer graphics   pp 244  fume e l   the mathematical structure of raster graphics academic press boston  fotey j d  v l wallace and p chan   the human factors of computer graphics interaction tech niques  ieee computer graphics and applications 11  pp 48  fotey j d   interfaces for advanced computing  scientific american  pp 135  fotey j d  a van dam  k feiner et al   com puter graphics principles and practice addison wesley reading ma  fournier a  d fussel and l carpenter   com puter rendering of stochastic models  cacm  pp 384  fournier a and d y montuno   triangulating simple polygons and equivalent problems  acm transactions on graphics  pp 174   fournier a and w t reeves   a simple model of ocean waves  in proceedings of siggraph  com puter graphics  pp 84  fournier a and d fussell   on the power of the frame buffer  acm transactions on graphics  pp 128  fournier a and e fiume   constant time filtering with space variant kernels  in proceedings of sig graph  computer graphics  pp 238  fow er d r  h meinhardt and p prusinkiewicz   modeling seashells  in proceedings of siggraph  computer graphics  pp 387 fox d and m walite  computer animation primer mcgraw hill new york  francis g k   a topological picturebook springer verlag new york  franklin w r and m s kankanhalli   parallel object space hidden surface removal  in proceedings of siggraph  computer graphics  pp 94  freeman h eb   tutorial and selected readings in in teractive computer graphics ieee computer society press silver springs md  frenkel k a   volume rendering  cacm  pp 435  frieder g  d gordon and r a reynold   back to front display of voxel based objects  eee com puter graphics and applications  pp 60  friedhoff r m and w benzon  the second com puter revolution visualization harry n abrams inc  new york fucus h  s m pizer e r heinz s h bloomber l tsai and d c strickland   design of and lmage editing with a space filling three dimensional display based on a standard raster graphics system  proceed ings of spie  august pp 127  fucus h   poutton j eyles et at   pixel planes a heterogeneous multiprocessor graphics system using processor enhanced memories  in proceedings of siggraph  computer graphics  pp 88  fujimoto a ano k iwata   jag free images on raster displays  eee computer graphics and applica  _ hons  pp 34  funkhouser t a and c h sequin   adaptive dis play algorithms for interactive frame rates during vi sualizatior complex virtual environments  in pro ceedings of siggraph  computer graphics proceedings pp 254  galyean t a and j f huches   sculpting an in teractive volumetric modeling technique  in proceed ings of siggraph computer graphics  pp 274  gardner g y   visual simulation of clouds  in proceedings of siggraph  computer graphics  pp 304 gascuel m p   an implicit formulation for pre cise contact modeling between flexible solids  in pro ceedings of siggraph  computer graphics pp 320  gaskins t   phigs programming manual o reilly  associates sebastopo  ca  gharachorloo n  s gupta r f sproull et al   a characterization of ten rasterization algorithms  in proceedings of siggraph  computer graphics  pp 368  girard m   interactive design of 3d computer animated legged animal motion  eee computer graphics and applications  pp 51  glassner a s   space subdivision for fast ray tracing  eff compuier graphics and applications  pp 22  glassner a s   adaptive precision in texture mapping  in proceedings of siggraph  computer grapltics  pp 306  glassner a s   spacetime ray tracing for anima tion  ieee computer graphics and applications  pp 70  glassner a s  ed   an introduction to ray tracing academic press san diego ca  glassner a  ed   graphics gems academic press san diego ca  glassner a s   geometric substitution a tutor jal  ieee computer graphics and applications  pp 36  glassner a s   principles of digital image synthesis morgan kaufmann inc  new york  gleicher m and a witkin   through the lens camera control  in proceedings of siggraph  computer graphics  pp 349  goldsmith j and j salmon   automatic creation of object hierarchies for ray tracing  ieee computer graphics and applications  pp 20  gonzalez r c and p wint2  digital image process ing addison wesley reading ma goop d m  j a whitesice d r wixxon and s j janes   building a user derived interface  cacm 10  pp 1042  goopman t and r spence   the effect of system response time on interactive computer aided prob lem solving  in proceedings of siggraph  com puter graphics  pp 104  gora c m  k e torrance d p greenberg et al   modeling the interaction of light between dif fuse surfaces  in proceedings of siggraph  com puter graphics  pp 222 goxvon d and s chen   fron to back display of bsp trees  jeee computer graphics and applications  pp 85 gorter  j  p schroder mf cohen et al   wavelet radiosity  in proceedings of siggraph  camputer graphics proceedings pp 230  green m   the university of alberta user interface management system  in proceedings of siggraph  camputer graphics  pp 214 greene n  m kass and g miller   hierarchical z buffer visibility  in proceedings of siggraph computer graphics proceedings pp 238  hareeru p and k akelly   the accumulation buffer hardware support for high quality render ing  in proceedings of siggraph  computer graph ics  pp 318 hahn j k   realistic animation of rigid bodies  in proceedings of siggraph  computer graphics  pp 308  hall r a and d p greenberg  a testbed for re alistic image synthesis  1efe computer graphics and applications  pp 20  hatt r   hiemmation ami color in computer gener ated imagery springer verlag new york hanrahan p   creating volume models from edge vertex graphs  in proceedings of siggraph  computer graphics  pp 84  hanrahan p and j lawson   a language for shading and lighting calculations  in proceedings of siggraph  computer graphics  pp 298  hart j c  d j sandin and l h kauffman   ray tracing deterministic 3d fractals  in proceedings of siggraph  computer graphics  pp 296  hart j c and t a defanti   efficient antialiased rendering of d linear fractals  in proceedings of siggraph  computer graphics  pp 100  he x d  p o heynen r l phillips et al   a fast and accurate light reflection model  in proceedings of siggraph  computer graphics  pp 254  hearn d and p baker   scientific visualization an introduction  eurographics technical report se ries tutorial lecture  heckbert p   color image quantization for frame buffer display  in proceedings of siggraph  com puter graphics  pp 307  heckbert p and p hanrahan   beam tracing polygonal objects  in proceedings of siggraph  computer graphics  pp 127  hopcoop fr a  d a duce j r gallop et al  introduction to the graphical kernel system gks  acadc mic press london  hopcoon fr a and d a duce  a primer for phigs john wiley  sons chichester england  hope h  t derose t mcdonald et al   mesh optimization  in proceedings of siggraph  com puter graphics proceedings pp 26  howarp t l j  w t hewrrt r j hubbold et ac   a practical introduction to phigs and phigs plus addi son wesley wokingham england  hugues j f   scheduled fourier volume morph ing  in proceedings of siggraph  computer graph ics  pp 46  hurrric h and m nanas   b spline surfaces a tool for computer painting  ieee computer graphics and applications  pp 47  tkebo t   high speed techniques for a d color graphics terminal  fee computer graphics and appli cations  pp 58  immel d s  m fe cohen and d p greenberg   a radiosity method for non diffuse environments  in proceedings of siggraph  computer graphics  pp 142  isaacs p m and m f cohen   controlling dv namic simulation with kinematic constraints behavior functions and inverse dynamics  in proceedings of siggraph  computer graphics  pp 224 jarvis j fc n jupice and w h ninke   a sur vey of techniques for the image display of continuous tone pictures on bilevel displays  computer graphic and image processing  pp 40  johnson s a   clinical varifocal mirror display system at the university uf utah  proceedings of spie  august pp 148  kanrya j t   new techniques for ray tracing pro cedurally defined objects  acm transactions on graph ies  pp 181 kaliya j t   the rendering equation  in proceed ings of siggraph  computer graphics  pp 150 kayrva j t and t l kay   rendering fur with three dimensional textures  in proceedings of sig graph  computer graphics  pp 280 kappet m r   an ellipse drawing algorithm for faster displays  in fundamental algorithms for com puter graphics springer verlag berlin pp 280  karasick m  d lieber and l r nackman   effi cient delaunay triangulation using rational arith metic  acm transactions on graphics  pp 91  kass m   condor constraint based dataflow  in proceedings of siggraph  computer graphics  pp 330  kasson j m and w plourfe   an analysis of se jected computer interchange color spaces  acm transactions on graphics   pp 405  kaurman a   efficient algorithms for 3d scan conversion of parametric curves surfaces and vol umes  in proceedings of siggraph  computer graphics  pp 179  kawaguchl y   a morpholog cal study of the form of nature  in proceedings of siggraph  computer graphics  pp 232  kay t l anp j t kana   ray tracing complex scenes  in proceedings of siggraph  computer graphics  pp 278  kay d c and j r levine  grapltics file formats windcrest mcgraw hill new york kasey a d  m c matin ann g m nielson   terrain simulation using a model af stream erosion  in proceedings of siggraph  computer graphics  pp 264  ken j r  woe carlson and r e parent   shape transformation for polyhedral objects  in proceedings of siggraph  computer graphics  pp 54  kirk d and j arvo   unbiased sampling tech niques for image synthesis  in proceedings of sig graph  computer graphics  pp 156 kirk d  ed   graphics gems hl academic press san diego ca  knutu d e   digital halftones by dot diffusion  acm transactions on graphics  pp 273  kocuanek d h u ano r h bartets   interpolat ing splines with local tension continuity and bias control  in proceedings of siggraph  contputer graphics  pp 41 kon e k and d hearn   fast generation and sur face structuring methods for terrain and other natural phenomena  in proceedings of eurographs com puter graphics forum  pp c 180  korien j u and n  badler   techniques for gen erating the goal directed motion of articulated struc tures  ieee computer graphics and applications  pp 81  koren j u and n i badler   temporal antialias ing in computer generated animation  in proceed ings of siggraph  computer graphics  pp 388  lasseter j   principles of traditional animation applied to 3d computer animation  in proceedings of siggraph  computer graphics  pp 44  laur d and p hanrahan   hierarchical splatting a progressive refinement algorithm for volume ren dering  in proceedings of siggraph  computer graphics  pp 288  laurel b   the art of human computer interface de sign addision wesley reading ma  lee m e  r a redner and p uselton   statisi cally optimized sampling for distributed ray tracing  in proceedings of siggraph  computer graphics  pp 68  levinthal a and t porter   chap  a simd graphics processor  in proceedings of siggraph  computer graphics  pp 82  lzvoy m   display of surfaces from volume data ieee computer graphics and applications  pp 37 levoy m   a hybrid ray tracer for rendering polygon and volume data  ieee computer craphics and applications  pp 40  lewss j p   algorithms for solid noise synthesis  in proceedings of siggraph  computer graphics  pp 270  lian y d 4nnd b a barsky   an analysis and al gorithm for polygon clipping  cacm 11  pp 877  liang y d and b a barsky   a new concept anc method for line clipping  acm transactions on graph ics  pp 22  lien s l  m shantz and v pratt   adaptive for ward differencing for rendering curves and surfaces  in proceedings of siggraph  computer graphics  pp 118  lindley c a   practical ray tracing in c john wiley  sons new york  lischinski d  f tampieri and d p greenberg  combining hierarchical radiosity and discontinuity meshing  in proceedings of siggraph  computer graphics pp 208  latwinowicz p c   inkwell a d animation system  in proceedings of siggraph  computer graphics  pp 122  lodding k n   iconic interfacing  ieee computer graphics and applications  pp 20  loxe t s  d tan h s seah et al   rendering fireworks displays  eee computer graphics and appli cations  pp 43  loomis j  h poizner u bellugi et al   computer graphic modeling of american sign language  in pro ceedings of siggraph  computer graphics  pp 114  lorenson w e and h cline   marching cubes a high resolution 3d surface construction algorithm  in proceedings of siggraph  camputer graphics  pp 169  macckinlay j d  s k card and g g robertson   rapid controlled movement through a virtual 3d workspace  siggraph pp 176  mackinlay   d  g g robertson and s k carp   the perspective wall detail and context smoothly in tegrated  chi  pp 179  magnenat thalmann n and d thalmann  com puter animation theory and practice springer verlag tokyo  magnenat thalmann n and d thalmann  image synthesis springer verlag tokyo  magnenat thalmann n and d thalmann   complex models for animating synthetic actors  ieee computer graphics and applications  pp 45  mandelbrot b b   fractals form chance and di mension freeman press san francisco  mandelbrot b b   the fractal geometry of nature freeman press new york  mantyta m   an introduction to solid modeling computer science press rockville md  max n l and d m lerner   a two and a half d motion blur algorithm  in proceedings of siggraph  computer graphics  pp 94  max n l   atmospheric illumination and shad ows  in proceedings of siggraph  computer graphics  pp 124  max n l   cone spheres  in proceedings of sig graph  computer graphics  pp 62  metaxas d and d terzopoulos   dynamic defor mation of solid primitives with constraints  in pro ceedings of siggraph  computer graphics  pp 312  mever g w  h e rushmeier m f cohen et al   an experimental evaluation of computer graphics imagery  acm transactions on graphics  pp 50  mever g w and d p greenberg   color defective vision and computer graphics displays  ieee com puter graphics and applications  pp 40  meyers d  s skinner and k sloan   surfaces from contours  acm transactions on graphics  pp 258  miller g  p   the motion dynamics of snakes and worms  in proceedings of siggraph  com puter graphics  pp 178 miller j v  d e breen w e lorenson et al   geometrically deformed models a method for ex tracting closed geometric models from volume data  in proceedings of siggraph  computer graphics  pp 226  mitchell d p   spectrally optimal sampling for distribution ray tracing  in proceedings of sic graph  computer graphics  pp 165  mrtchell d p and p hanrahan   mlumination from curved reflectors  in proceedings of siggraph  computer graphics  pp 291  mrvata k   a method of generating stone wall patterns  in proceedings of siggraph computer graphics  pp 394  molnakr s  j eyles and j poulton   pixelflow high speed rendering using image composition  in proceedings of siggraph  computer graphics  pp 240   moon f c   chaotic and fractal dynamics john wiley  sons new york  moore m and j wilhelms   collision detection ad response for computer animation  in proceed ings of siggraph  computer graphics  pp 298  mortenson m e   geometric modeling john wiley  sons new york  murai     volumetric shape description of range data using the blobby model   in proceedings of sig graph  computer graphics  pp 235  muscrave f k  c e kolb and r s mace   the synthesis and rendering of eroded fractal terrains  in proceedings of siggraph  computer graphics  pp 50  myers b a and w buxton   creating high inter active and graphical user interfaces by demonstra tion  in proceedings of siggraph  computer graphics  pp 258  naylor b  j amanatides and w thibault   merg ing bsp trees yields polyhedral set operations  in pro ceedings of siggraph  computer graphics  pp 124  newman w h   a system for interactive graphi cal programming  sjcc thompson books washington d c  pp 54  newman w h and r f sproull  principles of inter active computer graphics mcgraw hill new york  no j t and j marks   spacetime constraints re visited  in proceedings of siggraph  computer graphics pp 350  nicholl t m  d t lee and r a nicholl   an efficient new algorithm for 2d line clipping its de velopment and analysis  in proceedings of sig graph  computer graphics  pp 262  nielson g m  b shriver and l rosenblum ed   visualization in scientific computing  eee computer so ciety press los alamitos ca  nietson g m   scattered data modeling  ieee computer graphics and applications  pp 70  nishimura h   object modeling by distribution function and a method of image generation  journal electronics comm conf  j68  pp 725  nisa t and e naakamae   continuous tone representation of three dimensional objects ilumi nated by sky light  in proceedings of siggraph  computer graphics  pp 132  niseaa t  t siral k tadamura et al   display of the earth taking into account atmospheric scattering  in proceedings of siggraph  computer graphics proceedings pp 182  norton a   generation and display of geometric fractals in d  in proceedings of siggraph  computer graphics  pp 67  nsf invitational workshop   research directions in virtual environments  computer graphics  pp 177  oxase h  h imaoka t tomiha et al   three dimensional apparel cad system  in proceedings of siggraph  computer graphics  pp 110  opengl architecture review board  opengl pro gramming guide addision wesley reading ma  oppenheimer p e   real time design and anima tion of fractal plants and trees  in proceedings of sig graph  computer graphics  pp 64  osf motir  osf motif style guide open software foundation prentice hall englewood cliffs nj  painter j and k sloan   antialiased ray tracing by adaptive progressive refinement  in proceedings of siggraph  computer graphics  pp 288  pano a t   line drawing algorithms for parallel machines  ieee computer graphics and applications  pp 59  pavirois t   algorithms for graphics and image pro cessing computer science press rockville md  pavurpis t   curve fitting with conic splines  acm transactions on graphics  pp 31  pacey d r   modeling waves and surf  in pro ceedings of siggraph  computer graphics  pp 74  perrgen h o and p h richter  the beauty of frac tals springer verlag berlin  perrrcen h   and d saupe ed   the science of frac tal images springer verlag berlin  pentland a and j williams   good vibrations modal dynamics for graphics and animation  in pro ceedings of siggraph  computer graphics  pp 222  peruin k ann e m horrerr   hypertexture  in proceedings of siggraph  computer graphics  pp 262  puiturs r l   a query language for a network data base with graphical entities  in proceedings of siggraph  computer graphics  pp 185  phong b t   iltumination for computer generated images  cacm  pp 317  pinepa j   a parallel algorithm for polygon ras terization  in proceedings of siggraph  computer graphics  pp 20 prreway m l v and d j watkinson   bresen ham s algorithm with gray scale  cacm 11  pp 626  piatt j c and a h barr   constraint methods for flexible models  in proceedings of siggraph  computer graphics  pp 288  porter t and t duff   compositing digital im ages  in proceedings of siggraph  computer graphics  pp 259  potmesil m and chakravarty   synthetic image generation with a lens and aperture camera model acm transactions on graphics  pp 108  pormesil m and il chakravarty   modeling mo tion blur in computer generated images  in proceed ings of siggraph  computer graphics  pp 399  potmesil m and e m horfert   frames soft ware tools for modeling rendering and animation of 3d scenes  in proceedings of siggraph  computer graphics  pp 93  potmesil m and e m hoffert   the pixel ma chine a parallel image computer  in proceedings of siggraph  computer graphics  pp 78  pratt w k   digital image processing john wiley  sons new york  preparata f p and m_ i shamos  computational geometry springer verlag new york  press w h  a teukolsky w t vetterling et al   numerical recipes in c cambridge university press cambridge england  prusinkiewicz p  m s hammel and e mjolsness   animation of plant development  in proceedings of siggraph  computer graphics proceedings pp 360 pruyn p w and d p greenberg   exploring 3d computer graphics in cockpit avionics  ieee cam puter graphics and applications  pp 35  quek l h anp d hearn   efficient space subdi vision methods in ray tracing algorithms  univer sity of lllinois department of computer science report uiucdcs r  ralbert m h and j k hodgins   animation of dy namic legged locomotion  in proceedings of sig graph  computer graphics  pp 358  reeves w t   particle systems a technique for modeling a class of fuzzy objects  acm transactions on graphics  pp 108  reeves w t   particle systems a technique for modeling a class of fuzzy objects  in proceedings of siggraph  computer graphics  pp 376  reeves w t and r blau   approximate and prob abilistic algorithms for shading and rendering struc tured particle systems  in proceedings of siggraph  computer graphics  pp 321  reeves w t  d h salesin and r l  cook   ren dering antialiased shadows with depth maps  in pro ceedings of siggraph  compuier graphics  pp 291  requicha a a g and j r rossignac   solid mod eling and beyond  ieee computer graphics and applica tions  pp 44  reynowps c w   computer animation with scripts and actors  in proceedings of siggraph  com puter graphics  pp 296  reynolds c w   flocks herds and schools a distributed behavioral model  in proceedings of sig graph  computer graphics  pp 34  riesenfeld r f   homogeneous coordinates and projective planes in computer graphics  ieee com puter graphics and applications  pp 55  robertson p k   visualizing color gamuts a user interface for the effective use of perceptual color spaces in data displays  eee computer graphics and applications  pp 64  robertson g g  j d mackinlay and s k carb   cone trees animated 3d visualizations of hierarchi cal information  chi  pp 194  rocerrs d f and r a earnshaw ed   techniques for computer graphics springer verlag new york  rocers d f and j a adams  mathematical elements for computer graphics mcgraw hill new york  rosenthal d s h  et al   the detailed semantics of graphics input devices  in proceedings of sig graph  computer graphics  pp 38  rusine d   specifying gestures by example  in proceedings of siggraph  computer graphics  pp 337 rushmeier h and k torrance   the zonal method for calculating light intensities in the presence of a participating medium  in proceedings of sig graph  computer graphics  pp 302  rushmeier h e and k e torrance   extending the radiosity method to include specularly reflecting and translucent materials  acm transactions on graph ics  pp 27  sabella p   a rendering algorithm far visualizing 3d scalar fields  in proceedings of siggraph  computer graphics  pp 58  sasin m a   contouring the state of the art  in fundamental algorithms for computer graphics r a earnshaw ed springer verlag berlin pp 482  sa rsin d and r barzel   adjustable tools an object oriented interaction metaphor  acm transac tions on graphics  pp 107  samet h and r e wesber   sorting a collection of polygons using quadtrees  acm transactions on graph fes  pp 222 samet h and m tamminen   bintrees csg trees and time  in proceedings of siggraph  computer graphics  pp 130  samet h and r e webber   hierarchical data structures and algorithms for computer graphics part  ieee computer graphics and applications  pp 75  samer h and r e wesber   hierarchical data structures and algorithms for computer graphics part  ieee computer graphics and applications  pp 68  scheifler r w and j gettys   the x window sys tem  acm transactions on graphics  pp 109 schoeneman c  j dorsey b smits et al   global wumination  in proceedings of siggraph  com puter graphics proceedings pp 146  schroder p and p hanrahan   on the form fac tor between two polygons  in proceedings of sig graph  computer graphics proceedings pp 164  schwarrttz m w  w b cowan and j c beatty   an experimental comparison of rgb yiq lab hsv and opponent color models  acm transactions on graphics  pp 158  sederberg t w and e greenwood   a physically based approached to d shape bending  in proceed ings of siggraph  computer graphics  pp 34  sederberg t w  p gao g wang et al   2d shape blending an intrinsic solution to the vertex path prob lem  in proceedings of siggraph  computer graphics proceedings pp 18  segal m   using tolerances to guarantee valid polyhedral modeling results  in proceedings of sig graph  computer graphics  pp 114  segal m  c koropiin r van widenfelt et al   fast shadows and lighting effects using texture map ping  in proceedings of siggraph  computer graphics  pp 252  sequin c h and e k smyei   parameterized ray tracing  in proceedings of siggraph  computer graphics  pp 314  sherr s   electronic displays john wiley  sons new york  shilling a and w strasser   exact algorithm and hardware architecture for an improved a buffer  in proceedings of siggraph  computer graphics proceedings pp 92  shirley p   a ray tracing method for illumination calculation in diffuse specular scenes  graphics inter face  pp 212  shneiderman b   designing the user interface addi son wesley reading ma  shoemake k   animating rotation with quater nion curves  in proceedings of siggraph  com puter graphics  pp 254 sibert j l  w d hurley and t w bleser   an ob ject oriented user interface management system  in proceedings of siggraph  computer graphics  pp 268  sillion f x and c puech   a general two pass method integrating specular and diffuse reflection  in proceedings of siggraph  computer graphics  pp 344  sillion f x  j r arvo s h westin et al   a global ilumination solution for general reflectance distributions  in proceedings of siggraph  com puter graphics  pp 196 sms k   particle anmation and rendering using data parallel computation  in proceedings of sig graph  computer graphics  pp 413  sims k   artificial evolution for computer graph ics  in proceedings of siggraph  computer graph ics  pp 328  singh b  j c beatty k s booth et al   a graph ics editor for benesh movement notation  in proceed ings of siggraph  computer graphics  pp 62  situ a r   color gamut transform pairs  com puter graphics  pp 19 smirn a r   tint fill  computer graphics  pp 283  smith a r   plants fractals and formal lan guages  in proceedings of siggraph  computer graphics  pp 10  smith r b   experiences with the altemate reality kat an example of the tension between literalism and magic  ieee computer graphics and applications  pp 50  smitn a r   planar pass texture mapping and warping  in proceedings of siggraph  computer graphics  pp 272  sits b e  j r arvo and d h salesin   an im portance driven radiosity algorithm  in proceedings of siggraph  computer graphics  pp 282  snyder j m and j t kajiva   generative model ing a symbolic system for geometric modeling  in proceedings of siggraph  computer graphics  pp 378  snyder j m  a r woopwury k fleischer et al   interval method for multi point collisions between time dependent curved surfaces  in proceedings of siggraph  computer graphics pp 334  sproull r f and i e sutherland   a clipping di vider  afips falt joint computer conference stam j anne fume   turbulent wind fields for gaseous phenomena  in proceedings of siggraph  computer graphics proceedings pp 376  stetiner a and d p greenberg   computer graphics visualization for acoustic simulation  in pro ceedings of siggraph  computer graphics  pp 206 strassmann s   hairy brushes  in proceedings of siggraph  computer graphics  pp 232  strauss p s and r carey   an object oriented 3d graphics toolkit  in proceedings of siggraph computer graphics  pp 349  sune h c k  g rogers and w j kusitz   a crit ical evaluation of pex  ieee computer graphics and ap plications  pp 75  sutherland i e   sketchpad a man machine graphical communication system  aftps spring joint computer conference pp 346  sutherland   e  r f sproull and r schumacker   a characterization of ten hidden surface al gorithms  acm computing surveys  pp 55  sutherland i e and g w hopogman   reentrant polygon clipping  cacm  pp 42 swezey r w and e g davis   a case study of human factors guidelines in computer graphics ieee computer graphics and applications  pp 30 takala t and j hahn   sound rendering  in pro ceedings of siggraph  computer graphics  pp 220  tannas j  lawrence e  ed   flat panel displays ana crts van nostrand reinhold company new york  teller s and p hanrahan   global visibility al gorithms for umination computations  in proceed ings of siggraph computer graphics proceedings pp 246  terzopoulos d  j platt a h barr et al   elasti cally deformable models  in proceedings of sig graph  computer graphics  pp 214  thalmann d  ep   scientific visualization and graph ics simulation john wiley  sons chichester england  tuibault w c and b f naylor   set operations on polyhedra using binary space partitioning trees  in proceedings of siggraph  computer graphics  pp 162  torberg j g   a parallel processor architecture for graphics arithmetic operations  in proceedings of siggraph  computer graphics  pp 204  torrance k e ann e m sparrow   theory for off specular reflection from roughened surfaces   optical society of america  pp 1114  travis d   effective color displays academic press london  ture e r   the visual display of quantitative infor mation graphics press cheshire cn  turre e r   envisioning information graphics press cheshire cn  turkowskl k   antialiasing through the use ot coordinate transformations  acm transactions on graphics  pp 234  upson c and m keeler   vbuffer visible vol ume rendering  in proceedings of siggraph  computer graphics  pp 64  upson c  t faulhaber jr  d kamins et al   the application visualization system a computational en vironment for scientific visualization  ieee computer graphics and applications  pp 42  upstitt s   the renderman companion addison wesley reading ma  van de panne m and e fiume   sensor actuator networks  in proceedings of siggraph  computer graphics proceedings pp 342  van wik j j   spot noise texture synthesis for data visualization  in proceedings of siggraph  computer graphics  pp 318  veenstra j and n ahuja   line drawings of octree represented objects  acm transactions on graphics  pp 75  velho l and j d m gomes   digital halftoning with space filling curves  in proceedings of sig graph  computer graphics  pp 90  von herzen b  a h barr and h r zatz   geo metric collisions for time dependent parametric sur faces  in proceedings of siggraph  computer graphics  pp 48  wallace v l   the semantics of graphic input devices  in proceedings of siggraph  computer graphics  pp 65  wallace j r  k a elmquist and e a haines   a ray tracing algorithm for progressive radiosity  in proceedings of siggraph  computer graphics  pp 324  waanger l r  j a ferwerda and d p greenberg  perceiving spatial relationships i computer gener ated images  ieee compuler graphics and applications  pp 58  wart c   color sequences for univariate maps theory experiments and principles  ieee computer graphics and applications  pp 49  warn d r   lighting controls for synthetic im ages  im proceedings of siggraph  computer graphics  pp 21 warnock j and d k wyatt   a device indepen dent graphics imaging model for use with raster de vices  in proceedings of siggraph  computer graphics  pp 319  watt a   fundamentals of three dimensional com puter graphics addison wesley wokingham england  wat m   light water interaction using backward beam tracing  in proceedings of siggraph  cont puter graphics  pp 386  watt a and m wart  advanced animation and ren dering techniques addison wesley wokingham eng land  wechorst h  g hoorer ant d p greenberg  improved computational methods for ray tracing  acm transactions on graphics  pp 69  weil j   the synthesis of cloth objects  in pro ceedings of siggraph  computer graphics  pp 54 weiler k and p atherton   hidden surface re moval using polygon area sorting  in proceedings of siggraph  computer graphics  pp 222  weiler k   polygon comparison using a graph representation  in proceedings of siggraph  computer graphics  pp 18  westin s h  j r arvo and k e torrance   pre dict ng reflectance functions from complex surfaces  in proceedings of siggraph  computer graphics  pp 264  westover l   footprint evaluation for volume rendering  in proceedings of siggraph  com puter graphics  pp 376  whitted t   an improved ilumination model for shaded display  cacm  pp 349  whitted t and d m weimer   a software testbed for the development of 3d raster graphics systems  acm transactions on graphics  pp 58  wuirtep t   antialiased line drawing using brush extrusion  in proceedings of siggraph  camputer graphics  pp 156  wilhelms j   toward automatic motion control  ieee computer graphics and applications  pp 22  wilhelms j and a v gelder   a coherent projec tion approach for direct volume rendering  in pro ceedings of siggraph  computer graphics  pp 284  wilhelms j and a van gelder   octrees for faster isosurface generation  acm transactions on graphics  pp 227  williams l   performance driven facial anima tion  in proceedings of siggraph  computer graphics  pp 242  williams p l   visibility ordering meshed polyhe dra  acm transactions on graphics  pp 126  witkin a and w wetcn   fast animation and control of nonrigid structures  in proceedings of sig graph  computer graphics  pp 252  witkin a and m kass   reaction diffusion tex tures  in proceedings of siggraph  computer graphies  pp 308  wolfram s   mathematica addison wesley read ing ma  woo a  p poulin and a fournier   a survey of shadow algorithms  ieee computer graphics and ap plications  pp 32  wricut w e   parallelization of bresenham s line and circle algorithms  eee computer graphics and ap plications  pp 67  wu x   an efficient antialiasing technique  in proceedings of siggraph  computer graphics  pp 152  wyszeckl g and w s stites  color science john wiley  sons new york  ww g  b wyvill and c mcpheeters   solid texturing of soft objects  ieee computer graphics and applications 12  pp 26  yagger l  c upson and r myers   combining physical and visual simulation creation of the planet jupiter for the film   in proceedings of sig graph  computer graphics  pp 94  yagel r  d cohen and a kaufman   discrete ray tracing  ieee computer graphics and applications  pp 28  yamaguchs k  t l kunn and fujimura   octree related data structures and algorithms  ieee com puter graphics and applications  pp 59  youn d a   the x window system  programming and applications with xt osf motif ediiion prentice hail englewood cliffs nj  zeleznick r c  d b conner m m wloka et al   an object oriented framework for the integration of interactive animation techniques  in proceedings of siggraph  computer graphics  pp 112  zevtzsr d   motor control techniques for figure animation  ieee computer graphics and applications  pp 60  zhang y and r e webber   space diffusion an improved parallel halftoning technique using space filling curves  in proceedings of siggraph  com puter graphics proceedings pp 312   subject index a absolute coordinates a buffer algorithm 76 acoustic digitizer 67 active edge list  active matrix lcd adaptive sampling 40 adaptive spatial subdivision bsp tree ray tracing 38 additive color model  affine transformation aliasing alignment text  ambient light  see aise mlumination models ambient reflection coefficient american national standards institute ansi  angle direction vector  incidence phase refraction rotation specular reflechon angstrom animation accelerations 94 action spevifications applications  18 24 cels color table  direct motion specification 95 double buffering dynamics 96 frame by frame functions goal directed in betweens inverse dynamics mverse kinematics key frame key frame systein kinernatics  95 kochanek bartels splines 27 languages morphing  91 motion specification 96 object definitions parametrized system physically based modeling 95  taster methods 87 real time  scene description scripting system storyboard ansi amencan national standards institute  antialiasing area boundaries 78 area sampling  539 filtering 75 lines 76 nyquist sampling interval pitteway watkinson 78 pret phasing  pixel weighting masks  prefiltering postfiltering in ray tracing 43 stochastic sampling 43 supersampling 74 40 surface boundaries 43 in texture mapping 56 application icon applications ser graphics applications approximation spline area clipping 44 area filling  ser afso fill area antialiasing 78 boundary fill algorithm 30 bundled attributes curved boundaries 30 flood fill algorithm functions hatch  nonzero winding number rule 26 odd even rule scan line algonthm 27 soft fill 63 tint fill unbundled attributes area sampling  aspect ratio aspect source flag area subdivision visibility algorithm 85 artificial reality see virtual reality attentuation function attribute area fill 03 bundled 69 brush 52 character 68 70 color 57 curve 54 grayscale individual inquiry functions intensity level  see alse color intensity levels line color 50 69 hne type 46 69 line width 49 69 marker 68  parameter pen 52 structure 54 system list table text 68 70 unbundled axis reflection rotation  20 shear axis vector rotatian  15 axis vectors basis  axonometric projection  b back face detection 72 back plane clipping background ambient light bar chart 12 38 barn doors light control  baseline character  base vector  ser also basis basis coordinate vectors normal orthogonal orthonormal basis functions  see also blending functions basis matrix spline  beam penetration crt 43 see also cathode ray tube bernstein polynomials beta parameter beta spline 47 bevel join b zier blending functions 28 bspline conversions closed curve cubic curve  curves 33 design techniques 31 matrix properties 30 surfaces 34 bias parameter spline  346 binary space partitioning tree  see also bsp tree  binding language  bisection root finding bitbie bit block transfer  bit map  see also frame buffer bitrap font 33 blending functions b zier 28 bspline subject index blending hinctions cont  cardinal hermite block transfer blobby object  body character nonrigid rigid  boolean operations area fill raster transformations boundary conditions splme  19 boundary fill algorithms  connected region 4xonnected region 30 boundary representation bounding box rectangle  volume box covering box filter 75 box dimension b rep boundary representation  bresenham s algorithm circle line 92 brightness light  brownian mation brush and pen attributes 52 bsp ray tracing tree visibility algorithm 82 b spline b zier conversions blending functions cox deboor recursion formulas cubic 41 curves 44 knot vector local control  matnx nonuniform  44 nanuniform rational nurb  open  44 periodic 41 properties 36 quadratic 39 44 rational surfaces 45 tension parameter uniform 44 buffer  ser also frame buffer bump function  see aiso frame mapping bump mapping 59 bundled attributes  bundle table business visualization  ser also data visualizahon butt line cap button box  cc cabinet projection  cad 11 calligraphic vector display camera viewing 36 camera lens effects capline character  cardinal spline 25  cardiowd 40 cartesian coordinates 601 cathode ray tube 40 ser also video monitors  delta delta shadow mask electrostatic beam deflection 39 focusing high definition inline shadow maak magnetic beam deflection  persistence phosphor 39 refresh rate 41 resohution 40 rgb shadow mask 44 catmull rom spline cavalier projection cell array  center of projection central structure store css  cgi computer graphics interface  cgm computer graphics metafile  character  attributes 68 haseline  body  bottom line capline  color  descender  fonts  functions 168 generation 34 grid 56 33 height  italic  kern  outline fonts 56 133 text precision 167 topline  typeface 33  up vector  width 65 characteristic polygon chart  bar 12 38 pie 12 40 time  line  37 choice input device  chromaticity  diagram 71 values cie international commission on i umination   circle equation cartesian nonparametric  parametric  polar  circle generating algorithms 102 bresenham midpoint 102 mid point function midpoint decision parameters  circle symumetry  cohen sutherland line algorithm 30 curves  yrus beck line algorithm exterior  hardware implementation 64 in homageneous coordinates 63 liang barsky line algorithm 32 liang barsky polygon algorithm nichol lee nichal line algorithm 35 nonrectangular window in normalized coordinates  61 parallel methods parametric 32 planes 50 63 points polygons 43 region codes  straight line segments 37  61 sutherland hodgman polygon algorithm three dimensional 53 two dimensional 45 view volumes 50 63 weiler atherton polygon algorithm 43 window in world coordinates cmy color model 75 codes ray tracing  coefficient ambient reflection diffuse reflectian matrix specular reflechon transparency cohen sutherland line clipping algorithm 30 coherence 24 color chromatiaty chromaticity diagram 71 chromaticity values coding  complementary  cube 73 ser also color models dominant frequency dominant wavelength  70 fill 63 gamut  71 hue  illuminat c in illumination models intuitive concepts 72 lightness hls parameter  line 52 69 lookup table 56 marker  matching functions model  monitor 45 see aise video monitor nonspectral perception 67 primaries pure  purity purple line rgb 57 saturation  selection considerations 81 shades  spectrum electromagnetic  standard cie primanes 69 table 56 text  tints 577 tones  tristimulus vision theory value hsv parameter  color model  additive  cmy 75 hls 80 hsb see hsv model hsv 77 hsv rgb conversion 79 rgb 73 rgb cmy conversion xyz yiq color table animation 87 column vector command icon commission internationale de i eclairage cie  complementary colors  complex number  absolute value  conjugate  euler s formula  imaginary part  length modulus  modulus  ordered pair representation  polar representation 17 pure imaginary  real part  roots complex plane composite monitor 45 composition matrix  computed tomography ct  computer aided design cad  11 computer aided surgery computer art 18 computer graphics interface cgd computer graphics metafile cgm  concatenation matrix  13 concave polygon splitting 37 cone filter  cone receptors  cone tracing  see aiso ray tracing conic curves 12 49 conjugate complex  constant intensity shading 23 constraints 89 constructive solid geometry csg  mass calculations  octree methods 62 ray casting methods 59 volume calculations 59 continuity conditions spline  geometric 19 parametric 18 continuity parameter continuous tone images  see also halftone  contour intensity border  contour plots  applications   surface lines 90 three dimensional isosurfaces  two dimensional isolines  97 contraction tensor  control graph control icon control operations centro point spline  contra polygon contro surface terrain  77 convex hull 3lo coordinate axis rotations 13 coordinate ams vectors basis  coordinate extents coordinate point  coordinates absolute current positon homogeneous relative screen coordinate syste cartesian 601 curvilinear cylindrical device left handed  local  master  modeling  29 normalized device normalized projection orthogonal  polar  right handed screen 76 spherical three dimensional transformation of  20 29 two dimensional 602 won  viewing  20 36 world  copy function cox deboor recursion formulas cramer s rule cross hatch fil  cross product vector  crt 40 see also cathode ray tube csg  see also constructive solid geometry ct computed tomography scan cubic spline  beta m6 bezier 33 b spline  interpolation 27 current event record current position curve attnibutes 54 beta spline  b czier spline b spline 35 cardinal spline 24 cardioid 40 catmull rom spline circle  comic s ction 12 49 ellipse fractal 66 see also fractal curves generalized function hermite spline hyperbola  koch fractal  kochanek bartels spline limagon 40 natural sphire  subject index overhauser spline parabola parallel algorithms 13 parametric representations  piecewise construction 16 polynomial spiral 40 spline  20 see also spline curve superquadyic 13 symumetry considerations 98  curved surface ellipsoid parametric representations 20 quadric 12 rendenng see surface rendering sphere spline  see also spline surface superquadric 13 torus 12 visibility 990  see also visible surface detection curvilnear coordinates cutaway views  cylindrical coordinates cyrus beck line clipping algorithm  d damping constant dashed line 46 data glove  93 see also virtual reality data tablet  see ciso digauzer data visualization  applicatrons 31 contour plots 97 field lines  glyphs  isolines 97 isosurfaces  taultivanate fields  pseudo colur methods  scalar fields 99 streamlines  tensor fields  vector fields 401 volume rendering dda line algorithm 88 deflection coils  see also cathode ray tube delta delta shadow mask crt density functian blobby object  depth butter algonthm 75 depth cueing 300 depth sorhng algorithm 81 descender character  detectability filter 85 determinant 14 device codes 82 device coordinates differental scaling diffuse reflection 500 diffuse retraction digitizer m4 accuracy  acoust  67 apphcatons 15 electromagnetic 66 locator device  resolution  sonic  stroke device  three dimensional  valuator device  subyec t index dimenstn finlidean fractal 3h4  fractional direvied ime segment vector  direchon angles  pirechon cosines direct view storage tube dvst  display coprocessor controller devices 52 ner processors file  list 84 processor 5a sn provessany unl sn program sn pastancr paint to line 80 ray tracing path phstribured light soure distributed ray trasieg 43 distribution rav tracing ditheang dot dimnision method error diffusion method 22 matrin noise 20 ordered dither method random dominant frequency dormnant wavelength  76 dot product dot matrix printer dot ciffasion algorithm double buttering dragging drawing methods  dvs1  dynamtns 96 ser afso animation  aise video monitors display i ldge bst stahlet 22  77 ede vector  conaected region elashe material nonrigid object  flectomagnetic spectrum hlectror beam  see also cathode ray tube convergence electrostatic deflectun  focusing intensity magnete deflection  spat size 40 flectron yun  sev ae c athode ray tube electrostatic printer elevtrothermal printer hlement structure  element pointer  hlevacion view hhpse carlesian equation focus pomt oiidpeint algorithm 10 parametric representation properties symmetry emapsord  emussive displays emitter  energy cloth modeling function  energy distnbution light s urce  energy propagation radios environment array environment mapping error diffusion algorithm 22 euler s formula  see alse complex numbers even odd polygon filling rule event  input mode   queue explicat representation  exploded view  exterior chipping  f false pos tion root hnding  far plane chpping  fast phong shadimg 77 feedback 76 field hhnes fill algorithms see area filling area  attributes 63 see alse area filling color hatch  patterns 62 soft 63 styles tint filter box  cone 175 function gaussian 75 structure 54 65 workstation pick detectabilic  85 fixed posrhon scaling  193 flaps light control  flat pane display emissive gascuischarge light eruthing diode fiz  47 liquid crystal lcd  nonemissive passive matny plasma 46 thin film electrolunuinescent flat shading flight simulators 24 flood fill algorithm flood gun focus point ellipse  font  see alse typeface bitmap 33 cache outline 133 proportionally spaced force constant form factors radiosity  4e forward differences  connected region 24 fractal affine constructions 78 box covering methods brownian motion 78 characteristics 63 classification dimension  67 generation procedures 64 generalor  geometne constructions 71 geametry ininator invariant set random mcpoint displacement methods self inverse self inversion methods 87 self similar seif similarity  z self squaring self squaring methods  similarity dimension subdivision methods 78 topological covering methods 66 fractal curve brownian rrotion dimension fractional brownian motion 75 geometric constriclians 68 invariant 87 inversion constrution methods 87 julia set koch mandelbrot set boundary 84 midpoint displacement 75 peano self affine  self inverse 87 self similar 71 self squanng  snowflake 68 fractai sohd fractal surface brownian dimension four dimensiona  85 geometric constructions 71 midpoint dispiacement 78 self similar 71 self squaring 85 surface rendering terrain 78 fractional brownian motion 78 frachonal dimension frame animation  frame buffer  bit block transfers copy function loading intensity values 95 lookup table 56 raster transformations 11 read function resalution write function frame mapping  fresne reflection laws  frequency spectrum electromagnetic  front plane ichpping  full color system  frustum functions 78 sec also function index  gamma correction 15 gamut color  71 gas discharge displays gaussian bump  gaussian density function 15 gaussian elinunahon  gaussian filter 75 gauss seidel method generator fractal  geometric continuity spline  19 geometric models cgeometric object properties 17 geometric production rules 89 geometric table geometric transformations  gks graphical kernel system  gl graphics library      global lighting effects 527 glyph goal directed motion gouraud shading model 25 graftal graphical user interface applications backup and error handlirg 75 components 76 feedback 76 help facilities icons  interactive techmques 93 menus 273 model user dialogue 73 user s model windows  graphics applications advertising  18 agriculture  animations  18 24 architecture  art 18 astronomy business 13 18  cad 11 cartugraphy education 24 engineering entertainment 21 facility planning  flight simulators 24 geology graphs and charts 13 image processing 33 manufacturing mathematics 17 27 medicine  modeling and simulations  25 31 physical sciences 31 publishing scientific visualization 31 simulations 10 31 simulators 25 training 24 user interfaces virtual reality  67 graphics controller  graphics functions 78 see also function index graphics monitors 52 see also video monitors graphics software packages hasic functions 78 gks gl     phigs phigs  standards 79 three dimensionai graph plotting 39 ser alsu charts graphics tablet  15 67 see aiso diginzer  gravitational acceleration gravity field grayscale grids character  33 in interactive constructions 90 h halftone approximations 19 color methods dithering 22 patterns halfway vector hard copy devices 75 hatch fill  hausdorff besicovitch dimension head mounted display  see also virtual reali hemicube radiosity  49 hermite spline 23 hexcone hsv  hidden line elimination hidden surface elimination  seealso visible surface detection hierarchical modeling 68 high definition video monitor highlighting as depth cueing technique 300 primihves specular reflections  504 structures 54 hls color model 80 homogeneous coordinates hooke s law horizontai retrace horner s polynomial factoring method hsb color model see hsv madel hsv color model 77 hue  hyperbola    icon  ideal reflector  ihuminant c  ulumination model ambient light attentuation funcuon basic components 511 color considerations combined diffuse specular diffuse reflection 500 flaps ideal reflector intensity attentuation light sources  multiple light sources opacity factor phong refraction 10 shadows snell s law specular reflection 504 spotlights lransmission vector transparency 11 warn  image order scanning  subject index image processing 33 image scanners  image space methods visibility detection  imaginary number impact printer implicit representation in betweens index of refraction initiator fractal  ink jei printer 73 inner product vector  in line shadow mask crt input devices button box  choice  data glove  93 dials  digitizer 67 80 graphics tablet initializing 88 joystick 64 80 keyboard  80 light pen  locator  logical classification mouse  80 pick  80 scanner  spaceball string  stroke  switches  three dimensional sonic digitizers touch panel 70 trackball valuator  78 voice systems 71 input functions  87 input modes concurrent use event  87 request  85 sample  input priority inquiry functions inside outside test polygon odd even rule polygon nonzero winding number rule 26 spatial plane surface inside polygon face instance  see also modeling integral equation solving rectangle approximations simpson s rule  trapezord rule  monte carlo  eid 24 intensity attentuation depth cueing 300 interpolation shading gouraud  modeling 97 see also illumination models radiosity model 51 intensity level adjusting see antaliasing assigning 13 color lookup tables 56 contours borders  frame buffer storage gamma correction 15 ratio rgb  video lookup table 513 subject index interactive picture construction techniques 92 interlacing scan lines  international comision on mlumination c1e   interpolation spline  inverse geometric transformations   22 inverse dynamics  inverse kinematics  inverse matrix  inverse quatermon  inverse scanning  1so international standards organization  isohines 97 isometric joystick  isometric projection  isosurfaces  j jaggnes  sec also antahasing antialiasing jittering joystick as locator device movable 64 as pick device pressure sensitive isometric  as stroke device as valuator device julia set  k ker keyboard  as choice device  as locator device  as pick device  as string device  as valuator device key frame key frame system kinematics  96 see also animation knot vector kochanek rartels spline 27 koch curve  l lambertian reflector lambert s cosine law language binding laser printer lcd liquid crystal display  48 least squares data fitting led hghi emitting diode  47 left handed coordinates  legible typeface length complex number  vector l grammar liang barsky clipping  polygons  two dimensional lines 32 light ambient  angle of madence  chromaticity  chromaticity diagram 71 diffuse reflection 500 diffuse refraction frequency band hue ideal reflector index of refraction illuminant c itumination model  see also humination models intensity level assignment 13 lambert s cosine law phong specular model properties 68 purity reflection coefficients 502 refraction angle saturation  579 spectrum specular reflection 504 specular refraction speed transparency coefficient wavelength white  light buffer ray tracing  light emitting diode led  47 lighting model  ser also ihumination model lightness hls parameter  light pen  light source brightness distributed dominant frequency dominant wavelength energy distribution frequency distribution juminance multiple point limagaon  line bundled attributes 69 chart  37 clipping  see aise line clipping color 50 contour   97 dashed 46 function 96 parametric representation  pen and brush options  sampling  rb a4 slope intercept equation type 46 width 49 linear congruential generator linear equation solving cramer s rule gaussian elimination gauss seidel line caps line clipping cohen sutherland 30 cyrus beck liang barsky  nich3l lee nichol 35 nonrectangular clip window parallel methods parametric 32 three dimensional line drawing algorithms 95 antialiasing 76 bresenham 92 dda 88 frame buffer loading 95 parallel 94 liquid crystal display lcd  48 local coordinates  loxal control spline   local transformation matrix locator input device  logical input device look at point lookup table 56 luminance  m mach band mandelbrot set 84 marching cubes algorithm see lsosurfaces marker 34 marker attributes 68 mask  see also pixel mask mass calaulations csg  master coordinates  matrix  addition basis spline  b zier b spline cardinal coefficient column  concatenation  13 determinant dither hermite identity inverse multiplication 13 nonsingular reflection  vow rotation   12 20 scalar multiplication scaling   shear  singular 6l4 spline characterization square translation  transpose medical applications 33 menu  mesh polygon  10 metaball model metafile metric tensor 11 midpoint circle algorithm 102 midpoint displaceiment fractal generation 78 midpoint etlipse algorithm 10 miter join 49 mode input device  model modelinig  ser also graphics applications object representations ilumunation models basic concepts 64 coordinates  29 display procedures  geometni  hierarchical 63 inslance  local coordinates master coordinates modules packages 64 physically based 95  representations 62 structure hierarchies 68 symbol symbo hierarchies 63 transformations  68 29 modules modulus complex  monte carlo methods 24 monitor 52 see also video monitor monitor response curve morphing  91 motion blur  43 motion specification 96 mouse 63 as choice device as locator device as pick device as stroke device multivariate data visualization  n national television system comunittee ntsc   natural spline near plane clipping  newton raphson root finding 22 newton s second law of motion nicholl lee nicholl line clipping 35 noise dither  20 nonemissive displays nonemitter nonlinear equation salving bisection false position newton raphson 22 nonparametric representations 19 nonrigid object nonsingular matrix nonspectra color nonuniform b splines  344 nonuniform differentia  scaling nonuniform rational b spline nurb  nonzero winding number rule 26 normal has s normalized device coordinates normalized projection coordinates normalized view volumes  see aiso clipping normal vector average polygon mesh  curved surface interpolation phong shading  plane surface view plane 36 ntsc national television system committee   numerical methods bisection method cramer s rule false position method gaussian elimination gauss seidel method integral evaluations 24 least squares data fitting linear equations 21 monte carlo methods 24 newton raphson method 22 nonlinear equations 22 root finding 22 simpsaon s rule  trapezoid rule nurb nonuniform rational b spline  nyquist sampling interval  oo object nonngid flexible  as picture component  nigid  97 object geometry 17 object representahon beta splines 47 b zier splines 34 boundary b rep  b splines 45 bsp trees blobby surfaces 15 csg methods 59 cubic spline interpolation 27 data visualization 403 explicit fractal curves and surfaces 87 implicit nonparametnic 19 octrees 62 parametric 20 particle systems 92 physically based modeling 95 polygon 10 quadric surfaces 12 rational splines 49 shape grammars 89 space partitioning methods superquadnics 14 sweep constructions 56 object space methods visibility detection  oblique projection  43 50 53 octree  csg operatians 62 generation 41 visibility detection  87 volume element voxel odd even polygon filling rule one point perspective projection opacity factor order spline curve continuity  19 ordered dither orthogonal basis  orthogonal coordinates orthographic projections   orthonormal basis outline fant  output primitives cell array  circie 102 character 34 conic section 12 ellipse 10 fill area 30 marker 34 point 86 polynomial spline straight line segment  94 text 33 outside polygon face overhauser spline  subject tndex p paintbrush programs 16 92 painter s algorithm depth sorting  panning paratola parallel algorithms area filling 21 curve drawing 13 line drawing 94 paral e projection 99 axonometric cabinet cavalier elevation view isometric 41 obl ique  43 50 53 orthographic  48 plan view principal axes shear transformation  view volume 50 parametric continuity spline  18 parametric representations 20 circle  curve   ellipse ellipsoid 12 sphere  spline  straight line  surface 20 torus 12 parametrized system parity odd even rule particle systerns 92 path text  passive matrix lcd pattern fll 61 index reference point 60 tepresentation  size tiling pattern mapping pattern recognition peano curve pel pen ard brush attributes  penumbra shadow perfect reflector persistence perspective projection  frustum one point principal vanishing point reference point shear transtormation 56 three point two point vanishing point view volume 49 pet position emission tomography 33 phase angle phigs  sve alsa function index attributes   59 70 input 87 modeling 69 output primitives 96   structures 60 three dimensional transformations 26 three dimensional viewing 66 subyect index phigs cont two dimensional transformations  two dimensional viewing 23 workstation phigs  phong specuiar reflection model phong shading 27 phospher 39 photorealism physically based modeling 95  pick distance 80 filter 85 idenhtier input device  80 window  pickability structure  picking picture element pixel  piecewise approximation spline  16 pie chart 12 40 pitteway watkins antialiasing 78 pivot point pixbi pixel addressing 16 end mask  51  patterns halftone  phasing ray 29 weighting mask  pixel order scanning 55 pixmap plane clipping 61 coefficients complex equations far clipping  inside outside taces  near clipping  normal vector pian view plasma pancl display 46 plotters  ser alsn ponters heltbed color  drum flatbed  ink jel 73 laser  pen  rollfeed 75 pount chpping control spline  coordinate  plotting 86 sampling as unit of character size point light source polar coordinates  polar form complex number  17 polygon active edge list  characteristic control edge vector fill 27 ee also area filling inside lace inside outside tests  see also plane mesh  10  normal vector outside face plane equation rendering shading  27 ray intersection 44 sorted edge table  splitting 37 surface surface detail tables 22  77 polygon clipping paralle methods parametric methods sutherland hodgeman 42 three dimensional  weiler atherton 43 polyline 96 polyline connections  polynomial curve position emussion tomography pet  33 positioning methods  posthitering  see alsu antialiasing posting structures  precision text  67 prefiltering  see also anttaliasing presentation graphics 13 pressure sensitive jovstich  primary colors  primitives  see aiso output primit ves principal axes principal vanishing peint printers dot matrix electrothermal impact laser  nonimpact electrostatic  ink jet 73 priority structure view transformation input procedural object representation 92 procedural texture mapping 57 production mules 84 progressive refinement radiosity  50 projecting square line cap projection axonometric cabinet cavalier center of frustum isometric 41 oblique  43 50 53 orthographic  48 parallel  43 54 perspective  47 56 plane reference point vector  53 view volume window pseudo color methods  pure color  purity ight  purple line  q quadric curves quadric surfaces 12  quadnilateral mesh 19 quadtree quaternion addition an fractal constructions 85 inverse magnitude multipheahon ordered pawr rearesentation  rotations 20 scalar multpheation scalar part  vector part  r radiant energy radiance  radhosity model 51 energy transport equation form factors hemicube 49 luminance  progressive refinement 50 reflectivity factor surface enclosure random dither noise  21 random msdpoint displacement methods 78 random scan monitor 42 color refresh display file randomescan system display file  graphics controller rocessing unit random walk raster animation 87 raster ops raster scan monitor 41 bilevel bitmap color 45 frame buffer horizontal retrace interlacing pixel pixmap refresh butter vertical retrace raster scan systera cell encoding display processor run length encoding scan conversion video controller 55 raster trans ormations 11 ratonal spline 49 ray casting constructive solid geometry 59 visible surface detection 88 ray tracing adaptive sarphng 40 adaptive subdivision 38 antialiasing 43 area sampling basic algorithm 31 bundles camera lens effects  cell traversal 37 codes cone tracing  distributed 43 eve ray see pixel ray equation  motion blur  43 pixel primary ray 29 polygon intersection 34 in radiosity model reflection ray  31 refraction ray  secondary ray shadow ray 30 space subdivision 38 sphere intersection 33 stochastic sampling supersampling 40 tree uniform subdivision read function readable typeface real time animation  reference point viewing   reflection angle of inadence axis coefficients 502 diffuse 500 fresnel laws halfway vector lambertian mapping plane ray specular 504 vector  reflection transformation  reflectivity reflectivity factor radiosity  refraction angle s09 diffuse index ray  snell s law s09 specular transmission vector  31 transparency coefficient vector  31 refresh buffer  see aiso frame buffer refresh crt 45 see also cathode ray tube refresh display file refresh rate crt  41 region codes clipping  three dimensional two dimensional relative coordinates rendering see surface rendering requesl input mode  85 resolution display device 40 halftone approximations retrace electron beam  reyes rgb chromaticity coordinates rgb color mode  73 rgb monntor  see alse video manitor right hand coordinate system right hand rule rigid body transformation  97 rigid motion roots nonlinear equalions  complex numbers  rotation angie axis  20 axis vector  15 composition inverse  matnx representation  93 12  19 pivat point quaternion 20 taster methods  three dimensional 20 two dimensional 87  93 x axis 12 y axis axis 11 rotationa polygon splitting method round join 149 round line cap row vector rubber band methods  run length encoding  s sample input mode  sampling adaptive 40 area  line  89 nyquist interval point supersampling 74 40 weighted sans serif typeface saturation light  scalar data field visualization 99 scalar input methods 78 scalar product of two vectors scaling in arbitrary directions 94 composition curved objects differential factors  fixed point  mverse  22 matnix representation  nonuniform differential  parameters factors  raster methods  three dimensicnal 22 two dimensioral 88  94 uniform 88 sean conversion areas 30 characters 33 circles 102 curved boundary areas 30 curved lines 13 ellipses 10 patterned ail  points  polygons 27 straight lines 94 see also line drawing algorithms structure list traversal scan line scan line interlaang scan line algorithms area fillimg 27 63 visible surface detection 78 subject index scanner  scanning image order inverse pixel order 55 texture s54 scientific visualization  see aiso data visualization screen coordinates   see also coordinate system device scripting system animation  secondary ray segment  self affine fractals  78 self inverse fractals  87 self similar fractals  71 self squaring fractals  85 serif typeface shades color  shading algorithm  see surface rendering shading model  ser also illumination model shadow mask shadow ray 30 shadows modeling 30 penumbra umbra shape grammars 90 shear axis matrix in projection mapping  56 three dimensional two dimensional x direction y direction z direction shift vector  see also translation similarity dimension simpson s rule simulations 10 31 sre aiso graphics applications simulators 25 simultaneous linear equation solving 21 singular matrix sketching 16 92 snell s law snowflake fractal  68 soft fill 63 software standards 79 solid angle 45 solid modeling  see also surtace curved surtace applications 9 constructive solid geometry 59 sweep constructions 56 solid texture sonic digitizer sorted edge table spaceball spacegraph system space sartitioning methods ray tracing  adaptive 38 light buffer ray bundles uniform space partitioning representations specular reflection  504 angle coefficient fresnel laws halfway vector parameter subject index specular reflection cont   curve  16 approximation basis functions  bias parameter  b spline 44 characteristic polygon confinuity conditions 19 continuity parameter controt graph control points conversions 50 convex hull cubic interpolation 27 displaying 55 hermite 23 interpolation knot vector  kochanek banels 27 lecal control  matrix representation natural nurb overhauser rational 49 tension parameter   spline generation horner s method forward difference method 53 subdivision methods 55 spline surface b zier 34 b spline 45 splitting concave polygons rotational method vector method spotlights spring constant spring network nonrigid body  square mairix stairstep effect steradian 45 stereoscopic glasses  headsets views  52  301 virtual reality applications  52 stochastic sampling storyboard streamlines string mput device  string precision text  stroke input device  stroke precision text 67 stroke writing display  see alsa video monitors  random scan  structure  attributes 54 basic functions 54 central structure store c55   concepts 52 copying  creation 52 delection  displaying 3g posting editing  element ms element pointer filters  85 hierarchy 68 highlighting filter  lists  metafile  pickability  posting  subdivision methods adaptive ray tracing 38 bsp tree  spline generation 55 unifonm ray tracing subtractive color model cmy  75 superquadric 14 supersampling 74 40 surface blobby 15 curved  ser also curved surfaces fractal  b5 parametric representation 20 plane quadric 12 spline  see also spline surface superquadric 14 weighting surface detail 60 bump mapping 59 environment mapping frame mapping 60 image order scanning inverse scanning pattern mapping pixel order scanning polygon mesh 54 procedural texturing 57 solid texture mapping texture mapping 56 texture scanning s54 surface enclosure radiosity  surface normal vector  surface rendering 98 antialiasing 43 bump mapping 59 constant intensity shading 23 environment mapping fast phong shading 27 flat shading frame mapping  cgouraud shading  25 intensity interpolation mach bands normal vector interpolation phong shading 27 polygon methods  27 polygon surface detail  procedural texturing 57 radiosity 50 ray tracing 43 texture mapping 56 surface shading ser surface rendering sutherland hodgeman potygon clipping 42 sweep representations 56 symbol  hierarchies 63 instance  in modeling 64 circle 98 in curve drawing algorithms 98  ellipse  t table poly gon attribute edge 22  77 geometric sorted edge table vertex tablet 67 see also digitizer task planning tension parameter spline   tensor contraction data field visualization metric  terrain fractal  78 tesselated surface text  see also character alignment attributes 67 7u clipping  generation 33 path precision 67 texture  see also surface rendering mapping 56 procedural methods 57 scanning solid space  57 thin film electroluminescent display three point perspective projection tiling  time chart  tint color  tint fill tone color  topline character  topological covering 66 touch panel 70 trackball transformation affine basic geometric 200 22 commutative 95 composite 200 25 computational efficiency 97 coordinate system  29 functions  26 geometric  instance 63 local 68 matrix representations 90 modeling  68 29 noncommutative t94 parallel projection 99 perspective projection  taster methods 11 teflection  rotation 87 93 20 scaling 88  94 22 shear  three dimersional geometric 22 three dimensional viewing 56 translation 85  two dimensional geometnc 205 two dimensional viewing 22 viewing  22 56 window to viewport  22 workstation 22 world to viewing coordinate 20 38 translation composition curved object distances  inverse  matrix representation  raster methods three dimensional two dimensional 85  vector  transmission vector refraction  31 transparency see also refraction ray tracing coefficient modeling 11 opacity factor vector  31 transpose matrix  trapezoid rule traversal state list triangle strip tristimulus vision theory true color system twist angle two point perspective projection typeface 33 see also font legible readable sans serif serif  u umbra shadow unbundled attributes uniform b splines 44 uniform scahng 88 uniform spatial subdivision octree 62 ray tracing unit cube clipping  up vector character  user dialogue 73 user help facilities user interface  76 93 see also graphical user interface user model uvn coordinate system 38 uv plane  vv valuator input device  78 value hsv parameter  vanishing point varifucal mirror vector  12 addition  basis column components cross product data field visualization 401 direction angles direction cosines dot inner product knot magnitude length  polygon edge product propection  53 in quaternion representation  reflection  rotation 15 row scalar multiplicanon scalar dot product space  specular reflection 504 surface norma   transmission refraction  31 translauon  vector method polygon splitting  vector monitor vertex table vertical retrace video controller 35 video lookup tabie  video monitor  see also cathode ray tube calligraphic color crt 45 composite 45 direct view storage rube dvst  emissive flat panel full color gas discharge lcd liquid crystal device  48 led light emitting diode  47 nonemissive plasma panel random scan 42 raster scan 41 tefresh crt 45 tesolution 40 rgb stereoscopic 52 thin film electroluminescent three dimensional true colur vector view look at point reference point  up vector  twist angle viewing stereoscopic  52  301 three dimensiona  two dimensional 45 viewing coordinates left handed three dimensional 34 two dimensional  20 viewing transformation back far clipping plane clipping  63 front near clipping plane frustum functions 23  hardware implementation  subject index inpul prionty normalized projection coordinates normalized view volume 61 pipeline 19 33 three dimensional 33 two dimensional 22 viewport  60 view volume window  workstation mapping 22 viewing table  view plane 34 normal vector position 35 window viewport chpping  61 function 23 prionty three dumensional see view volume two dimensional __ workstation view reference point  view up vector  view volume unit cube normalized perspective 49 parallel 50 view window virtual reality applications  67 display devices 52 input devices environments 93 visible structure visible line detection  see also depth cucing visible surface detection a buffer method 76 algorithm classification 71 area subdivision method 85 back face detection 72 bsp tree method 82 comparison of algorithms 92 curved surfaces 90 depth bulfer z buffer method 75 depth sorting method 81 function 91 image space methods object space methods octree methods 87 painter s algorithm depth sorting  ray casting method 88 scan line method 78 surface contour plots 90 wireframe methods vision tristimulus theory  visualization applications 31 methods 402 see afso data visualization voice systems 71 volume calculations csg  59 volume element volume rendering voxel  ww warn lighting model wavelength light  weighted sampling  weighting surface  subyect index weiler atherton polygon clipping algorithm winding number window functions 23 manager  projection rotated  20 three dimensicnal viewing 56 two dimensional viewing user intertace  view plane 34 workstation 22 windowing transformation panning rooming 19 window to viewport mapping  22 wireframe  wireframe visibility algorithms  workstation in graphics applications 60 identifier phigs pick filter 85 structure filters  85 transformation 22 window 22 viewport  world coordinates  world to viewing coordinate transformation  20 38 white function  x x axis rotation 12 x direchon shear x window system xyz color model  y y axis rotation y direction shear yiq color model  zz axis rotahon 11 z buffer algorithm  see aiso depth buffer algorithm  z direction shear  z mouse  63 zooming  function index  a awattevent  b buildtransformahonmatrix buildtransformationmatrix3  cc celtarray changestructureldentifier closestructure  composematnx composematrix3 composetransformationmatnx compose transformation matnix3 copy allelementsfromstructure  1d deletcalistructures deletcelement deleteelementrange deletcelementsbetweenlabeis delet cstructure deletestructurenetwork  e emptystructure evaluate view mappingmatnx pvaliateviewmappingmatrix3 evaluate vieworientationmatnx  evaluate viewonentavonmatrixd execules ructure  f dllarea hllarea3 filareaset allcrrcle allcarclearc niellipse hiieipsearc nilrectangle  g generalizeddrawming nmutive gerchoice gertlocator getlocator3 getpick gerpixel gestring getstroke 2h getvaluator  ininaiizechowe initializelocator initializepick initializestring initializestroke imihalizevaluator inquire   l label  o offsetelementpomte  openstructure  pp polyline polyline3 polymarker poststructure  r request hoice requestlocator 83 requestpick requeststring   requeststroke 83 tequestvaluator rotate  totatex rotatey rotatez  s samplechoice samplelocator samplepick samplestring samplestroke samplevaluator scale  scale3  setcharacterexpansionfactor  setcharacterhcight setcharacterspacing setcharacter upvector setchoicemode  setcolourrepresentalion seteditmode setelementpointer setelementpointer atlabel set lighlight ngfilter  set hlhsridentifier  set ndividual asf setintenorc o ourlndex setintenorlndex setinteriorreprescntation setinteriorstvle setinteriorstvielndex setinvisibility filter setlinetype setlinewidthscalefactor setlocaltransformation setlocal transformation  setlocatormade 82 setmarkersizescalefactor setmarkerly pe setpatternreferencepoint setpattern representation setpattemsize setpickfultes setpickldentifier setpickmode 82 setpixel  setpolyhnec olourindex setpolylinelndex setpolzlinerepresentation setpolymarkercolour ndex setpolymarkerindex setpolymarkerrepresentation setstringmode setstrokemcde settextalignment settextculourlndex settextfont  settextindex settextmods 82 settextpath settextprecision  function index settextrepresentation setyaluatormode  setviewlndex  setviewrepresentation setviewrepresentation3 setviewtransformationinpulprionity setworkstation view port setworkstation viewpart3 setworkstation window  setworkstationwindow3  t text  text3  ansformpoint transformpoint3  translate translate3  26 u unpostalistructures unpoststructure 